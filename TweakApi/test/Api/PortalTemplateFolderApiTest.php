<?php
/**
 * PortalTemplateFolderApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * PortalTemplateFolderApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortalTemplateFolderApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for portalTemplateFoldersChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testPortalTemplateFoldersChangeStreamGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testPortalTemplateFoldersChangeStreamPost()
    {

    }

    /**
     * Test case for portalTemplateFoldersCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testPortalTemplateFoldersCountGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testPortalTemplateFoldersFindOneGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testPortalTemplateFoldersGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenCountGet
     *
     * Counts children of PortalTemplateFolder..
     *
     */
    public function testPortalTemplateFoldersIdChildrenCountGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenDelete
     *
     * Deletes all children of this model..
     *
     */
    public function testPortalTemplateFoldersIdChildrenDelete()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenFkDelete
     *
     * Delete a related item by id for children..
     *
     */
    public function testPortalTemplateFoldersIdChildrenFkDelete()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenFkGet
     *
     * Find a related item by id for children..
     *
     */
    public function testPortalTemplateFoldersIdChildrenFkGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenFkPut
     *
     * Update a related item by id for children..
     *
     */
    public function testPortalTemplateFoldersIdChildrenFkPut()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenGet
     *
     * Queries children of PortalTemplateFolder..
     *
     */
    public function testPortalTemplateFoldersIdChildrenGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdChildrenPost
     *
     * Creates a new instance in children of this model..
     *
     */
    public function testPortalTemplateFoldersIdChildrenPost()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testPortalTemplateFoldersIdDelete()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalTemplateFoldersIdExistsGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testPortalTemplateFoldersIdGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalTemplateFoldersIdHead()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdParentGet
     *
     * Fetches belongsTo relation parent..
     *
     */
    public function testPortalTemplateFoldersIdParentGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalTemplateFoldersIdPatch()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdPortalGet
     *
     * Fetches belongsTo relation portal..
     *
     */
    public function testPortalTemplateFoldersIdPortalGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalTemplateFoldersIdPut()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalTemplateFoldersIdReplacePost()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesCountGet
     *
     * Counts templates of PortalTemplateFolder..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesCountGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesDelete
     *
     * Deletes all templates of this model..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesDelete()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesFkDelete
     *
     * Delete a related item by id for templates..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesFkDelete()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesFkGet
     *
     * Find a related item by id for templates..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesFkGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesFkPut
     *
     * Update a related item by id for templates..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesFkPut()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesGet
     *
     * Queries templates of PortalTemplateFolder..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesGet()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesPost
     *
     * Creates a new instance in templates of this model..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesPost()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesRelFkDelete
     *
     * Remove the templates relation to an item by id..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesRelFkDelete()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesRelFkHead
     *
     * Check the existence of templates relation to an item by id..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesRelFkHead()
    {

    }

    /**
     * Test case for portalTemplateFoldersIdTemplatesRelFkPut
     *
     * Add a related item by id for templates..
     *
     */
    public function testPortalTemplateFoldersIdTemplatesRelFkPut()
    {

    }

    /**
     * Test case for portalTemplateFoldersPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalTemplateFoldersPatch()
    {

    }

    /**
     * Test case for portalTemplateFoldersPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testPortalTemplateFoldersPost()
    {

    }

    /**
     * Test case for portalTemplateFoldersPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalTemplateFoldersPut()
    {

    }

    /**
     * Test case for portalTemplateFoldersReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalTemplateFoldersReplaceOrCreatePost()
    {

    }

    /**
     * Test case for portalTemplateFoldersUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testPortalTemplateFoldersUpdatePost()
    {

    }

    /**
     * Test case for portalTemplateFoldersUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testPortalTemplateFoldersUpsertWithWherePost()
    {

    }

}
