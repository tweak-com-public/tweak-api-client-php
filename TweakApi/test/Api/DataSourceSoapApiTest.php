<?php
/**
 * DataSourceSoapApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-beta.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * DataSourceSoapApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataSourceSoapApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for dataSourceSoapsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testDataSourceSoapsChangeStreamGet()
    {

    }

    /**
     * Test case for dataSourceSoapsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testDataSourceSoapsChangeStreamPost()
    {

    }

    /**
     * Test case for dataSourceSoapsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testDataSourceSoapsCountGet()
    {

    }

    /**
     * Test case for dataSourceSoapsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testDataSourceSoapsFindOneGet()
    {

    }

    /**
     * Test case for dataSourceSoapsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testDataSourceSoapsGet()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testDataSourceSoapsIdDelete()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasCountGet
     *
     * Counts dynamicDatas of DataSourceSoap..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasCountGet()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasDelete
     *
     * Deletes all dynamicDatas of this model..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasDelete()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasFkDelete
     *
     * Delete a related item by id for dynamicDatas..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasFkDelete()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasFkGet
     *
     * Find a related item by id for dynamicDatas..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasFkGet()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasFkPut
     *
     * Update a related item by id for dynamicDatas..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasFkPut()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasGet
     *
     * Queries dynamicDatas of DataSourceSoap..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasGet()
    {

    }

    /**
     * Test case for dataSourceSoapsIdDynamicDatasPost
     *
     * Creates a new instance in dynamicDatas of this model..
     *
     */
    public function testDataSourceSoapsIdDynamicDatasPost()
    {

    }

    /**
     * Test case for dataSourceSoapsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDataSourceSoapsIdExistsGet()
    {

    }

    /**
     * Test case for dataSourceSoapsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testDataSourceSoapsIdGet()
    {

    }

    /**
     * Test case for dataSourceSoapsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDataSourceSoapsIdHead()
    {

    }

    /**
     * Test case for dataSourceSoapsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testDataSourceSoapsIdPatch()
    {

    }

    /**
     * Test case for dataSourceSoapsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDataSourceSoapsIdPut()
    {

    }

    /**
     * Test case for dataSourceSoapsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDataSourceSoapsIdReplacePost()
    {

    }

    /**
     * Test case for dataSourceSoapsIdTeamGet
     *
     * Fetches belongsTo relation team..
     *
     */
    public function testDataSourceSoapsIdTeamGet()
    {

    }

    /**
     * Test case for dataSourceSoapsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testDataSourceSoapsPost()
    {

    }

}
