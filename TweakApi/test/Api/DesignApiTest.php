<?php
/**
 * DesignApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * DesignApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DesignApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for designCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testDesignCount()
    {

    }

    /**
     * Test case for designCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testDesignCreate()
    {

    }

    /**
     * Test case for designCreateChangeStreamGetDesignsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testDesignCreateChangeStreamGetDesignsChangeStream()
    {

    }

    /**
     * Test case for designCreateChangeStreamPostDesignsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testDesignCreateChangeStreamPostDesignsChangeStream()
    {

    }

    /**
     * Test case for designDeleteById
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testDesignDeleteById()
    {

    }

    /**
     * Test case for designExistsGetDesignsidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDesignExistsGetDesignsidExists()
    {

    }

    /**
     * Test case for designExistsHeadDesignsid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDesignExistsHeadDesignsid()
    {

    }

    /**
     * Test case for designFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testDesignFind()
    {

    }

    /**
     * Test case for designFindById
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testDesignFindById()
    {

    }

    /**
     * Test case for designFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testDesignFindOne()
    {

    }

    /**
     * Test case for designPrototypeCountCategories
     *
     * Counts categories of Design..
     *
     */
    public function testDesignPrototypeCountCategories()
    {

    }

    /**
     * Test case for designPrototypeCountTags
     *
     * Counts tags of Design..
     *
     */
    public function testDesignPrototypeCountTags()
    {

    }

    /**
     * Test case for designPrototypeCreateCategories
     *
     * Creates a new instance in categories of this model..
     *
     */
    public function testDesignPrototypeCreateCategories()
    {

    }

    /**
     * Test case for designPrototypeCreateTags
     *
     * Creates a new instance in tags of this model..
     *
     */
    public function testDesignPrototypeCreateTags()
    {

    }

    /**
     * Test case for designPrototypeDeleteCategories
     *
     * Deletes all categories of this model..
     *
     */
    public function testDesignPrototypeDeleteCategories()
    {

    }

    /**
     * Test case for designPrototypeDeleteTags
     *
     * Deletes all tags of this model..
     *
     */
    public function testDesignPrototypeDeleteTags()
    {

    }

    /**
     * Test case for designPrototypeDestroyByIdCategories
     *
     * Delete a related item by id for categories..
     *
     */
    public function testDesignPrototypeDestroyByIdCategories()
    {

    }

    /**
     * Test case for designPrototypeDestroyByIdTags
     *
     * Delete a related item by id for tags..
     *
     */
    public function testDesignPrototypeDestroyByIdTags()
    {

    }

    /**
     * Test case for designPrototypeFindByIdCategories
     *
     * Find a related item by id for categories..
     *
     */
    public function testDesignPrototypeFindByIdCategories()
    {

    }

    /**
     * Test case for designPrototypeFindByIdTags
     *
     * Find a related item by id for tags..
     *
     */
    public function testDesignPrototypeFindByIdTags()
    {

    }

    /**
     * Test case for designPrototypeGetCategories
     *
     * Queries categories of Design..
     *
     */
    public function testDesignPrototypeGetCategories()
    {

    }

    /**
     * Test case for designPrototypeGetCustomer
     *
     * Fetches belongsTo relation customer..
     *
     */
    public function testDesignPrototypeGetCustomer()
    {

    }

    /**
     * Test case for designPrototypeGetTags
     *
     * Queries tags of Design..
     *
     */
    public function testDesignPrototypeGetTags()
    {

    }

    /**
     * Test case for designPrototypeUpdateAttributesPatchDesignsid
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testDesignPrototypeUpdateAttributesPatchDesignsid()
    {

    }

    /**
     * Test case for designPrototypeUpdateAttributesPutDesignsid
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testDesignPrototypeUpdateAttributesPutDesignsid()
    {

    }

    /**
     * Test case for designPrototypeUpdateByIdCategories
     *
     * Update a related item by id for categories..
     *
     */
    public function testDesignPrototypeUpdateByIdCategories()
    {

    }

    /**
     * Test case for designPrototypeUpdateByIdTags
     *
     * Update a related item by id for tags..
     *
     */
    public function testDesignPrototypeUpdateByIdTags()
    {

    }

    /**
     * Test case for designReplaceById
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDesignReplaceById()
    {

    }

    /**
     * Test case for designReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testDesignReplaceOrCreate()
    {

    }

    /**
     * Test case for designUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testDesignUpdateAll()
    {

    }

    /**
     * Test case for designUpsertPatchDesigns
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testDesignUpsertPatchDesigns()
    {

    }

    /**
     * Test case for designUpsertPutDesigns
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testDesignUpsertPutDesigns()
    {

    }

    /**
     * Test case for designUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testDesignUpsertWithWhere()
    {

    }

}
