<?php
/**
 * DesignApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * DesignApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DesignApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for designsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testDesignsChangeStreamGet()
    {

    }

    /**
     * Test case for designsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testDesignsChangeStreamPost()
    {

    }

    /**
     * Test case for designsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testDesignsCountGet()
    {

    }

    /**
     * Test case for designsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testDesignsFindOneGet()
    {

    }

    /**
     * Test case for designsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testDesignsGet()
    {

    }

    /**
     * Test case for designsIdAssigneesCountGet
     *
     * Counts assignees of Design..
     *
     */
    public function testDesignsIdAssigneesCountGet()
    {

    }

    /**
     * Test case for designsIdAssigneesDelete
     *
     * Deletes all assignees of this model..
     *
     */
    public function testDesignsIdAssigneesDelete()
    {

    }

    /**
     * Test case for designsIdAssigneesFkDelete
     *
     * Delete a related item by id for assignees..
     *
     */
    public function testDesignsIdAssigneesFkDelete()
    {

    }

    /**
     * Test case for designsIdAssigneesFkGet
     *
     * Find a related item by id for assignees..
     *
     */
    public function testDesignsIdAssigneesFkGet()
    {

    }

    /**
     * Test case for designsIdAssigneesFkPut
     *
     * Update a related item by id for assignees..
     *
     */
    public function testDesignsIdAssigneesFkPut()
    {

    }

    /**
     * Test case for designsIdAssigneesGet
     *
     * Queries assignees of Design..
     *
     */
    public function testDesignsIdAssigneesGet()
    {

    }

    /**
     * Test case for designsIdAssigneesPost
     *
     * Creates a new instance in assignees of this model..
     *
     */
    public function testDesignsIdAssigneesPost()
    {

    }

    /**
     * Test case for designsIdAssigneesRelFkDelete
     *
     * Remove the assignees relation to an item by id..
     *
     */
    public function testDesignsIdAssigneesRelFkDelete()
    {

    }

    /**
     * Test case for designsIdAssigneesRelFkHead
     *
     * Check the existence of assignees relation to an item by id..
     *
     */
    public function testDesignsIdAssigneesRelFkHead()
    {

    }

    /**
     * Test case for designsIdAssigneesRelFkPut
     *
     * Add a related item by id for assignees..
     *
     */
    public function testDesignsIdAssigneesRelFkPut()
    {

    }

    /**
     * Test case for designsIdCommentersCountGet
     *
     * Counts commenters of Design..
     *
     */
    public function testDesignsIdCommentersCountGet()
    {

    }

    /**
     * Test case for designsIdCommentersDelete
     *
     * Deletes all commenters of this model..
     *
     */
    public function testDesignsIdCommentersDelete()
    {

    }

    /**
     * Test case for designsIdCommentersFkDelete
     *
     * Delete a related item by id for commenters..
     *
     */
    public function testDesignsIdCommentersFkDelete()
    {

    }

    /**
     * Test case for designsIdCommentersFkGet
     *
     * Find a related item by id for commenters..
     *
     */
    public function testDesignsIdCommentersFkGet()
    {

    }

    /**
     * Test case for designsIdCommentersFkPut
     *
     * Update a related item by id for commenters..
     *
     */
    public function testDesignsIdCommentersFkPut()
    {

    }

    /**
     * Test case for designsIdCommentersGet
     *
     * Queries commenters of Design..
     *
     */
    public function testDesignsIdCommentersGet()
    {

    }

    /**
     * Test case for designsIdCommentersPost
     *
     * Creates a new instance in commenters of this model..
     *
     */
    public function testDesignsIdCommentersPost()
    {

    }

    /**
     * Test case for designsIdCommentersRelFkDelete
     *
     * Remove the commenters relation to an item by id..
     *
     */
    public function testDesignsIdCommentersRelFkDelete()
    {

    }

    /**
     * Test case for designsIdCommentersRelFkHead
     *
     * Check the existence of commenters relation to an item by id..
     *
     */
    public function testDesignsIdCommentersRelFkHead()
    {

    }

    /**
     * Test case for designsIdCommentersRelFkPut
     *
     * Add a related item by id for commenters..
     *
     */
    public function testDesignsIdCommentersRelFkPut()
    {

    }

    /**
     * Test case for designsIdCustomerGet
     *
     * Fetches belongsTo relation customer..
     *
     */
    public function testDesignsIdCustomerGet()
    {

    }

    /**
     * Test case for designsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testDesignsIdDelete()
    {

    }

    /**
     * Test case for designsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDesignsIdExistsGet()
    {

    }

    /**
     * Test case for designsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testDesignsIdGet()
    {

    }

    /**
     * Test case for designsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDesignsIdHead()
    {

    }

    /**
     * Test case for designsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testDesignsIdPatch()
    {

    }

    /**
     * Test case for designsIdPortalGet
     *
     * Fetches belongsTo relation portal..
     *
     */
    public function testDesignsIdPortalGet()
    {

    }

    /**
     * Test case for designsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDesignsIdPut()
    {

    }

    /**
     * Test case for designsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDesignsIdReplacePost()
    {

    }

    /**
     * Test case for designsIdRequesterGet
     *
     * Fetches belongsTo relation requester..
     *
     */
    public function testDesignsIdRequesterGet()
    {

    }

    /**
     * Test case for designsIdReviewersCountGet
     *
     * Counts reviewers of Design..
     *
     */
    public function testDesignsIdReviewersCountGet()
    {

    }

    /**
     * Test case for designsIdReviewersDelete
     *
     * Deletes all reviewers of this model..
     *
     */
    public function testDesignsIdReviewersDelete()
    {

    }

    /**
     * Test case for designsIdReviewersFkDelete
     *
     * Delete a related item by id for reviewers..
     *
     */
    public function testDesignsIdReviewersFkDelete()
    {

    }

    /**
     * Test case for designsIdReviewersFkGet
     *
     * Find a related item by id for reviewers..
     *
     */
    public function testDesignsIdReviewersFkGet()
    {

    }

    /**
     * Test case for designsIdReviewersFkPut
     *
     * Update a related item by id for reviewers..
     *
     */
    public function testDesignsIdReviewersFkPut()
    {

    }

    /**
     * Test case for designsIdReviewersGet
     *
     * Queries reviewers of Design..
     *
     */
    public function testDesignsIdReviewersGet()
    {

    }

    /**
     * Test case for designsIdReviewersPost
     *
     * Creates a new instance in reviewers of this model..
     *
     */
    public function testDesignsIdReviewersPost()
    {

    }

    /**
     * Test case for designsIdReviewersRelFkDelete
     *
     * Remove the reviewers relation to an item by id..
     *
     */
    public function testDesignsIdReviewersRelFkDelete()
    {

    }

    /**
     * Test case for designsIdReviewersRelFkHead
     *
     * Check the existence of reviewers relation to an item by id..
     *
     */
    public function testDesignsIdReviewersRelFkHead()
    {

    }

    /**
     * Test case for designsIdReviewersRelFkPut
     *
     * Add a related item by id for reviewers..
     *
     */
    public function testDesignsIdReviewersRelFkPut()
    {

    }

    /**
     * Test case for designsIdTagsCountGet
     *
     * Counts tags of Design..
     *
     */
    public function testDesignsIdTagsCountGet()
    {

    }

    /**
     * Test case for designsIdTagsDelete
     *
     * Deletes all tags of this model..
     *
     */
    public function testDesignsIdTagsDelete()
    {

    }

    /**
     * Test case for designsIdTagsFkDelete
     *
     * Delete a related item by id for tags..
     *
     */
    public function testDesignsIdTagsFkDelete()
    {

    }

    /**
     * Test case for designsIdTagsFkGet
     *
     * Find a related item by id for tags..
     *
     */
    public function testDesignsIdTagsFkGet()
    {

    }

    /**
     * Test case for designsIdTagsFkPut
     *
     * Update a related item by id for tags..
     *
     */
    public function testDesignsIdTagsFkPut()
    {

    }

    /**
     * Test case for designsIdTagsGet
     *
     * Queries tags of Design..
     *
     */
    public function testDesignsIdTagsGet()
    {

    }

    /**
     * Test case for designsIdTagsPost
     *
     * Creates a new instance in tags of this model..
     *
     */
    public function testDesignsIdTagsPost()
    {

    }

    /**
     * Test case for designsIdTagsRelFkDelete
     *
     * Remove the tags relation to an item by id..
     *
     */
    public function testDesignsIdTagsRelFkDelete()
    {

    }

    /**
     * Test case for designsIdTagsRelFkHead
     *
     * Check the existence of tags relation to an item by id..
     *
     */
    public function testDesignsIdTagsRelFkHead()
    {

    }

    /**
     * Test case for designsIdTagsRelFkPut
     *
     * Add a related item by id for tags..
     *
     */
    public function testDesignsIdTagsRelFkPut()
    {

    }

    /**
     * Test case for designsIdTemplateGet
     *
     * Fetches belongsTo relation template..
     *
     */
    public function testDesignsIdTemplateGet()
    {

    }

    /**
     * Test case for designsPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testDesignsPatch()
    {

    }

    /**
     * Test case for designsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testDesignsPost()
    {

    }

    /**
     * Test case for designsPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testDesignsPut()
    {

    }

    /**
     * Test case for designsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testDesignsReplaceOrCreatePost()
    {

    }

    /**
     * Test case for designsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testDesignsUpdatePost()
    {

    }

    /**
     * Test case for designsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testDesignsUpsertWithWherePost()
    {

    }

}
