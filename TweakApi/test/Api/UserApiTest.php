<?php
/**
 * UserApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * UserApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for userConfirm
     *
     * Confirm a user registration with email verification token..
     *
     */
    public function testUserConfirm()
    {

    }

    /**
     * Test case for userCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testUserCount()
    {

    }

    /**
     * Test case for userCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testUserCreate()
    {

    }

    /**
     * Test case for userCreateChangeStreamGetUsersChangeStream
     *
     * Create a change stream..
     *
     */
    public function testUserCreateChangeStreamGetUsersChangeStream()
    {

    }

    /**
     * Test case for userCreateChangeStreamPostUsersChangeStream
     *
     * Create a change stream..
     *
     */
    public function testUserCreateChangeStreamPostUsersChangeStream()
    {

    }

    /**
     * Test case for userDeleteById
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testUserDeleteById()
    {

    }

    /**
     * Test case for userExistsGetUsersidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testUserExistsGetUsersidExists()
    {

    }

    /**
     * Test case for userExistsHeadUsersid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testUserExistsHeadUsersid()
    {

    }

    /**
     * Test case for userFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testUserFind()
    {

    }

    /**
     * Test case for userFindById
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testUserFindById()
    {

    }

    /**
     * Test case for userFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testUserFindOne()
    {

    }

    /**
     * Test case for userLogin
     *
     * Login a user with username/email and password..
     *
     */
    public function testUserLogin()
    {

    }

    /**
     * Test case for userLogout
     *
     * Logout a user with access token..
     *
     */
    public function testUserLogout()
    {

    }

    /**
     * Test case for userPrototypeCountAccessTokens
     *
     * Counts accessTokens of User..
     *
     */
    public function testUserPrototypeCountAccessTokens()
    {

    }

    /**
     * Test case for userPrototypeCreateAccessTokens
     *
     * Creates a new instance in accessTokens of this model..
     *
     */
    public function testUserPrototypeCreateAccessTokens()
    {

    }

    /**
     * Test case for userPrototypeDeleteAccessTokens
     *
     * Deletes all accessTokens of this model..
     *
     */
    public function testUserPrototypeDeleteAccessTokens()
    {

    }

    /**
     * Test case for userPrototypeDestroyByIdAccessTokens
     *
     * Delete a related item by id for accessTokens..
     *
     */
    public function testUserPrototypeDestroyByIdAccessTokens()
    {

    }

    /**
     * Test case for userPrototypeFindByIdAccessTokens
     *
     * Find a related item by id for accessTokens..
     *
     */
    public function testUserPrototypeFindByIdAccessTokens()
    {

    }

    /**
     * Test case for userPrototypeGetAccessTokens
     *
     * Queries accessTokens of User..
     *
     */
    public function testUserPrototypeGetAccessTokens()
    {

    }

    /**
     * Test case for userPrototypeUpdateAttributesPatchUsersid
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testUserPrototypeUpdateAttributesPatchUsersid()
    {

    }

    /**
     * Test case for userPrototypeUpdateAttributesPutUsersid
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testUserPrototypeUpdateAttributesPutUsersid()
    {

    }

    /**
     * Test case for userPrototypeUpdateByIdAccessTokens
     *
     * Update a related item by id for accessTokens..
     *
     */
    public function testUserPrototypeUpdateByIdAccessTokens()
    {

    }

    /**
     * Test case for userReplaceById
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testUserReplaceById()
    {

    }

    /**
     * Test case for userReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testUserReplaceOrCreate()
    {

    }

    /**
     * Test case for userResetPassword
     *
     * Reset password for a user with email..
     *
     */
    public function testUserResetPassword()
    {

    }

    /**
     * Test case for userUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testUserUpdateAll()
    {

    }

    /**
     * Test case for userUpsertPatchUsers
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testUserUpsertPatchUsers()
    {

    }

    /**
     * Test case for userUpsertPutUsers
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testUserUpsertPutUsers()
    {

    }

    /**
     * Test case for userUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testUserUpsertWithWhere()
    {

    }

}
