<?php
/**
 * TemplateApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.2-alpha.13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * TemplateApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TemplateApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for templatesChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testTemplatesChangeStreamGet()
    {

    }

    /**
     * Test case for templatesChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testTemplatesChangeStreamPost()
    {

    }

    /**
     * Test case for templatesCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testTemplatesCountGet()
    {

    }

    /**
     * Test case for templatesFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testTemplatesFindOneGet()
    {

    }

    /**
     * Test case for templatesGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testTemplatesGet()
    {

    }

    /**
     * Test case for templatesIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testTemplatesIdDelete()
    {

    }

    /**
     * Test case for templatesIdDesignsCountGet
     *
     * Counts designs of Template..
     *
     */
    public function testTemplatesIdDesignsCountGet()
    {

    }

    /**
     * Test case for templatesIdDesignsDelete
     *
     * Deletes all designs of this model..
     *
     */
    public function testTemplatesIdDesignsDelete()
    {

    }

    /**
     * Test case for templatesIdDesignsFkDelete
     *
     * Delete a related item by id for designs..
     *
     */
    public function testTemplatesIdDesignsFkDelete()
    {

    }

    /**
     * Test case for templatesIdDesignsFkGet
     *
     * Find a related item by id for designs..
     *
     */
    public function testTemplatesIdDesignsFkGet()
    {

    }

    /**
     * Test case for templatesIdDesignsFkPut
     *
     * Update a related item by id for designs..
     *
     */
    public function testTemplatesIdDesignsFkPut()
    {

    }

    /**
     * Test case for templatesIdDesignsGeneratePost
     *
     * Generate design from template.
     *
     */
    public function testTemplatesIdDesignsGeneratePost()
    {

    }

    /**
     * Test case for templatesIdDesignsGet
     *
     * Queries designs of Template..
     *
     */
    public function testTemplatesIdDesignsGet()
    {

    }

    /**
     * Test case for templatesIdDesignsPost
     *
     * Creates a new instance in designs of this model..
     *
     */
    public function testTemplatesIdDesignsPost()
    {

    }

    /**
     * Test case for templatesIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTemplatesIdExistsGet()
    {

    }

    /**
     * Test case for templatesIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testTemplatesIdGet()
    {

    }

    /**
     * Test case for templatesIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTemplatesIdHead()
    {

    }

    /**
     * Test case for templatesIdInvitationTicketsFkDelete
     *
     * Delete InvitationTickets for this Template.
     *
     */
    public function testTemplatesIdInvitationTicketsFkDelete()
    {

    }

    /**
     * Test case for templatesIdInvitationTicketsFkGet
     *
     * Get InvitationTicket by Id for this Template.
     *
     */
    public function testTemplatesIdInvitationTicketsFkGet()
    {

    }

    /**
     * Test case for templatesIdInvitationTicketsGet
     *
     * List InvitationTickets for this Template.
     *
     */
    public function testTemplatesIdInvitationTicketsGet()
    {

    }

    /**
     * Test case for templatesIdMembersCountGet
     *
     * Counts members of Template..
     *
     */
    public function testTemplatesIdMembersCountGet()
    {

    }

    /**
     * Test case for templatesIdMembersDelete
     *
     * Deletes all members of this model..
     *
     */
    public function testTemplatesIdMembersDelete()
    {

    }

    /**
     * Test case for templatesIdMembersFkDelete
     *
     * Delete a related item by id for members..
     *
     */
    public function testTemplatesIdMembersFkDelete()
    {

    }

    /**
     * Test case for templatesIdMembersFkGet
     *
     * Find a related item by id for members..
     *
     */
    public function testTemplatesIdMembersFkGet()
    {

    }

    /**
     * Test case for templatesIdMembersFkPut
     *
     * Update a related item by id for members..
     *
     */
    public function testTemplatesIdMembersFkPut()
    {

    }

    /**
     * Test case for templatesIdMembersGet
     *
     * Queries members of Template..
     *
     */
    public function testTemplatesIdMembersGet()
    {

    }

    /**
     * Test case for templatesIdMembersPost
     *
     * Creates a new instance in members of this model..
     *
     */
    public function testTemplatesIdMembersPost()
    {

    }

    /**
     * Test case for templatesIdMembersRelFkDelete
     *
     * Remove the members relation to an item by id..
     *
     */
    public function testTemplatesIdMembersRelFkDelete()
    {

    }

    /**
     * Test case for templatesIdMembersRelFkHead
     *
     * Check the existence of members relation to an item by id..
     *
     */
    public function testTemplatesIdMembersRelFkHead()
    {

    }

    /**
     * Test case for templatesIdMembersRelFkPut
     *
     * Add a related item by id for members..
     *
     */
    public function testTemplatesIdMembersRelFkPut()
    {

    }

    /**
     * Test case for templatesIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testTemplatesIdPatch()
    {

    }

    /**
     * Test case for templatesIdPermissionDelete
     *
     * Deletes permission of this model..
     *
     */
    public function testTemplatesIdPermissionDelete()
    {

    }

    /**
     * Test case for templatesIdPermissionGet
     *
     * Fetches hasOne relation permission..
     *
     */
    public function testTemplatesIdPermissionGet()
    {

    }

    /**
     * Test case for templatesIdPermissionPost
     *
     * Creates a new instance in permission of this model..
     *
     */
    public function testTemplatesIdPermissionPost()
    {

    }

    /**
     * Test case for templatesIdPermissionPut
     *
     * Update permission of this model..
     *
     */
    public function testTemplatesIdPermissionPut()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersCountGet
     *
     * Counts portalFolders of Template..
     *
     */
    public function testTemplatesIdPortalFoldersCountGet()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersDelete
     *
     * Deletes all portalFolders of this model..
     *
     */
    public function testTemplatesIdPortalFoldersDelete()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersFkDelete
     *
     * Delete a related item by id for portalFolders..
     *
     */
    public function testTemplatesIdPortalFoldersFkDelete()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersFkGet
     *
     * Find a related item by id for portalFolders..
     *
     */
    public function testTemplatesIdPortalFoldersFkGet()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersFkPut
     *
     * Update a related item by id for portalFolders..
     *
     */
    public function testTemplatesIdPortalFoldersFkPut()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersGet
     *
     * Queries portalFolders of Template..
     *
     */
    public function testTemplatesIdPortalFoldersGet()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersPost
     *
     * Creates a new instance in portalFolders of this model..
     *
     */
    public function testTemplatesIdPortalFoldersPost()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersRelFkDelete
     *
     * Remove the portalFolders relation to an item by id..
     *
     */
    public function testTemplatesIdPortalFoldersRelFkDelete()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersRelFkHead
     *
     * Check the existence of portalFolders relation to an item by id..
     *
     */
    public function testTemplatesIdPortalFoldersRelFkHead()
    {

    }

    /**
     * Test case for templatesIdPortalFoldersRelFkPut
     *
     * Add a related item by id for portalFolders..
     *
     */
    public function testTemplatesIdPortalFoldersRelFkPut()
    {

    }

    /**
     * Test case for templatesIdPortalsCountGet
     *
     * Counts portals of Template..
     *
     */
    public function testTemplatesIdPortalsCountGet()
    {

    }

    /**
     * Test case for templatesIdPortalsDelete
     *
     * Deletes all portals of this model..
     *
     */
    public function testTemplatesIdPortalsDelete()
    {

    }

    /**
     * Test case for templatesIdPortalsFkDelete
     *
     * Delete a related item by id for portals..
     *
     */
    public function testTemplatesIdPortalsFkDelete()
    {

    }

    /**
     * Test case for templatesIdPortalsFkGet
     *
     * Find a related item by id for portals..
     *
     */
    public function testTemplatesIdPortalsFkGet()
    {

    }

    /**
     * Test case for templatesIdPortalsFkPut
     *
     * Update a related item by id for portals..
     *
     */
    public function testTemplatesIdPortalsFkPut()
    {

    }

    /**
     * Test case for templatesIdPortalsGet
     *
     * Queries portals of Template..
     *
     */
    public function testTemplatesIdPortalsGet()
    {

    }

    /**
     * Test case for templatesIdPortalsPost
     *
     * Creates a new instance in portals of this model..
     *
     */
    public function testTemplatesIdPortalsPost()
    {

    }

    /**
     * Test case for templatesIdPortalsRelFkDelete
     *
     * Remove the portals relation to an item by id..
     *
     */
    public function testTemplatesIdPortalsRelFkDelete()
    {

    }

    /**
     * Test case for templatesIdPortalsRelFkHead
     *
     * Check the existence of portals relation to an item by id..
     *
     */
    public function testTemplatesIdPortalsRelFkHead()
    {

    }

    /**
     * Test case for templatesIdPortalsRelFkPut
     *
     * Add a related item by id for portals..
     *
     */
    public function testTemplatesIdPortalsRelFkPut()
    {

    }

    /**
     * Test case for templatesIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTemplatesIdPut()
    {

    }

    /**
     * Test case for templatesIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTemplatesIdReplacePost()
    {

    }

    /**
     * Test case for templatesIdTagsCountGet
     *
     * Counts tags of Template..
     *
     */
    public function testTemplatesIdTagsCountGet()
    {

    }

    /**
     * Test case for templatesIdTagsDelete
     *
     * Deletes all tags of this model..
     *
     */
    public function testTemplatesIdTagsDelete()
    {

    }

    /**
     * Test case for templatesIdTagsFkDelete
     *
     * Delete a related item by id for tags..
     *
     */
    public function testTemplatesIdTagsFkDelete()
    {

    }

    /**
     * Test case for templatesIdTagsFkGet
     *
     * Find a related item by id for tags..
     *
     */
    public function testTemplatesIdTagsFkGet()
    {

    }

    /**
     * Test case for templatesIdTagsFkPut
     *
     * Update a related item by id for tags..
     *
     */
    public function testTemplatesIdTagsFkPut()
    {

    }

    /**
     * Test case for templatesIdTagsGet
     *
     * Queries tags of Template..
     *
     */
    public function testTemplatesIdTagsGet()
    {

    }

    /**
     * Test case for templatesIdTagsPost
     *
     * Creates a new instance in tags of this model..
     *
     */
    public function testTemplatesIdTagsPost()
    {

    }

    /**
     * Test case for templatesIdTagsRelFkDelete
     *
     * Remove the tags relation to an item by id..
     *
     */
    public function testTemplatesIdTagsRelFkDelete()
    {

    }

    /**
     * Test case for templatesIdTagsRelFkHead
     *
     * Check the existence of tags relation to an item by id..
     *
     */
    public function testTemplatesIdTagsRelFkHead()
    {

    }

    /**
     * Test case for templatesIdTagsRelFkPut
     *
     * Add a related item by id for tags..
     *
     */
    public function testTemplatesIdTagsRelFkPut()
    {

    }

    /**
     * Test case for templatesIdTeamFolderGet
     *
     * Fetches belongsTo relation teamFolder..
     *
     */
    public function testTemplatesIdTeamFolderGet()
    {

    }

    /**
     * Test case for templatesIdTeamGet
     *
     * Fetches belongsTo relation team..
     *
     */
    public function testTemplatesIdTeamGet()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersCountGet
     *
     * Counts templateMembers of Template..
     *
     */
    public function testTemplatesIdTemplateMembersCountGet()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersDelete
     *
     * Deletes all templateMembers of this model..
     *
     */
    public function testTemplatesIdTemplateMembersDelete()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersFkDelete
     *
     * Delete a related item by id for templateMembers..
     *
     */
    public function testTemplatesIdTemplateMembersFkDelete()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersFkGet
     *
     * Find a related item by id for templateMembers..
     *
     */
    public function testTemplatesIdTemplateMembersFkGet()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersFkPut
     *
     * Update a related item by id for templateMembers..
     *
     */
    public function testTemplatesIdTemplateMembersFkPut()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersGet
     *
     * Queries templateMembers of Template..
     *
     */
    public function testTemplatesIdTemplateMembersGet()
    {

    }

    /**
     * Test case for templatesIdTemplateMembersPost
     *
     * Creates a new instance in templateMembers of this model..
     *
     */
    public function testTemplatesIdTemplateMembersPost()
    {

    }

    /**
     * Test case for templatesIdUploaderGet
     *
     * Fetches belongsTo relation uploader..
     *
     */
    public function testTemplatesIdUploaderGet()
    {

    }

    /**
     * Test case for templatesIdUrlReviewGet
     *
     * Get URL to review a template.
     *
     */
    public function testTemplatesIdUrlReviewGet()
    {

    }

    /**
     * Test case for templatesIdWorkflowGet
     *
     * Fetches belongsTo relation workflow..
     *
     */
    public function testTemplatesIdWorkflowGet()
    {

    }

    /**
     * Test case for templatesPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testTemplatesPatch()
    {

    }

    /**
     * Test case for templatesPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testTemplatesPost()
    {

    }

    /**
     * Test case for templatesPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTemplatesPut()
    {

    }

    /**
     * Test case for templatesReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTemplatesReplaceOrCreatePost()
    {

    }

    /**
     * Test case for templatesUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testTemplatesUpdatePost()
    {

    }

    /**
     * Test case for templatesUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testTemplatesUpsertWithWherePost()
    {

    }

}
