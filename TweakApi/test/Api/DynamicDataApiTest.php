<?php
/**
 * DynamicDataApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.6-alpha.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * DynamicDataApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DynamicDataApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for dynamicDataChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testDynamicDataChangeStreamGet()
    {

    }

    /**
     * Test case for dynamicDataChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testDynamicDataChangeStreamPost()
    {

    }

    /**
     * Test case for dynamicDataCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testDynamicDataCountGet()
    {

    }

    /**
     * Test case for dynamicDataFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testDynamicDataFindOneGet()
    {

    }

    /**
     * Test case for dynamicDataGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testDynamicDataGet()
    {

    }

    /**
     * Test case for dynamicDataIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testDynamicDataIdDelete()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsCountGet
     *
     * Counts designs of DynamicData..
     *
     */
    public function testDynamicDataIdDesignsCountGet()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsDelete
     *
     * Deletes all designs of this model..
     *
     */
    public function testDynamicDataIdDesignsDelete()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsFkDelete
     *
     * Delete a related item by id for designs..
     *
     */
    public function testDynamicDataIdDesignsFkDelete()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsFkGet
     *
     * Find a related item by id for designs..
     *
     */
    public function testDynamicDataIdDesignsFkGet()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsFkPut
     *
     * Update a related item by id for designs..
     *
     */
    public function testDynamicDataIdDesignsFkPut()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsGet
     *
     * Queries designs of DynamicData..
     *
     */
    public function testDynamicDataIdDesignsGet()
    {

    }

    /**
     * Test case for dynamicDataIdDesignsPost
     *
     * Creates a new instance in designs of this model..
     *
     */
    public function testDynamicDataIdDesignsPost()
    {

    }

    /**
     * Test case for dynamicDataIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDynamicDataIdExistsGet()
    {

    }

    /**
     * Test case for dynamicDataIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testDynamicDataIdGet()
    {

    }

    /**
     * Test case for dynamicDataIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testDynamicDataIdHead()
    {

    }

    /**
     * Test case for dynamicDataIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testDynamicDataIdPatch()
    {

    }

    /**
     * Test case for dynamicDataIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDynamicDataIdPut()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsCountGet
     *
     * Count Dynamic Data records.
     *
     */
    public function testDynamicDataIdRecordsCountGet()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsDelete
     *
     * Delete all matching records..
     *
     */
    public function testDynamicDataIdRecordsDelete()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsFkDelete
     *
     * Delete a model instance by {{fk}} from the data source..
     *
     */
    public function testDynamicDataIdRecordsFkDelete()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsFkGet
     *
     * Find a model instance by {{fk}} from the data source..
     *
     */
    public function testDynamicDataIdRecordsFkGet()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsFkPropertyNameUploadPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDynamicDataIdRecordsFkPropertyNameUploadPut()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsFkPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDynamicDataIdRecordsFkPut()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testDynamicDataIdRecordsGet()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsMigratePost
     *
     * Request migration for Dynamic Data records.
     *
     */
    public function testDynamicDataIdRecordsMigratePost()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testDynamicDataIdRecordsPost()
    {

    }

    /**
     * Test case for dynamicDataIdRecordsUploadCsvPost
     *
     * Upload CSV for this Dynamic Data.
     *
     */
    public function testDynamicDataIdRecordsUploadCsvPost()
    {

    }

    /**
     * Test case for dynamicDataIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testDynamicDataIdReplacePost()
    {

    }

    /**
     * Test case for dynamicDataIdTeamGet
     *
     * Fetches belongsTo relation team..
     *
     */
    public function testDynamicDataIdTeamGet()
    {

    }

    /**
     * Test case for dynamicDataPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testDynamicDataPatch()
    {

    }

    /**
     * Test case for dynamicDataPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testDynamicDataPost()
    {

    }

    /**
     * Test case for dynamicDataPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testDynamicDataPut()
    {

    }

    /**
     * Test case for dynamicDataReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testDynamicDataReplaceOrCreatePost()
    {

    }

    /**
     * Test case for dynamicDataUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testDynamicDataUpdatePost()
    {

    }

    /**
     * Test case for dynamicDataUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testDynamicDataUpsertWithWherePost()
    {

    }

}
