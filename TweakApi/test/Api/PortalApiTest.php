<?php
/**
 * PortalApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * PortalApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortalApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for portalsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testPortalsChangeStreamGet()
    {

    }

    /**
     * Test case for portalsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testPortalsChangeStreamPost()
    {

    }

    /**
     * Test case for portalsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testPortalsCountGet()
    {

    }

    /**
     * Test case for portalsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testPortalsFindOneGet()
    {

    }

    /**
     * Test case for portalsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testPortalsGet()
    {

    }

    /**
     * Test case for portalsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testPortalsIdDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsCountGet
     *
     * Counts designs of Portal..
     *
     */
    public function testPortalsIdDesignsCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignsDelete
     *
     * Deletes all designs of this model..
     *
     */
    public function testPortalsIdDesignsDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsFkDelete
     *
     * Delete a related item by id for designs..
     *
     */
    public function testPortalsIdDesignsFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsFkGet
     *
     * Find a related item by id for designs..
     *
     */
    public function testPortalsIdDesignsFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignsFkPut
     *
     * Update a related item by id for designs..
     *
     */
    public function testPortalsIdDesignsFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsGet
     *
     * Queries designs of Portal..
     *
     */
    public function testPortalsIdDesignsGet()
    {

    }

    /**
     * Test case for portalsIdDesignsPost
     *
     * Creates a new instance in designs of this model..
     *
     */
    public function testPortalsIdDesignsPost()
    {

    }

    /**
     * Test case for portalsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalsIdExistsGet()
    {

    }

    /**
     * Test case for portalsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testPortalsIdGet()
    {

    }

    /**
     * Test case for portalsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalsIdHead()
    {

    }

    /**
     * Test case for portalsIdMembersCountGet
     *
     * Counts members of Portal..
     *
     */
    public function testPortalsIdMembersCountGet()
    {

    }

    /**
     * Test case for portalsIdMembersDelete
     *
     * Deletes all members of this model..
     *
     */
    public function testPortalsIdMembersDelete()
    {

    }

    /**
     * Test case for portalsIdMembersFkDelete
     *
     * Delete a related item by id for members..
     *
     */
    public function testPortalsIdMembersFkDelete()
    {

    }

    /**
     * Test case for portalsIdMembersFkGet
     *
     * Find a related item by id for members..
     *
     */
    public function testPortalsIdMembersFkGet()
    {

    }

    /**
     * Test case for portalsIdMembersFkPut
     *
     * Update a related item by id for members..
     *
     */
    public function testPortalsIdMembersFkPut()
    {

    }

    /**
     * Test case for portalsIdMembersGet
     *
     * Queries members of Portal..
     *
     */
    public function testPortalsIdMembersGet()
    {

    }

    /**
     * Test case for portalsIdMembersPost
     *
     * Creates a new instance in members of this model..
     *
     */
    public function testPortalsIdMembersPost()
    {

    }

    /**
     * Test case for portalsIdMembersRelFkDelete
     *
     * Remove the members relation to an item by id..
     *
     */
    public function testPortalsIdMembersRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdMembersRelFkHead
     *
     * Check the existence of members relation to an item by id..
     *
     */
    public function testPortalsIdMembersRelFkHead()
    {

    }

    /**
     * Test case for portalsIdMembersRelFkPut
     *
     * Add a related item by id for members..
     *
     */
    public function testPortalsIdMembersRelFkPut()
    {

    }

    /**
     * Test case for portalsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalsIdPatch()
    {

    }

    /**
     * Test case for portalsIdPermissionDelete
     *
     * Deletes permission of this model..
     *
     */
    public function testPortalsIdPermissionDelete()
    {

    }

    /**
     * Test case for portalsIdPermissionGet
     *
     * Fetches hasOne relation permission..
     *
     */
    public function testPortalsIdPermissionGet()
    {

    }

    /**
     * Test case for portalsIdPermissionPost
     *
     * Creates a new instance in permission of this model..
     *
     */
    public function testPortalsIdPermissionPost()
    {

    }

    /**
     * Test case for portalsIdPermissionPut
     *
     * Update permission of this model..
     *
     */
    public function testPortalsIdPermissionPut()
    {

    }

    /**
     * Test case for portalsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalsIdPut()
    {

    }

    /**
     * Test case for portalsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalsIdReplacePost()
    {

    }

    /**
     * Test case for portalsIdTeamGet
     *
     * Fetches belongsTo relation team..
     *
     */
    public function testPortalsIdTeamGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesCountGet
     *
     * Counts templates of Portal..
     *
     */
    public function testPortalsIdTemplatesCountGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesDelete
     *
     * Deletes all templates of this model..
     *
     */
    public function testPortalsIdTemplatesDelete()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkDelete
     *
     * Delete a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesFkDelete()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkGet
     *
     * Find a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesFkGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkPut
     *
     * Update a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesFkPut()
    {

    }

    /**
     * Test case for portalsIdTemplatesGet
     *
     * Queries templates of Portal..
     *
     */
    public function testPortalsIdTemplatesGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesPost
     *
     * Creates a new instance in templates of this model..
     *
     */
    public function testPortalsIdTemplatesPost()
    {

    }

    /**
     * Test case for portalsIdTemplatesRelFkDelete
     *
     * Remove the templates relation to an item by id..
     *
     */
    public function testPortalsIdTemplatesRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdTemplatesRelFkHead
     *
     * Check the existence of templates relation to an item by id..
     *
     */
    public function testPortalsIdTemplatesRelFkHead()
    {

    }

    /**
     * Test case for portalsIdTemplatesRelFkPut
     *
     * Add a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesRelFkPut()
    {

    }

    /**
     * Test case for portalsPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalsPatch()
    {

    }

    /**
     * Test case for portalsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testPortalsPost()
    {

    }

    /**
     * Test case for portalsPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalsPut()
    {

    }

    /**
     * Test case for portalsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalsReplaceOrCreatePost()
    {

    }

    /**
     * Test case for portalsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testPortalsUpdatePost()
    {

    }

    /**
     * Test case for portalsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testPortalsUpsertWithWherePost()
    {

    }

}
