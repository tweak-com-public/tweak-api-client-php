<?php
/**
 * PortalApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * PortalApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortalApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for portalsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testPortalsChangeStreamGet()
    {

    }

    /**
     * Test case for portalsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testPortalsChangeStreamPost()
    {

    }

    /**
     * Test case for portalsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testPortalsCountGet()
    {

    }

    /**
     * Test case for portalsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testPortalsFindOneGet()
    {

    }

    /**
     * Test case for portalsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testPortalsGet()
    {

    }

    /**
     * Test case for portalsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testPortalsIdDelete()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersCountGet
     *
     * Counts designFolders of Portal..
     *
     */
    public function testPortalsIdDesignFoldersCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersDelete
     *
     * Deletes all designFolders of this model..
     *
     */
    public function testPortalsIdDesignFoldersDelete()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersFkDelete
     *
     * Delete a related item by id for designFolders..
     *
     */
    public function testPortalsIdDesignFoldersFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersFkGet
     *
     * Find a related item by id for designFolders..
     *
     */
    public function testPortalsIdDesignFoldersFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersFkPut
     *
     * Update a related item by id for designFolders..
     *
     */
    public function testPortalsIdDesignFoldersFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersGet
     *
     * Queries designFolders of Portal..
     *
     */
    public function testPortalsIdDesignFoldersGet()
    {

    }

    /**
     * Test case for portalsIdDesignFoldersPost
     *
     * Creates a new instance in designFolders of this model..
     *
     */
    public function testPortalsIdDesignFoldersPost()
    {

    }

    /**
     * Test case for portalsIdDesignsCountGet
     *
     * Counts designs of Portal..
     *
     */
    public function testPortalsIdDesignsCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignsDelete
     *
     * Deletes all designs of this model..
     *
     */
    public function testPortalsIdDesignsDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsFkDelete
     *
     * Delete a related item by id for designs..
     *
     */
    public function testPortalsIdDesignsFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsFkGet
     *
     * Find a related item by id for designs..
     *
     */
    public function testPortalsIdDesignsFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignsFkPut
     *
     * Update a related item by id for designs..
     *
     */
    public function testPortalsIdDesignsFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsGet
     *
     * Queries designs of Portal..
     *
     */
    public function testPortalsIdDesignsGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkAssigneeGet
     *
     * Fetches belongsTo relation assignee..
     *
     */
    public function testPortalsIdDesignsNkAssigneeGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersCountGet
     *
     * Counts commenters of Design..
     *
     */
    public function testPortalsIdDesignsNkCommentersCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersDelete
     *
     * Deletes all commenters of this model..
     *
     */
    public function testPortalsIdDesignsNkCommentersDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersFkDelete
     *
     * Delete a related item by id for commenters..
     *
     */
    public function testPortalsIdDesignsNkCommentersFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersFkGet
     *
     * Find a related item by id for commenters..
     *
     */
    public function testPortalsIdDesignsNkCommentersFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersFkPut
     *
     * Update a related item by id for commenters..
     *
     */
    public function testPortalsIdDesignsNkCommentersFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersGet
     *
     * Queries commenters of Design..
     *
     */
    public function testPortalsIdDesignsNkCommentersGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersPost
     *
     * Creates a new instance in commenters of this model..
     *
     */
    public function testPortalsIdDesignsNkCommentersPost()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersRelFkDelete
     *
     * Remove the commenters relation to an item by id..
     *
     */
    public function testPortalsIdDesignsNkCommentersRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersRelFkHead
     *
     * Check the existence of commenters relation to an item by id..
     *
     */
    public function testPortalsIdDesignsNkCommentersRelFkHead()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentersRelFkPut
     *
     * Add a related item by id for commenters..
     *
     */
    public function testPortalsIdDesignsNkCommentersRelFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsCountGet
     *
     * Counts comments of Design..
     *
     */
    public function testPortalsIdDesignsNkCommentsCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsDelete
     *
     * Deletes all comments of this model..
     *
     */
    public function testPortalsIdDesignsNkCommentsDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsFkDelete
     *
     * Delete a related item by id for comments..
     *
     */
    public function testPortalsIdDesignsNkCommentsFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsFkGet
     *
     * Find a related item by id for comments..
     *
     */
    public function testPortalsIdDesignsNkCommentsFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsFkPut
     *
     * Update a related item by id for comments..
     *
     */
    public function testPortalsIdDesignsNkCommentsFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsGet
     *
     * Queries comments of Design..
     *
     */
    public function testPortalsIdDesignsNkCommentsGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCommentsPost
     *
     * Creates a new instance in comments of this model..
     *
     */
    public function testPortalsIdDesignsNkCommentsPost()
    {

    }

    /**
     * Test case for portalsIdDesignsNkCustomerGet
     *
     * Fetches belongsTo relation customer..
     *
     */
    public function testPortalsIdDesignsNkCustomerGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsCountGet
     *
     * Counts exports of Design..
     *
     */
    public function testPortalsIdDesignsNkExportsCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsDelete
     *
     * Deletes all exports of this model..
     *
     */
    public function testPortalsIdDesignsNkExportsDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsFkDelete
     *
     * Delete a related item by id for exports..
     *
     */
    public function testPortalsIdDesignsNkExportsFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsFkGet
     *
     * Find a related item by id for exports..
     *
     */
    public function testPortalsIdDesignsNkExportsFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsFkPut
     *
     * Update a related item by id for exports..
     *
     */
    public function testPortalsIdDesignsNkExportsFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsGet
     *
     * Queries exports of Design..
     *
     */
    public function testPortalsIdDesignsNkExportsGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkExportsPost
     *
     * Creates a new instance in exports of this model..
     *
     */
    public function testPortalsIdDesignsNkExportsPost()
    {

    }

    /**
     * Test case for portalsIdDesignsNkFolderGet
     *
     * Fetches belongsTo relation folder..
     *
     */
    public function testPortalsIdDesignsNkFolderGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkPortalGet
     *
     * Fetches belongsTo relation portal..
     *
     */
    public function testPortalsIdDesignsNkPortalGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkRequesterGet
     *
     * Fetches belongsTo relation requester..
     *
     */
    public function testPortalsIdDesignsNkRequesterGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkReviewerGet
     *
     * Fetches belongsTo relation reviewer..
     *
     */
    public function testPortalsIdDesignsNkReviewerGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsCountGet
     *
     * Counts tags of Design..
     *
     */
    public function testPortalsIdDesignsNkTagsCountGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsDelete
     *
     * Deletes all tags of this model..
     *
     */
    public function testPortalsIdDesignsNkTagsDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsFkDelete
     *
     * Delete a related item by id for tags..
     *
     */
    public function testPortalsIdDesignsNkTagsFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsFkGet
     *
     * Find a related item by id for tags..
     *
     */
    public function testPortalsIdDesignsNkTagsFkGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsFkPut
     *
     * Update a related item by id for tags..
     *
     */
    public function testPortalsIdDesignsNkTagsFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsGet
     *
     * Queries tags of Design..
     *
     */
    public function testPortalsIdDesignsNkTagsGet()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsPost
     *
     * Creates a new instance in tags of this model..
     *
     */
    public function testPortalsIdDesignsNkTagsPost()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsRelFkDelete
     *
     * Remove the tags relation to an item by id..
     *
     */
    public function testPortalsIdDesignsNkTagsRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsRelFkHead
     *
     * Check the existence of tags relation to an item by id..
     *
     */
    public function testPortalsIdDesignsNkTagsRelFkHead()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTagsRelFkPut
     *
     * Add a related item by id for tags..
     *
     */
    public function testPortalsIdDesignsNkTagsRelFkPut()
    {

    }

    /**
     * Test case for portalsIdDesignsNkTemplateGet
     *
     * Fetches belongsTo relation template..
     *
     */
    public function testPortalsIdDesignsNkTemplateGet()
    {

    }

    /**
     * Test case for portalsIdDesignsPost
     *
     * Creates a new instance in designs of this model..
     *
     */
    public function testPortalsIdDesignsPost()
    {

    }

    /**
     * Test case for portalsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalsIdExistsGet()
    {

    }

    /**
     * Test case for portalsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testPortalsIdGet()
    {

    }

    /**
     * Test case for portalsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalsIdHead()
    {

    }

    /**
     * Test case for portalsIdImageFoldersCountGet
     *
     * Counts imageFolders of Portal..
     *
     */
    public function testPortalsIdImageFoldersCountGet()
    {

    }

    /**
     * Test case for portalsIdImageFoldersDelete
     *
     * Deletes all imageFolders of this model..
     *
     */
    public function testPortalsIdImageFoldersDelete()
    {

    }

    /**
     * Test case for portalsIdImageFoldersFkDelete
     *
     * Delete a related item by id for imageFolders..
     *
     */
    public function testPortalsIdImageFoldersFkDelete()
    {

    }

    /**
     * Test case for portalsIdImageFoldersFkGet
     *
     * Find a related item by id for imageFolders..
     *
     */
    public function testPortalsIdImageFoldersFkGet()
    {

    }

    /**
     * Test case for portalsIdImageFoldersFkPut
     *
     * Update a related item by id for imageFolders..
     *
     */
    public function testPortalsIdImageFoldersFkPut()
    {

    }

    /**
     * Test case for portalsIdImageFoldersGet
     *
     * Queries imageFolders of Portal..
     *
     */
    public function testPortalsIdImageFoldersGet()
    {

    }

    /**
     * Test case for portalsIdImageFoldersPost
     *
     * Creates a new instance in imageFolders of this model..
     *
     */
    public function testPortalsIdImageFoldersPost()
    {

    }

    /**
     * Test case for portalsIdImageFoldersRelFkDelete
     *
     * Remove the imageFolders relation to an item by id..
     *
     */
    public function testPortalsIdImageFoldersRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdImageFoldersRelFkHead
     *
     * Check the existence of imageFolders relation to an item by id..
     *
     */
    public function testPortalsIdImageFoldersRelFkHead()
    {

    }

    /**
     * Test case for portalsIdImageFoldersRelFkPut
     *
     * Add a related item by id for imageFolders..
     *
     */
    public function testPortalsIdImageFoldersRelFkPut()
    {

    }

    /**
     * Test case for portalsIdMembersCountGet
     *
     * Counts members of Portal..
     *
     */
    public function testPortalsIdMembersCountGet()
    {

    }

    /**
     * Test case for portalsIdMembersDelete
     *
     * Deletes all members of this model..
     *
     */
    public function testPortalsIdMembersDelete()
    {

    }

    /**
     * Test case for portalsIdMembersFkDelete
     *
     * Delete a related item by id for members..
     *
     */
    public function testPortalsIdMembersFkDelete()
    {

    }

    /**
     * Test case for portalsIdMembersFkGet
     *
     * Find a related item by id for members..
     *
     */
    public function testPortalsIdMembersFkGet()
    {

    }

    /**
     * Test case for portalsIdMembersFkPut
     *
     * Update a related item by id for members..
     *
     */
    public function testPortalsIdMembersFkPut()
    {

    }

    /**
     * Test case for portalsIdMembersGet
     *
     * Queries members of Portal..
     *
     */
    public function testPortalsIdMembersGet()
    {

    }

    /**
     * Test case for portalsIdMembersPost
     *
     * Creates a new instance in members of this model..
     *
     */
    public function testPortalsIdMembersPost()
    {

    }

    /**
     * Test case for portalsIdMembersRelFkDelete
     *
     * Remove the members relation to an item by id..
     *
     */
    public function testPortalsIdMembersRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdMembersRelFkHead
     *
     * Check the existence of members relation to an item by id..
     *
     */
    public function testPortalsIdMembersRelFkHead()
    {

    }

    /**
     * Test case for portalsIdMembersRelFkPut
     *
     * Add a related item by id for members..
     *
     */
    public function testPortalsIdMembersRelFkPut()
    {

    }

    /**
     * Test case for portalsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalsIdPatch()
    {

    }

    /**
     * Test case for portalsIdPermissionDelete
     *
     * Deletes permission of this model..
     *
     */
    public function testPortalsIdPermissionDelete()
    {

    }

    /**
     * Test case for portalsIdPermissionGet
     *
     * Fetches hasOne relation permission..
     *
     */
    public function testPortalsIdPermissionGet()
    {

    }

    /**
     * Test case for portalsIdPermissionPost
     *
     * Creates a new instance in permission of this model..
     *
     */
    public function testPortalsIdPermissionPost()
    {

    }

    /**
     * Test case for portalsIdPermissionPut
     *
     * Update permission of this model..
     *
     */
    public function testPortalsIdPermissionPut()
    {

    }

    /**
     * Test case for portalsIdPortalMembersCountGet
     *
     * Counts portalMembers of Portal..
     *
     */
    public function testPortalsIdPortalMembersCountGet()
    {

    }

    /**
     * Test case for portalsIdPortalMembersDelete
     *
     * Deletes all portalMembers of this model..
     *
     */
    public function testPortalsIdPortalMembersDelete()
    {

    }

    /**
     * Test case for portalsIdPortalMembersFkDelete
     *
     * Delete a related item by id for portalMembers..
     *
     */
    public function testPortalsIdPortalMembersFkDelete()
    {

    }

    /**
     * Test case for portalsIdPortalMembersFkGet
     *
     * Find a related item by id for portalMembers..
     *
     */
    public function testPortalsIdPortalMembersFkGet()
    {

    }

    /**
     * Test case for portalsIdPortalMembersFkPut
     *
     * Update a related item by id for portalMembers..
     *
     */
    public function testPortalsIdPortalMembersFkPut()
    {

    }

    /**
     * Test case for portalsIdPortalMembersGet
     *
     * Queries portalMembers of Portal..
     *
     */
    public function testPortalsIdPortalMembersGet()
    {

    }

    /**
     * Test case for portalsIdPortalMembersPost
     *
     * Creates a new instance in portalMembers of this model..
     *
     */
    public function testPortalsIdPortalMembersPost()
    {

    }

    /**
     * Test case for portalsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalsIdPut()
    {

    }

    /**
     * Test case for portalsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalsIdReplacePost()
    {

    }

    /**
     * Test case for portalsIdTeamGet
     *
     * Fetches belongsTo relation team..
     *
     */
    public function testPortalsIdTeamGet()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersCountGet
     *
     * Counts templateFolders of Portal..
     *
     */
    public function testPortalsIdTemplateFoldersCountGet()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersDelete
     *
     * Deletes all templateFolders of this model..
     *
     */
    public function testPortalsIdTemplateFoldersDelete()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersFkDelete
     *
     * Delete a related item by id for templateFolders..
     *
     */
    public function testPortalsIdTemplateFoldersFkDelete()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersFkGet
     *
     * Find a related item by id for templateFolders..
     *
     */
    public function testPortalsIdTemplateFoldersFkGet()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersFkPut
     *
     * Update a related item by id for templateFolders..
     *
     */
    public function testPortalsIdTemplateFoldersFkPut()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersGet
     *
     * Queries templateFolders of Portal..
     *
     */
    public function testPortalsIdTemplateFoldersGet()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersNkTemplatesFkRelDelete
     *
     * Unlink folder with Template and Portal.
     *
     */
    public function testPortalsIdTemplateFoldersNkTemplatesFkRelDelete()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersNkTemplatesFkRelPut
     *
     * Link folder with Template and Portal.
     *
     */
    public function testPortalsIdTemplateFoldersNkTemplatesFkRelPut()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersPost
     *
     * Creates a new instance in templateFolders of this model..
     *
     */
    public function testPortalsIdTemplateFoldersPost()
    {

    }

    /**
     * Test case for portalsIdTemplateFoldersRootTemplatesGet
     *
     * List templates on root folder.
     *
     */
    public function testPortalsIdTemplateFoldersRootTemplatesGet()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsCountGet
     *
     * Counts templateRels of Portal..
     *
     */
    public function testPortalsIdTemplateRelsCountGet()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsDelete
     *
     * Deletes all templateRels of this model..
     *
     */
    public function testPortalsIdTemplateRelsDelete()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsFkDelete
     *
     * Delete a related item by id for templateRels..
     *
     */
    public function testPortalsIdTemplateRelsFkDelete()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsFkGet
     *
     * Find a related item by id for templateRels..
     *
     */
    public function testPortalsIdTemplateRelsFkGet()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsFkPut
     *
     * Update a related item by id for templateRels..
     *
     */
    public function testPortalsIdTemplateRelsFkPut()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsGet
     *
     * Queries templateRels of Portal..
     *
     */
    public function testPortalsIdTemplateRelsGet()
    {

    }

    /**
     * Test case for portalsIdTemplateRelsPost
     *
     * Creates a new instance in templateRels of this model..
     *
     */
    public function testPortalsIdTemplateRelsPost()
    {

    }

    /**
     * Test case for portalsIdTemplatesCountGet
     *
     * Counts templates of Portal..
     *
     */
    public function testPortalsIdTemplatesCountGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesDelete
     *
     * Deletes all templates of this model..
     *
     */
    public function testPortalsIdTemplatesDelete()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkDelete
     *
     * Delete a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesFkDelete()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkDesignsGenerateBulkPost
     *
     * Generate Design from Template.
     *
     */
    public function testPortalsIdTemplatesFkDesignsGenerateBulkPost()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkDesignsGeneratePost
     *
     * Generate Design from Template.
     *
     */
    public function testPortalsIdTemplatesFkDesignsGeneratePost()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkGet
     *
     * Find a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesFkGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesFkPut
     *
     * Update a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesFkPut()
    {

    }

    /**
     * Test case for portalsIdTemplatesGet
     *
     * Queries templates of Portal..
     *
     */
    public function testPortalsIdTemplatesGet()
    {

    }

    /**
     * Test case for portalsIdTemplatesPost
     *
     * Creates a new instance in templates of this model..
     *
     */
    public function testPortalsIdTemplatesPost()
    {

    }

    /**
     * Test case for portalsIdTemplatesRelFkDelete
     *
     * Remove the templates relation to an item by id..
     *
     */
    public function testPortalsIdTemplatesRelFkDelete()
    {

    }

    /**
     * Test case for portalsIdTemplatesRelFkHead
     *
     * Check the existence of templates relation to an item by id..
     *
     */
    public function testPortalsIdTemplatesRelFkHead()
    {

    }

    /**
     * Test case for portalsIdTemplatesRelFkPut
     *
     * Add a related item by id for templates..
     *
     */
    public function testPortalsIdTemplatesRelFkPut()
    {

    }

    /**
     * Test case for portalsPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalsPatch()
    {

    }

    /**
     * Test case for portalsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testPortalsPost()
    {

    }

    /**
     * Test case for portalsPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalsPut()
    {

    }

    /**
     * Test case for portalsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalsReplaceOrCreatePost()
    {

    }

    /**
     * Test case for portalsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testPortalsUpdatePost()
    {

    }

    /**
     * Test case for portalsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testPortalsUpsertWithWherePost()
    {

    }

}
