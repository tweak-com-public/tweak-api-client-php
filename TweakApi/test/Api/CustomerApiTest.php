<?php
/**
 * CustomerApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * CustomerApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for customersChangePasswordPost
     *
     * Change a user's password..
     *
     */
    public function testCustomersChangePasswordPost()
    {

    }

    /**
     * Test case for customersChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testCustomersChangeStreamGet()
    {

    }

    /**
     * Test case for customersChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testCustomersChangeStreamPost()
    {

    }

    /**
     * Test case for customersConfirmGet
     *
     * Confirm a user registration with email verification token..
     *
     */
    public function testCustomersConfirmGet()
    {

    }

    /**
     * Test case for customersCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testCustomersCountGet()
    {

    }

    /**
     * Test case for customersFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testCustomersFindOneGet()
    {

    }

    /**
     * Test case for customersGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testCustomersGet()
    {

    }

    /**
     * Test case for customersIdAccessTokensCountGet
     *
     * Counts accessTokens of Customer..
     *
     */
    public function testCustomersIdAccessTokensCountGet()
    {

    }

    /**
     * Test case for customersIdAccessTokensDelete
     *
     * Deletes all accessTokens of this model..
     *
     */
    public function testCustomersIdAccessTokensDelete()
    {

    }

    /**
     * Test case for customersIdAccessTokensFkDelete
     *
     * Delete a related item by id for accessTokens..
     *
     */
    public function testCustomersIdAccessTokensFkDelete()
    {

    }

    /**
     * Test case for customersIdAccessTokensFkGet
     *
     * Find a related item by id for accessTokens..
     *
     */
    public function testCustomersIdAccessTokensFkGet()
    {

    }

    /**
     * Test case for customersIdAccessTokensFkPut
     *
     * Update a related item by id for accessTokens..
     *
     */
    public function testCustomersIdAccessTokensFkPut()
    {

    }

    /**
     * Test case for customersIdAccessTokensGet
     *
     * Queries accessTokens of Customer..
     *
     */
    public function testCustomersIdAccessTokensGet()
    {

    }

    /**
     * Test case for customersIdAccessTokensPost
     *
     * Creates a new instance in accessTokens of this model..
     *
     */
    public function testCustomersIdAccessTokensPost()
    {

    }

    /**
     * Test case for customersIdActiveGet
     *
     * Define whether customer is active or not.
     *
     */
    public function testCustomersIdActiveGet()
    {

    }

    /**
     * Test case for customersIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testCustomersIdDelete()
    {

    }

    /**
     * Test case for customersIdDesignsCountGet
     *
     * Counts designs of Customer..
     *
     */
    public function testCustomersIdDesignsCountGet()
    {

    }

    /**
     * Test case for customersIdDesignsDelete
     *
     * Deletes all designs of this model..
     *
     */
    public function testCustomersIdDesignsDelete()
    {

    }

    /**
     * Test case for customersIdDesignsFkDelete
     *
     * Delete a related item by id for designs..
     *
     */
    public function testCustomersIdDesignsFkDelete()
    {

    }

    /**
     * Test case for customersIdDesignsFkGet
     *
     * Find a related item by id for designs..
     *
     */
    public function testCustomersIdDesignsFkGet()
    {

    }

    /**
     * Test case for customersIdDesignsFkPut
     *
     * Update a related item by id for designs..
     *
     */
    public function testCustomersIdDesignsFkPut()
    {

    }

    /**
     * Test case for customersIdDesignsGet
     *
     * Queries designs of Customer..
     *
     */
    public function testCustomersIdDesignsGet()
    {

    }

    /**
     * Test case for customersIdDesignsPost
     *
     * Creates a new instance in designs of this model..
     *
     */
    public function testCustomersIdDesignsPost()
    {

    }

    /**
     * Test case for customersIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testCustomersIdExistsGet()
    {

    }

    /**
     * Test case for customersIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testCustomersIdGet()
    {

    }

    /**
     * Test case for customersIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testCustomersIdHead()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsCountGet
     *
     * Counts invitationTickets of Customer..
     *
     */
    public function testCustomersIdInvitationTicketsCountGet()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsDelete
     *
     * Deletes all invitationTickets of this model..
     *
     */
    public function testCustomersIdInvitationTicketsDelete()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsFkDelete
     *
     * Delete a related item by id for invitationTickets..
     *
     */
    public function testCustomersIdInvitationTicketsFkDelete()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsFkGet
     *
     * Find a related item by id for invitationTickets..
     *
     */
    public function testCustomersIdInvitationTicketsFkGet()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsFkPut
     *
     * Update a related item by id for invitationTickets..
     *
     */
    public function testCustomersIdInvitationTicketsFkPut()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsGet
     *
     * Queries invitationTickets of Customer..
     *
     */
    public function testCustomersIdInvitationTicketsGet()
    {

    }

    /**
     * Test case for customersIdInvitationTicketsPost
     *
     * Creates a new instance in invitationTickets of this model..
     *
     */
    public function testCustomersIdInvitationTicketsPost()
    {

    }

    /**
     * Test case for customersIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testCustomersIdPatch()
    {

    }

    /**
     * Test case for customersIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testCustomersIdPut()
    {

    }

    /**
     * Test case for customersIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testCustomersIdReplacePost()
    {

    }

    /**
     * Test case for customersIdTeamsCountGet
     *
     * Counts teams of Customer..
     *
     */
    public function testCustomersIdTeamsCountGet()
    {

    }

    /**
     * Test case for customersIdTeamsDelete
     *
     * Deletes all teams of this model..
     *
     */
    public function testCustomersIdTeamsDelete()
    {

    }

    /**
     * Test case for customersIdTeamsFkChangePost
     *
     * Change from a Team to another.
     *
     */
    public function testCustomersIdTeamsFkChangePost()
    {

    }

    /**
     * Test case for customersIdTeamsFkDelete
     *
     * Delete a related item by id for teams..
     *
     */
    public function testCustomersIdTeamsFkDelete()
    {

    }

    /**
     * Test case for customersIdTeamsFkGet
     *
     * Find a related item by id for teams..
     *
     */
    public function testCustomersIdTeamsFkGet()
    {

    }

    /**
     * Test case for customersIdTeamsFkPut
     *
     * Update a related item by id for teams..
     *
     */
    public function testCustomersIdTeamsFkPut()
    {

    }

    /**
     * Test case for customersIdTeamsGet
     *
     * Queries teams of Customer..
     *
     */
    public function testCustomersIdTeamsGet()
    {

    }

    /**
     * Test case for customersIdTeamsPost
     *
     * Creates a new instance in teams of this model..
     *
     */
    public function testCustomersIdTeamsPost()
    {

    }

    /**
     * Test case for customersIdTeamsRelFkDelete
     *
     * Remove the teams relation to an item by id..
     *
     */
    public function testCustomersIdTeamsRelFkDelete()
    {

    }

    /**
     * Test case for customersIdTeamsRelFkHead
     *
     * Check the existence of teams relation to an item by id..
     *
     */
    public function testCustomersIdTeamsRelFkHead()
    {

    }

    /**
     * Test case for customersIdTeamsRelFkPut
     *
     * Add a related item by id for teams..
     *
     */
    public function testCustomersIdTeamsRelFkPut()
    {

    }

    /**
     * Test case for customersInvitationTicketsAcceptPost
     *
     * Accept invitation with token.
     *
     */
    public function testCustomersInvitationTicketsAcceptPost()
    {

    }

    /**
     * Test case for customersLoginPost
     *
     * Login a user with username/email and password..
     *
     */
    public function testCustomersLoginPost()
    {

    }

    /**
     * Test case for customersLogoutPost
     *
     * Logout a user with access token..
     *
     */
    public function testCustomersLogoutPost()
    {

    }

    /**
     * Test case for customersPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testCustomersPatch()
    {

    }

    /**
     * Test case for customersPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testCustomersPost()
    {

    }

    /**
     * Test case for customersPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testCustomersPut()
    {

    }

    /**
     * Test case for customersRegisterPost
     *
     * Create customer and assign it to a team.
     *
     */
    public function testCustomersRegisterPost()
    {

    }

    /**
     * Test case for customersReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testCustomersReplaceOrCreatePost()
    {

    }

    /**
     * Test case for customersResetPost
     *
     * Reset password for a user with email..
     *
     */
    public function testCustomersResetPost()
    {

    }

    /**
     * Test case for customersUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testCustomersUpdatePost()
    {

    }

    /**
     * Test case for customersUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testCustomersUpsertWithWherePost()
    {

    }

}
