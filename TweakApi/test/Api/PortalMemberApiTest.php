<?php
/**
 * PortalMemberApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * PortalMemberApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortalMemberApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for portalMembersChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testPortalMembersChangeStreamGet()
    {

    }

    /**
     * Test case for portalMembersChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testPortalMembersChangeStreamPost()
    {

    }

    /**
     * Test case for portalMembersCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testPortalMembersCountGet()
    {

    }

    /**
     * Test case for portalMembersFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testPortalMembersFindOneGet()
    {

    }

    /**
     * Test case for portalMembersGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testPortalMembersGet()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsCountGet
     *
     * Counts assignedDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdAssignedDesignsCountGet()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsDelete
     *
     * Deletes all assignedDesigns of this model..
     *
     */
    public function testPortalMembersIdAssignedDesignsDelete()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsFkDelete
     *
     * Delete a related item by id for assignedDesigns..
     *
     */
    public function testPortalMembersIdAssignedDesignsFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsFkGet
     *
     * Find a related item by id for assignedDesigns..
     *
     */
    public function testPortalMembersIdAssignedDesignsFkGet()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsFkPut
     *
     * Update a related item by id for assignedDesigns..
     *
     */
    public function testPortalMembersIdAssignedDesignsFkPut()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsGet
     *
     * Queries assignedDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdAssignedDesignsGet()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsPost
     *
     * Creates a new instance in assignedDesigns of this model..
     *
     */
    public function testPortalMembersIdAssignedDesignsPost()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsRelFkDelete
     *
     * Remove the assignedDesigns relation to an item by id..
     *
     */
    public function testPortalMembersIdAssignedDesignsRelFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsRelFkHead
     *
     * Check the existence of assignedDesigns relation to an item by id..
     *
     */
    public function testPortalMembersIdAssignedDesignsRelFkHead()
    {

    }

    /**
     * Test case for portalMembersIdAssignedDesignsRelFkPut
     *
     * Add a related item by id for assignedDesigns..
     *
     */
    public function testPortalMembersIdAssignedDesignsRelFkPut()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsCountGet
     *
     * Counts commentedDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdCommentedDesignsCountGet()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsDelete
     *
     * Deletes all commentedDesigns of this model..
     *
     */
    public function testPortalMembersIdCommentedDesignsDelete()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsFkDelete
     *
     * Delete a related item by id for commentedDesigns..
     *
     */
    public function testPortalMembersIdCommentedDesignsFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsFkGet
     *
     * Find a related item by id for commentedDesigns..
     *
     */
    public function testPortalMembersIdCommentedDesignsFkGet()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsFkPut
     *
     * Update a related item by id for commentedDesigns..
     *
     */
    public function testPortalMembersIdCommentedDesignsFkPut()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsGet
     *
     * Queries commentedDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdCommentedDesignsGet()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsPost
     *
     * Creates a new instance in commentedDesigns of this model..
     *
     */
    public function testPortalMembersIdCommentedDesignsPost()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsRelFkDelete
     *
     * Remove the commentedDesigns relation to an item by id..
     *
     */
    public function testPortalMembersIdCommentedDesignsRelFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsRelFkHead
     *
     * Check the existence of commentedDesigns relation to an item by id..
     *
     */
    public function testPortalMembersIdCommentedDesignsRelFkHead()
    {

    }

    /**
     * Test case for portalMembersIdCommentedDesignsRelFkPut
     *
     * Add a related item by id for commentedDesigns..
     *
     */
    public function testPortalMembersIdCommentedDesignsRelFkPut()
    {

    }

    /**
     * Test case for portalMembersIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testPortalMembersIdDelete()
    {

    }

    /**
     * Test case for portalMembersIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalMembersIdExistsGet()
    {

    }

    /**
     * Test case for portalMembersIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testPortalMembersIdGet()
    {

    }

    /**
     * Test case for portalMembersIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testPortalMembersIdHead()
    {

    }

    /**
     * Test case for portalMembersIdMemberGet
     *
     * Fetches belongsTo relation member..
     *
     */
    public function testPortalMembersIdMemberGet()
    {

    }

    /**
     * Test case for portalMembersIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalMembersIdPatch()
    {

    }

    /**
     * Test case for portalMembersIdPortalGet
     *
     * Fetches belongsTo relation portal..
     *
     */
    public function testPortalMembersIdPortalGet()
    {

    }

    /**
     * Test case for portalMembersIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalMembersIdPut()
    {

    }

    /**
     * Test case for portalMembersIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testPortalMembersIdReplacePost()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsCountGet
     *
     * Counts requesterDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdRequesterDesignsCountGet()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsDelete
     *
     * Deletes all requesterDesigns of this model..
     *
     */
    public function testPortalMembersIdRequesterDesignsDelete()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsFkDelete
     *
     * Delete a related item by id for requesterDesigns..
     *
     */
    public function testPortalMembersIdRequesterDesignsFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsFkGet
     *
     * Find a related item by id for requesterDesigns..
     *
     */
    public function testPortalMembersIdRequesterDesignsFkGet()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsFkPut
     *
     * Update a related item by id for requesterDesigns..
     *
     */
    public function testPortalMembersIdRequesterDesignsFkPut()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsGet
     *
     * Queries requesterDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdRequesterDesignsGet()
    {

    }

    /**
     * Test case for portalMembersIdRequesterDesignsPost
     *
     * Creates a new instance in requesterDesigns of this model..
     *
     */
    public function testPortalMembersIdRequesterDesignsPost()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsCountGet
     *
     * Counts reviewedDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdReviewedDesignsCountGet()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsDelete
     *
     * Deletes all reviewedDesigns of this model..
     *
     */
    public function testPortalMembersIdReviewedDesignsDelete()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsFkDelete
     *
     * Delete a related item by id for reviewedDesigns..
     *
     */
    public function testPortalMembersIdReviewedDesignsFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsFkGet
     *
     * Find a related item by id for reviewedDesigns..
     *
     */
    public function testPortalMembersIdReviewedDesignsFkGet()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsFkPut
     *
     * Update a related item by id for reviewedDesigns..
     *
     */
    public function testPortalMembersIdReviewedDesignsFkPut()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsGet
     *
     * Queries reviewedDesigns of PortalMember..
     *
     */
    public function testPortalMembersIdReviewedDesignsGet()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsPost
     *
     * Creates a new instance in reviewedDesigns of this model..
     *
     */
    public function testPortalMembersIdReviewedDesignsPost()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsRelFkDelete
     *
     * Remove the reviewedDesigns relation to an item by id..
     *
     */
    public function testPortalMembersIdReviewedDesignsRelFkDelete()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsRelFkHead
     *
     * Check the existence of reviewedDesigns relation to an item by id..
     *
     */
    public function testPortalMembersIdReviewedDesignsRelFkHead()
    {

    }

    /**
     * Test case for portalMembersIdReviewedDesignsRelFkPut
     *
     * Add a related item by id for reviewedDesigns..
     *
     */
    public function testPortalMembersIdReviewedDesignsRelFkPut()
    {

    }

    /**
     * Test case for portalMembersPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalMembersPatch()
    {

    }

    /**
     * Test case for portalMembersPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testPortalMembersPost()
    {

    }

    /**
     * Test case for portalMembersPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalMembersPut()
    {

    }

    /**
     * Test case for portalMembersReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testPortalMembersReplaceOrCreatePost()
    {

    }

    /**
     * Test case for portalMembersUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testPortalMembersUpdatePost()
    {

    }

    /**
     * Test case for portalMembersUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testPortalMembersUpsertWithWherePost()
    {

    }

}
