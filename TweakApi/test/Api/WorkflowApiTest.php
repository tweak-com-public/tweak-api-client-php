<?php
/**
 * WorkflowApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * WorkflowApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkflowApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for workflowsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testWorkflowsChangeStreamGet()
    {

    }

    /**
     * Test case for workflowsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testWorkflowsChangeStreamPost()
    {

    }

    /**
     * Test case for workflowsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testWorkflowsCountGet()
    {

    }

    /**
     * Test case for workflowsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testWorkflowsFindOneGet()
    {

    }

    /**
     * Test case for workflowsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testWorkflowsGet()
    {

    }

    /**
     * Test case for workflowsIdCreatorGet
     *
     * Fetches belongsTo relation creator..
     *
     */
    public function testWorkflowsIdCreatorGet()
    {

    }

    /**
     * Test case for workflowsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testWorkflowsIdDelete()
    {

    }

    /**
     * Test case for workflowsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testWorkflowsIdExistsGet()
    {

    }

    /**
     * Test case for workflowsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testWorkflowsIdGet()
    {

    }

    /**
     * Test case for workflowsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testWorkflowsIdHead()
    {

    }

    /**
     * Test case for workflowsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testWorkflowsIdPatch()
    {

    }

    /**
     * Test case for workflowsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testWorkflowsIdPut()
    {

    }

    /**
     * Test case for workflowsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testWorkflowsIdReplacePost()
    {

    }

    /**
     * Test case for workflowsIdTeamGet
     *
     * Fetches belongsTo relation team..
     *
     */
    public function testWorkflowsIdTeamGet()
    {

    }

    /**
     * Test case for workflowsIdTemplatesCountGet
     *
     * Counts templates of Workflow..
     *
     */
    public function testWorkflowsIdTemplatesCountGet()
    {

    }

    /**
     * Test case for workflowsIdTemplatesDelete
     *
     * Deletes all templates of this model..
     *
     */
    public function testWorkflowsIdTemplatesDelete()
    {

    }

    /**
     * Test case for workflowsIdTemplatesFkDelete
     *
     * Delete a related item by id for templates..
     *
     */
    public function testWorkflowsIdTemplatesFkDelete()
    {

    }

    /**
     * Test case for workflowsIdTemplatesFkGet
     *
     * Find a related item by id for templates..
     *
     */
    public function testWorkflowsIdTemplatesFkGet()
    {

    }

    /**
     * Test case for workflowsIdTemplatesFkPut
     *
     * Update a related item by id for templates..
     *
     */
    public function testWorkflowsIdTemplatesFkPut()
    {

    }

    /**
     * Test case for workflowsIdTemplatesGet
     *
     * Queries templates of Workflow..
     *
     */
    public function testWorkflowsIdTemplatesGet()
    {

    }

    /**
     * Test case for workflowsIdTemplatesPost
     *
     * Creates a new instance in templates of this model..
     *
     */
    public function testWorkflowsIdTemplatesPost()
    {

    }

    /**
     * Test case for workflowsPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testWorkflowsPatch()
    {

    }

    /**
     * Test case for workflowsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testWorkflowsPost()
    {

    }

    /**
     * Test case for workflowsPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testWorkflowsPut()
    {

    }

    /**
     * Test case for workflowsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testWorkflowsReplaceOrCreatePost()
    {

    }

    /**
     * Test case for workflowsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testWorkflowsUpdatePost()
    {

    }

    /**
     * Test case for workflowsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testWorkflowsUpsertWithWherePost()
    {

    }

}
