<?php
/**
 * TeamApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * TeamApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for teamsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testTeamsChangeStreamGet()
    {

    }

    /**
     * Test case for teamsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testTeamsChangeStreamPost()
    {

    }

    /**
     * Test case for teamsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testTeamsCountGet()
    {

    }

    /**
     * Test case for teamsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testTeamsFindOneGet()
    {

    }

    /**
     * Test case for teamsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testTeamsGet()
    {

    }

    /**
     * Test case for teamsIdBrandDelete
     *
     * Deletes brand of this model..
     *
     */
    public function testTeamsIdBrandDelete()
    {

    }

    /**
     * Test case for teamsIdBrandGet
     *
     * Fetches hasOne relation brand..
     *
     */
    public function testTeamsIdBrandGet()
    {

    }

    /**
     * Test case for teamsIdBrandPost
     *
     * Creates a new instance in brand of this model..
     *
     */
    public function testTeamsIdBrandPost()
    {

    }

    /**
     * Test case for teamsIdBrandPut
     *
     * Update brand of this model..
     *
     */
    public function testTeamsIdBrandPut()
    {

    }

    /**
     * Test case for teamsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testTeamsIdDelete()
    {

    }

    /**
     * Test case for teamsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTeamsIdExistsGet()
    {

    }

    /**
     * Test case for teamsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testTeamsIdGet()
    {

    }

    /**
     * Test case for teamsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTeamsIdHead()
    {

    }

    /**
     * Test case for teamsIdMembersCountGet
     *
     * Counts members of Team..
     *
     */
    public function testTeamsIdMembersCountGet()
    {

    }

    /**
     * Test case for teamsIdMembersDelete
     *
     * Deletes all members of this model..
     *
     */
    public function testTeamsIdMembersDelete()
    {

    }

    /**
     * Test case for teamsIdMembersFkDelete
     *
     * Delete a related item by id for members..
     *
     */
    public function testTeamsIdMembersFkDelete()
    {

    }

    /**
     * Test case for teamsIdMembersFkGet
     *
     * Find a related item by id for members..
     *
     */
    public function testTeamsIdMembersFkGet()
    {

    }

    /**
     * Test case for teamsIdMembersFkPut
     *
     * Update a related item by id for members..
     *
     */
    public function testTeamsIdMembersFkPut()
    {

    }

    /**
     * Test case for teamsIdMembersGet
     *
     * Queries members of Team..
     *
     */
    public function testTeamsIdMembersGet()
    {

    }

    /**
     * Test case for teamsIdMembersPost
     *
     * Creates a new instance in members of this model..
     *
     */
    public function testTeamsIdMembersPost()
    {

    }

    /**
     * Test case for teamsIdMembersRelFkDelete
     *
     * Remove the members relation to an item by id..
     *
     */
    public function testTeamsIdMembersRelFkDelete()
    {

    }

    /**
     * Test case for teamsIdMembersRelFkHead
     *
     * Check the existence of members relation to an item by id..
     *
     */
    public function testTeamsIdMembersRelFkHead()
    {

    }

    /**
     * Test case for teamsIdMembersRelFkPut
     *
     * Add a related item by id for members..
     *
     */
    public function testTeamsIdMembersRelFkPut()
    {

    }

    /**
     * Test case for teamsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testTeamsIdPatch()
    {

    }

    /**
     * Test case for teamsIdPortalsCountGet
     *
     * Counts portals of Team..
     *
     */
    public function testTeamsIdPortalsCountGet()
    {

    }

    /**
     * Test case for teamsIdPortalsDelete
     *
     * Deletes all portals of this model..
     *
     */
    public function testTeamsIdPortalsDelete()
    {

    }

    /**
     * Test case for teamsIdPortalsFkDelete
     *
     * Delete a related item by id for portals..
     *
     */
    public function testTeamsIdPortalsFkDelete()
    {

    }

    /**
     * Test case for teamsIdPortalsFkGet
     *
     * Find a related item by id for portals..
     *
     */
    public function testTeamsIdPortalsFkGet()
    {

    }

    /**
     * Test case for teamsIdPortalsFkPut
     *
     * Update a related item by id for portals..
     *
     */
    public function testTeamsIdPortalsFkPut()
    {

    }

    /**
     * Test case for teamsIdPortalsGet
     *
     * Queries portals of Team..
     *
     */
    public function testTeamsIdPortalsGet()
    {

    }

    /**
     * Test case for teamsIdPortalsPost
     *
     * Creates a new instance in portals of this model..
     *
     */
    public function testTeamsIdPortalsPost()
    {

    }

    /**
     * Test case for teamsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTeamsIdPut()
    {

    }

    /**
     * Test case for teamsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTeamsIdReplacePost()
    {

    }

    /**
     * Test case for teamsIdTemplatesCountGet
     *
     * Counts templates of Team..
     *
     */
    public function testTeamsIdTemplatesCountGet()
    {

    }

    /**
     * Test case for teamsIdTemplatesDelete
     *
     * Deletes all templates of this model..
     *
     */
    public function testTeamsIdTemplatesDelete()
    {

    }

    /**
     * Test case for teamsIdTemplatesFkDelete
     *
     * Delete a related item by id for templates..
     *
     */
    public function testTeamsIdTemplatesFkDelete()
    {

    }

    /**
     * Test case for teamsIdTemplatesFkGet
     *
     * Find a related item by id for templates..
     *
     */
    public function testTeamsIdTemplatesFkGet()
    {

    }

    /**
     * Test case for teamsIdTemplatesFkPut
     *
     * Update a related item by id for templates..
     *
     */
    public function testTeamsIdTemplatesFkPut()
    {

    }

    /**
     * Test case for teamsIdTemplatesGet
     *
     * Queries templates of Team..
     *
     */
    public function testTeamsIdTemplatesGet()
    {

    }

    /**
     * Test case for teamsIdTemplatesPost
     *
     * Creates a new instance in templates of this model..
     *
     */
    public function testTeamsIdTemplatesPost()
    {

    }

    /**
     * Test case for teamsPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testTeamsPatch()
    {

    }

    /**
     * Test case for teamsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testTeamsPost()
    {

    }

    /**
     * Test case for teamsPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTeamsPut()
    {

    }

    /**
     * Test case for teamsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTeamsReplaceOrCreatePost()
    {

    }

    /**
     * Test case for teamsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testTeamsUpdatePost()
    {

    }

    /**
     * Test case for teamsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testTeamsUpsertWithWherePost()
    {

    }

}
