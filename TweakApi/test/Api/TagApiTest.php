<?php
/**
 * TagApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-alpha.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Tweak\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * TagApiTest Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TagApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for tagsChangeStreamGet
     *
     * Create a change stream..
     *
     */
    public function testTagsChangeStreamGet()
    {

    }

    /**
     * Test case for tagsChangeStreamPost
     *
     * Create a change stream..
     *
     */
    public function testTagsChangeStreamPost()
    {

    }

    /**
     * Test case for tagsCountGet
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testTagsCountGet()
    {

    }

    /**
     * Test case for tagsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testTagsFindOneGet()
    {

    }

    /**
     * Test case for tagsGet
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testTagsGet()
    {

    }

    /**
     * Test case for tagsIdDelete
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testTagsIdDelete()
    {

    }

    /**
     * Test case for tagsIdDesignsCountGet
     *
     * Counts designs of Tag..
     *
     */
    public function testTagsIdDesignsCountGet()
    {

    }

    /**
     * Test case for tagsIdDesignsDelete
     *
     * Deletes all designs of this model..
     *
     */
    public function testTagsIdDesignsDelete()
    {

    }

    /**
     * Test case for tagsIdDesignsFkDelete
     *
     * Delete a related item by id for designs..
     *
     */
    public function testTagsIdDesignsFkDelete()
    {

    }

    /**
     * Test case for tagsIdDesignsFkGet
     *
     * Find a related item by id for designs..
     *
     */
    public function testTagsIdDesignsFkGet()
    {

    }

    /**
     * Test case for tagsIdDesignsFkPut
     *
     * Update a related item by id for designs..
     *
     */
    public function testTagsIdDesignsFkPut()
    {

    }

    /**
     * Test case for tagsIdDesignsGet
     *
     * Queries designs of Tag..
     *
     */
    public function testTagsIdDesignsGet()
    {

    }

    /**
     * Test case for tagsIdDesignsPost
     *
     * Creates a new instance in designs of this model..
     *
     */
    public function testTagsIdDesignsPost()
    {

    }

    /**
     * Test case for tagsIdDesignsRelFkDelete
     *
     * Remove the designs relation to an item by id..
     *
     */
    public function testTagsIdDesignsRelFkDelete()
    {

    }

    /**
     * Test case for tagsIdDesignsRelFkHead
     *
     * Check the existence of designs relation to an item by id..
     *
     */
    public function testTagsIdDesignsRelFkHead()
    {

    }

    /**
     * Test case for tagsIdDesignsRelFkPut
     *
     * Add a related item by id for designs..
     *
     */
    public function testTagsIdDesignsRelFkPut()
    {

    }

    /**
     * Test case for tagsIdExistsGet
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTagsIdExistsGet()
    {

    }

    /**
     * Test case for tagsIdGet
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testTagsIdGet()
    {

    }

    /**
     * Test case for tagsIdHead
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTagsIdHead()
    {

    }

    /**
     * Test case for tagsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testTagsIdPatch()
    {

    }

    /**
     * Test case for tagsIdProductsCountGet
     *
     * Counts products of Tag..
     *
     */
    public function testTagsIdProductsCountGet()
    {

    }

    /**
     * Test case for tagsIdProductsDelete
     *
     * Deletes all products of this model..
     *
     */
    public function testTagsIdProductsDelete()
    {

    }

    /**
     * Test case for tagsIdProductsFkDelete
     *
     * Delete a related item by id for products..
     *
     */
    public function testTagsIdProductsFkDelete()
    {

    }

    /**
     * Test case for tagsIdProductsFkGet
     *
     * Find a related item by id for products..
     *
     */
    public function testTagsIdProductsFkGet()
    {

    }

    /**
     * Test case for tagsIdProductsFkPut
     *
     * Update a related item by id for products..
     *
     */
    public function testTagsIdProductsFkPut()
    {

    }

    /**
     * Test case for tagsIdProductsGet
     *
     * Queries products of Tag..
     *
     */
    public function testTagsIdProductsGet()
    {

    }

    /**
     * Test case for tagsIdProductsPost
     *
     * Creates a new instance in products of this model..
     *
     */
    public function testTagsIdProductsPost()
    {

    }

    /**
     * Test case for tagsIdProductsRelFkDelete
     *
     * Remove the products relation to an item by id..
     *
     */
    public function testTagsIdProductsRelFkDelete()
    {

    }

    /**
     * Test case for tagsIdProductsRelFkHead
     *
     * Check the existence of products relation to an item by id..
     *
     */
    public function testTagsIdProductsRelFkHead()
    {

    }

    /**
     * Test case for tagsIdProductsRelFkPut
     *
     * Add a related item by id for products..
     *
     */
    public function testTagsIdProductsRelFkPut()
    {

    }

    /**
     * Test case for tagsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTagsIdPut()
    {

    }

    /**
     * Test case for tagsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTagsIdReplacePost()
    {

    }

    /**
     * Test case for tagsIdTemplatesCountGet
     *
     * Counts templates of Tag..
     *
     */
    public function testTagsIdTemplatesCountGet()
    {

    }

    /**
     * Test case for tagsIdTemplatesDelete
     *
     * Deletes all templates of this model..
     *
     */
    public function testTagsIdTemplatesDelete()
    {

    }

    /**
     * Test case for tagsIdTemplatesFkDelete
     *
     * Delete a related item by id for templates..
     *
     */
    public function testTagsIdTemplatesFkDelete()
    {

    }

    /**
     * Test case for tagsIdTemplatesFkGet
     *
     * Find a related item by id for templates..
     *
     */
    public function testTagsIdTemplatesFkGet()
    {

    }

    /**
     * Test case for tagsIdTemplatesFkPut
     *
     * Update a related item by id for templates..
     *
     */
    public function testTagsIdTemplatesFkPut()
    {

    }

    /**
     * Test case for tagsIdTemplatesGet
     *
     * Queries templates of Tag..
     *
     */
    public function testTagsIdTemplatesGet()
    {

    }

    /**
     * Test case for tagsIdTemplatesPost
     *
     * Creates a new instance in templates of this model..
     *
     */
    public function testTagsIdTemplatesPost()
    {

    }

    /**
     * Test case for tagsIdTemplatesRelFkDelete
     *
     * Remove the templates relation to an item by id..
     *
     */
    public function testTagsIdTemplatesRelFkDelete()
    {

    }

    /**
     * Test case for tagsIdTemplatesRelFkHead
     *
     * Check the existence of templates relation to an item by id..
     *
     */
    public function testTagsIdTemplatesRelFkHead()
    {

    }

    /**
     * Test case for tagsIdTemplatesRelFkPut
     *
     * Add a related item by id for templates..
     *
     */
    public function testTagsIdTemplatesRelFkPut()
    {

    }

    /**
     * Test case for tagsPatch
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testTagsPatch()
    {

    }

    /**
     * Test case for tagsPost
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testTagsPost()
    {

    }

    /**
     * Test case for tagsPut
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTagsPut()
    {

    }

    /**
     * Test case for tagsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTagsReplaceOrCreatePost()
    {

    }

    /**
     * Test case for tagsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testTagsUpdatePost()
    {

    }

    /**
     * Test case for tagsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testTagsUpsertWithWherePost()
    {

    }

}
