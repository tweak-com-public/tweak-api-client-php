<?php
/**
 * DesignApi
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 0.0.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * DesignApi Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DesignApi
{

    /**
     * API Client
     *
     * @var \Tweak\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Tweak\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Tweak\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apistagecdn.tweak.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Tweak\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Tweak\Api\ApiClient $apiClient set the API client
     *
     * @return DesignApi
     */
    public function setApiClient(\Tweak\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation designsChangeStreamGet
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsChangeStreamGet($options = null)
    {
        list($response) = $this->designsChangeStreamGetWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation designsChangeStreamGetWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsChangeStreamGetWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Designs/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Designs/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsChangeStreamPost
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsChangeStreamPost($options = null)
    {
        list($response) = $this->designsChangeStreamPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation designsChangeStreamPostWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsChangeStreamPostWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Designs/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Designs/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsCountGet
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsCountGet($where = null)
    {
        list($response) = $this->designsCountGetWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation designsCountGetWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsCountGetWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/Designs/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Designs/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsFindOneGet($filter = null)
    {
        list($response) = $this->designsFindOneGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation designsFindOneGetWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsFindOneGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Designs/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsGet
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsGet($filter = null)
    {
        list($response) = $this->designsGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation designsGetWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/Designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdApprovePost
     *
     * Approve design
     *
     * @param string $id Design id (required)
     * @param string $id2 Customer id (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdApprovePost($id, $id2)
    {
        list($response) = $this->designsIdApprovePostWithHttpInfo($id, $id2);
        return $response;
    }

    /**
     * Operation designsIdApprovePostWithHttpInfo
     *
     * Approve design
     *
     * @param string $id Design id (required)
     * @param string $id2 Customer id (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdApprovePostWithHttpInfo($id, $id2)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdApprovePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling designsIdApprovePost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/approve";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}/approve'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdAssigneeGet
     *
     * Fetches belongsTo relation assignee.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdAssigneeGet($id, $refresh = null)
    {
        list($response) = $this->designsIdAssigneeGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdAssigneeGetWithHttpInfo
     *
     * Fetches belongsTo relation assignee.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdAssigneeGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdAssigneeGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/assignee";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/assignee'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersCountGet
     *
     * Counts commenters of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersCountGet($id, $where = null)
    {
        list($response) = $this->designsIdCommentersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation designsIdCommentersCountGetWithHttpInfo
     *
     * Counts commenters of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersCountGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Designs/{id}/commenters/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersDelete
     *
     * Deletes all commenters of this model.
     *
     * @param string $id Design id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersDelete($id)
    {
        list($response) = $this->designsIdCommentersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdCommentersDeleteWithHttpInfo
     *
     * Deletes all commenters of this model.
     *
     * @param string $id Design id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/commenters'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersFkDelete
     *
     * Delete a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersFkDelete($id, $fk)
    {
        list($response) = $this->designsIdCommentersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/commenters/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersFkGet
     *
     * Find a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersFkGet($id, $fk)
    {
        list($response) = $this->designsIdCommentersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentersFkGetWithHttpInfo
     *
     * Find a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentersFkGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/commenters/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersFkPut
     *
     * Update a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->designsIdCommentersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentersFkPutWithHttpInfo
     *
     * Update a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentersFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/commenters/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersGet
     *
     * Queries commenters of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersGet($id, $filter = null)
    {
        list($response) = $this->designsIdCommentersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation designsIdCommentersGetWithHttpInfo
     *
     * Queries commenters of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/Designs/{id}/commenters'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersPost
     *
     * Creates a new instance in commenters of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersPost($id, $data = null)
    {
        list($response) = $this->designsIdCommentersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentersPostWithHttpInfo
     *
     * Creates a new instance in commenters of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/commenters'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersRelFkDelete
     *
     * Remove the commenters relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersRelFkDelete($id, $fk)
    {
        list($response) = $this->designsIdCommentersRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentersRelFkDeleteWithHttpInfo
     *
     * Remove the commenters relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/commenters/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersRelFkHead
     *
     * Check the existence of commenters relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersRelFkHead($id, $fk)
    {
        list($response) = $this->designsIdCommentersRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentersRelFkHeadWithHttpInfo
     *
     * Check the existence of commenters relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Designs/{id}/commenters/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentersRelFkPut
     *
     * Add a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->designsIdCommentersRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentersRelFkPutWithHttpInfo
     *
     * Add a related item by id for commenters.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentersRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/commenters/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/commenters/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsCountGet
     *
     * Counts comments of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsCountGet($id, $where = null)
    {
        list($response) = $this->designsIdCommentsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation designsIdCommentsCountGetWithHttpInfo
     *
     * Counts comments of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsCountGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Designs/{id}/comments/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsDelete
     *
     * Deletes all comments of this model.
     *
     * @param string $id Design id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsDelete($id)
    {
        list($response) = $this->designsIdCommentsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdCommentsDeleteWithHttpInfo
     *
     * Deletes all comments of this model.
     *
     * @param string $id Design id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/comments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsFkDelete
     *
     * Delete a related item by id for comments.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for comments (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsFkDelete($id, $fk)
    {
        list($response) = $this->designsIdCommentsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for comments.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for comments (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/comments/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsFkGet
     *
     * Find a related item by id for comments.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for comments (required)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsFkGet($id, $fk)
    {
        list($response) = $this->designsIdCommentsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentsFkGetWithHttpInfo
     *
     * Find a related item by id for comments.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for comments (required)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentsFkGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsFkPut
     *
     * Update a related item by id for comments.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for comments (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->designsIdCommentsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentsFkPutWithHttpInfo
     *
     * Update a related item by id for comments.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for comments (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentsFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsGet
     *
     * Queries comments of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignComment[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsGet($id, $filter = null)
    {
        list($response) = $this->designsIdCommentsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation designsIdCommentsGetWithHttpInfo
     *
     * Queries comments of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignComment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment[]',
                '/Designs/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkCommenterGet
     *
     * Fetches belongsTo relation commenter.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkCommenterGet($id, $nk, $refresh = null)
    {
        list($response) = $this->designsIdCommentsNkCommenterGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkCommenterGetWithHttpInfo
     *
     * Fetches belongsTo relation commenter.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkCommenterGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkCommenterGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkCommenterGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/commenter";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/comments/{nk}/commenter'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkDesignGet
     *
     * Fetches belongsTo relation design.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkDesignGet($id, $nk, $refresh = null)
    {
        list($response) = $this->designsIdCommentsNkDesignGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkDesignGetWithHttpInfo
     *
     * Fetches belongsTo relation design.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkDesignGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkDesignGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkDesignGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/design";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}/comments/{nk}/design'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesCountGet
     *
     * Counts replies of DesignComment.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesCountGet($id, $nk, $where = null)
    {
        list($response) = $this->designsIdCommentsNkRepliesCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesCountGetWithHttpInfo
     *
     * Counts replies of DesignComment.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesCountGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Designs/{id}/comments/{nk}/replies/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesDelete
     *
     * Deletes all replies of this model.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesDelete($id, $nk)
    {
        list($response) = $this->designsIdCommentsNkRepliesDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesDeleteWithHttpInfo
     *
     * Deletes all replies of this model.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/comments/{nk}/replies'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesFkDelete
     *
     * Delete a related item by id for replies.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $fk Foreign key for replies (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesFkDelete($id, $nk, $fk)
    {
        list($response) = $this->designsIdCommentsNkRepliesFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for replies.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $fk Foreign key for replies (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentsNkRepliesFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/comments/{nk}/replies/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesFkGet
     *
     * Find a related item by id for replies.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $fk Foreign key for replies (required)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesFkGet($id, $nk, $fk)
    {
        list($response) = $this->designsIdCommentsNkRepliesFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesFkGetWithHttpInfo
     *
     * Find a related item by id for replies.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $fk Foreign key for replies (required)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentsNkRepliesFkGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments/{nk}/replies/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesFkPut
     *
     * Update a related item by id for replies.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $fk Foreign key for replies (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->designsIdCommentsNkRepliesFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesFkPutWithHttpInfo
     *
     * Update a related item by id for replies.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $fk Foreign key for replies (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdCommentsNkRepliesFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments/{nk}/replies/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesGet
     *
     * Queries replies of DesignComment.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignComment[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesGet($id, $nk, $filter = null)
    {
        list($response) = $this->designsIdCommentsNkRepliesGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesGetWithHttpInfo
     *
     * Queries replies of DesignComment.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignComment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment[]',
                '/Designs/{id}/comments/{nk}/replies'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkRepliesPost
     *
     * Creates a new instance in replies of this model.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesPost($id, $nk, $data = null)
    {
        list($response) = $this->designsIdCommentsNkRepliesPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkRepliesPostWithHttpInfo
     *
     * Creates a new instance in replies of this model.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkRepliesPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkRepliesPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkRepliesPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replies";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments/{nk}/replies'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsNkReplyOfGet
     *
     * Fetches belongsTo relation replyOf.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkReplyOfGet($id, $nk, $refresh = null)
    {
        list($response) = $this->designsIdCommentsNkReplyOfGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation designsIdCommentsNkReplyOfGetWithHttpInfo
     *
     * Fetches belongsTo relation replyOf.
     *
     * @param string $id Design id (required)
     * @param string $nk Foreign key for comments. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsNkReplyOfGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsNkReplyOfGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling designsIdCommentsNkReplyOfGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments/{nk}/replyOf";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments/{nk}/replyOf'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCommentsPost
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsPost($id, $data = null)
    {
        list($response) = $this->designsIdCommentsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdCommentsPostWithHttpInfo
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCommentsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCommentsPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdCustomerGet
     *
     * Fetches belongsTo relation customer.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCustomerGet($id, $refresh = null)
    {
        list($response) = $this->designsIdCustomerGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdCustomerGetWithHttpInfo
     *
     * Fetches belongsTo relation customer.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdCustomerGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdCustomerGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/customer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Designs/{id}/customer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdDelete
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdDelete($id)
    {
        list($response) = $this->designsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdDeleteWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Designs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExistsGet
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExistsGet($id)
    {
        list($response) = $this->designsIdExistsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdExistsGetWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExistsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExistsGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Designs/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsCountGet
     *
     * Counts exports of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsCountGet($id, $where = null)
    {
        list($response) = $this->designsIdExportsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation designsIdExportsCountGetWithHttpInfo
     *
     * Counts exports of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsCountGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Designs/{id}/exports/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsDelete
     *
     * Deletes all exports of this model.
     *
     * @param string $id Design id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsDelete($id)
    {
        list($response) = $this->designsIdExportsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdExportsDeleteWithHttpInfo
     *
     * Deletes all exports of this model.
     *
     * @param string $id Design id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/exports'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsFkDelete
     *
     * Delete a related item by id for exports.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for exports (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsFkDelete($id, $fk)
    {
        list($response) = $this->designsIdExportsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdExportsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for exports.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for exports (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdExportsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/exports/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsFkGet
     *
     * Find a related item by id for exports.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for exports (required)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsFkGet($id, $fk)
    {
        list($response) = $this->designsIdExportsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdExportsFkGetWithHttpInfo
     *
     * Find a related item by id for exports.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for exports (required)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdExportsFkGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/Designs/{id}/exports/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsFkPut
     *
     * Update a related item by id for exports.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for exports (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->designsIdExportsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdExportsFkPutWithHttpInfo
     *
     * Update a related item by id for exports.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for exports (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdExportsFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/Designs/{id}/exports/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsGet
     *
     * Queries exports of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignExport[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsGet($id, $filter = null)
    {
        list($response) = $this->designsIdExportsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation designsIdExportsGetWithHttpInfo
     *
     * Queries exports of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignExport[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport[]',
                '/Designs/{id}/exports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdExportsPost
     *
     * Creates a new instance in exports of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsPost($id, $data = null)
    {
        list($response) = $this->designsIdExportsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdExportsPostWithHttpInfo
     *
     * Creates a new instance in exports of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdExportsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdExportsPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/exports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/Designs/{id}/exports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdFolderGet
     *
     * Fetches belongsTo relation folder.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdFolderGet($id, $refresh = null)
    {
        list($response) = $this->designsIdFolderGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdFolderGetWithHttpInfo
     *
     * Fetches belongsTo relation folder.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdFolderGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdFolderGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/folder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/Designs/{id}/folder'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdGet
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdGet($id, $filter = null)
    {
        list($response) = $this->designsIdGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation designsIdGetWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdHead
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdHead($id)
    {
        list($response) = $this->designsIdHeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdHeadWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdHeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdHead');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Designs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\Design $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdPatch($id, $data = null)
    {
        list($response) = $this->designsIdPatchWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdPatchWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\Design $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdPatchWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdPatch');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdPortalGet
     *
     * Fetches belongsTo relation portal.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdPortalGet($id, $refresh = null)
    {
        list($response) = $this->designsIdPortalGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdPortalGetWithHttpInfo
     *
     * Fetches belongsTo relation portal.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdPortalGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdPortalGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/portal";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Designs/{id}/portal'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdPut($id, $data = null)
    {
        list($response) = $this->designsIdPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdPutWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdRejectPost
     *
     * Reject design
     *
     * @param string $id Design id (required)
     * @param string $id2 Customer id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdRejectPost($id, $id2, $data = null)
    {
        list($response) = $this->designsIdRejectPostWithHttpInfo($id, $id2, $data);
        return $response;
    }

    /**
     * Operation designsIdRejectPostWithHttpInfo
     *
     * Reject design
     *
     * @param string $id Design id (required)
     * @param string $id2 Customer id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdRejectPostWithHttpInfo($id, $id2, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdRejectPost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling designsIdRejectPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/reject";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}/reject'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdRejectionCommentGet
     *
     * Fetches belongsTo relation rejectionComment.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdRejectionCommentGet($id, $refresh = null)
    {
        list($response) = $this->designsIdRejectionCommentGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdRejectionCommentGetWithHttpInfo
     *
     * Fetches belongsTo relation rejectionComment.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdRejectionCommentGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdRejectionCommentGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/rejectionComment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Designs/{id}/rejectionComment'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdReplacePost($id, $data = null)
    {
        list($response) = $this->designsIdReplacePostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdReplacePostWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdReplacePostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdReplacePost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/replace";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}/replace'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdRequesterGet
     *
     * Fetches belongsTo relation requester.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdRequesterGet($id, $refresh = null)
    {
        list($response) = $this->designsIdRequesterGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdRequesterGetWithHttpInfo
     *
     * Fetches belongsTo relation requester.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdRequesterGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdRequesterGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/requester";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/requester'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdReviewerGet
     *
     * Fetches belongsTo relation reviewer.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdReviewerGet($id, $refresh = null)
    {
        list($response) = $this->designsIdReviewerGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdReviewerGetWithHttpInfo
     *
     * Fetches belongsTo relation reviewer.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdReviewerGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdReviewerGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/reviewer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Designs/{id}/reviewer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdSubmitPost
     *
     * Submit design for approval
     *
     * @param string $id Design id (required)
     * @param string $id2 Customer id (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdSubmitPost($id, $id2)
    {
        list($response) = $this->designsIdSubmitPostWithHttpInfo($id, $id2);
        return $response;
    }

    /**
     * Operation designsIdSubmitPostWithHttpInfo
     *
     * Submit design for approval
     *
     * @param string $id Design id (required)
     * @param string $id2 Customer id (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdSubmitPostWithHttpInfo($id, $id2)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdSubmitPost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling designsIdSubmitPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/submit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/{id}/submit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsCountGet
     *
     * Counts tags of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsCountGet($id, $where = null)
    {
        list($response) = $this->designsIdTagsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation designsIdTagsCountGetWithHttpInfo
     *
     * Counts tags of Design.
     *
     * @param string $id Design id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsCountGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Designs/{id}/tags/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsDelete
     *
     * Deletes all tags of this model.
     *
     * @param string $id Design id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsDelete($id)
    {
        list($response) = $this->designsIdTagsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation designsIdTagsDeleteWithHttpInfo
     *
     * Deletes all tags of this model.
     *
     * @param string $id Design id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/tags'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsFkDelete
     *
     * Delete a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsFkDelete($id, $fk)
    {
        list($response) = $this->designsIdTagsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdTagsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdTagsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/tags/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsFkGet
     *
     * Find a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return \Swagger\Client\Model\Tag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsFkGet($id, $fk)
    {
        list($response) = $this->designsIdTagsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdTagsFkGetWithHttpInfo
     *
     * Find a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdTagsFkGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Designs/{id}/tags/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsFkPut
     *
     * Update a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return \Swagger\Client\Model\Tag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->designsIdTagsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdTagsFkPutWithHttpInfo
     *
     * Update a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdTagsFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Designs/{id}/tags/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsGet
     *
     * Queries tags of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Tag[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsGet($id, $filter = null)
    {
        list($response) = $this->designsIdTagsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation designsIdTagsGetWithHttpInfo
     *
     * Queries tags of Design.
     *
     * @param string $id Design id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag[]',
                '/Designs/{id}/tags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsPost
     *
     * Creates a new instance in tags of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return \Swagger\Client\Model\Tag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsPost($id, $data = null)
    {
        list($response) = $this->designsIdTagsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation designsIdTagsPostWithHttpInfo
     *
     * Creates a new instance in tags of this model.
     *
     * @param string $id Design id (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsPost');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Designs/{id}/tags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsRelFkDelete
     *
     * Remove the tags relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsRelFkDelete($id, $fk)
    {
        list($response) = $this->designsIdTagsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdTagsRelFkDeleteWithHttpInfo
     *
     * Remove the tags relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdTagsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Designs/{id}/tags/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsRelFkHead
     *
     * Check the existence of tags relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsRelFkHead($id, $fk)
    {
        list($response) = $this->designsIdTagsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation designsIdTagsRelFkHeadWithHttpInfo
     *
     * Check the existence of tags relation to an item by id.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdTagsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Designs/{id}/tags/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTagsRelFkPut
     *
     * Add a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\DesignTag $data  (optional)
     * @return \Swagger\Client\Model\DesignTag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->designsIdTagsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation designsIdTagsRelFkPutWithHttpInfo
     *
     * Add a related item by id for tags.
     *
     * @param string $id Design id (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\DesignTag $data  (optional)
     * @return array of \Swagger\Client\Model\DesignTag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTagsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTagsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling designsIdTagsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/tags/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignTag',
                '/Designs/{id}/tags/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignTag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignTag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsIdTemplateGet
     *
     * Fetches belongsTo relation template.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTemplateGet($id, $refresh = null)
    {
        list($response) = $this->designsIdTemplateGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation designsIdTemplateGetWithHttpInfo
     *
     * Fetches belongsTo relation template.
     *
     * @param string $id Design id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsIdTemplateGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling designsIdTemplateGet');
        }
        // parse inputs
        $resourcePath = "/Designs/{id}/template";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Designs/{id}/template'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsPatch
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsPatch($data = null)
    {
        list($response) = $this->designsPatchWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation designsPatchWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsPatchWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsPost
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsPost($data = null)
    {
        list($response) = $this->designsPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation designsPostWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsPut
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsPut($data = null)
    {
        list($response) = $this->designsPutWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation designsPutWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsPutWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsReplaceOrCreatePost($data = null)
    {
        list($response) = $this->designsReplaceOrCreatePostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation designsReplaceOrCreatePostWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Design $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsReplaceOrCreatePostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Designs/replaceOrCreate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/replaceOrCreate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Design $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsUpdatePost($where = null, $data = null)
    {
        list($response) = $this->designsUpdatePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation designsUpdatePostWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Design $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsUpdatePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Designs/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/Designs/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation designsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Design $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsUpsertWithWherePost($where = null, $data = null)
    {
        list($response) = $this->designsUpsertWithWherePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation designsUpsertWithWherePostWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Design $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function designsUpsertWithWherePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Designs/upsertWithWhere";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Designs/upsertWithWhere'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
