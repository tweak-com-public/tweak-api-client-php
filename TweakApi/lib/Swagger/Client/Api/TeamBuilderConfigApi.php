<?php
/**
 * TeamBuilderConfigApi
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-beta.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * TeamBuilderConfigApi Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamBuilderConfigApi
{

    /**
     * API Client
     *
     * @var \Tweak\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Tweak\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Tweak\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apistagecdn.tweak.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Tweak\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Tweak\Api\ApiClient $apiClient set the API client
     *
     * @return TeamBuilderConfigApi
     */
    public function setApiClient(\Tweak\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation teamBuilderConfigsChangeStreamGet
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsChangeStreamGet($options = null)
    {
        list($response) = $this->teamBuilderConfigsChangeStreamGetWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsChangeStreamGetWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsChangeStreamGetWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/TeamBuilderConfigs/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsChangeStreamPost
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsChangeStreamPost($options = null)
    {
        list($response) = $this->teamBuilderConfigsChangeStreamPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsChangeStreamPostWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsChangeStreamPostWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/TeamBuilderConfigs/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsCountGet
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsCountGet($where = null)
    {
        list($response) = $this->teamBuilderConfigsCountGetWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsCountGetWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsCountGetWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsFindOneGet($filter = null)
    {
        list($response) = $this->teamBuilderConfigsFindOneGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsFindOneGetWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsFindOneGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsGet
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsGet($filter = null)
    {
        list($response) = $this->teamBuilderConfigsGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsGetWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig[]',
                '/TeamBuilderConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdDelete
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdDelete($id)
    {
        list($response) = $this->teamBuilderConfigsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdDeleteWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/TeamBuilderConfigs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdExistsGet
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdExistsGet($id)
    {
        list($response) = $this->teamBuilderConfigsIdExistsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdExistsGetWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdExistsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdExistsGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/TeamBuilderConfigs/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdGet
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdGet($id, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdGetWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdHead
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdHead($id)
    {
        list($response) = $this->teamBuilderConfigsIdHeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdHeadWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdHeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdHead');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/TeamBuilderConfigs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdPatch($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdPatchWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdPatchWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdPatchWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdPatch');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsCountGet
     *
     * Counts productGroups of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsCountGet($id, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsCountGetWithHttpInfo
     *
     * Counts productGroups of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productGroups/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsDelete
     *
     * Deletes all productGroups of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsDelete($id)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsDeleteWithHttpInfo
     *
     * Deletes all productGroups of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productGroups'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsFkDelete
     *
     * Delete a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productGroups/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsFkGet
     *
     * Find a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return \Swagger\Client\Model\ProductGroup
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsFkGet($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsFkGetWithHttpInfo
     *
     * Find a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return array of \Swagger\Client\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductGroup',
                '/TeamBuilderConfigs/{id}/productGroups/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsFkPut
     *
     * Update a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @param \Swagger\Client\Model\ProductGroup $data  (optional)
     * @return \Swagger\Client\Model\ProductGroup
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsFkPutWithHttpInfo
     *
     * Update a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @param \Swagger\Client\Model\ProductGroup $data  (optional)
     * @return array of \Swagger\Client\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductGroup',
                '/TeamBuilderConfigs/{id}/productGroups/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsGet
     *
     * Queries productGroups of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductGroup[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsGet($id, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsGetWithHttpInfo
     *
     * Queries productGroups of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductGroup[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductGroup[]',
                '/TeamBuilderConfigs/{id}/productGroups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductGroup[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductGroup[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesCountGet
     *
     * Counts types of ProductGroup.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesCountGet($id, $nk, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesCountGetWithHttpInfo
     *
     * Counts types of ProductGroup.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesDelete
     *
     * Deletes all types of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesDelete($id, $nk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesDeleteWithHttpInfo
     *
     * Deletes all types of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesFkDelete
     *
     * Delete a related item by id for types.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $fk Foreign key for types (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesFkDelete($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for types.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $fk Foreign key for types (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsNkTypesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesFkGet
     *
     * Find a related item by id for types.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $fk Foreign key for types (required)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesFkGet($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesFkGetWithHttpInfo
     *
     * Find a related item by id for types.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $fk Foreign key for types (required)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsNkTypesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesFkPut
     *
     * Update a related item by id for types.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $fk Foreign key for types (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesFkPutWithHttpInfo
     *
     * Update a related item by id for types.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $fk Foreign key for types (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsNkTypesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesGet
     *
     * Queries types of ProductGroup.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductType[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesGet($id, $nk, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesGetWithHttpInfo
     *
     * Queries types of ProductGroup.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductType[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType[]',
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesPost
     *
     * Creates a new instance in types of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesPost($id, $nk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsNkTypesPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsNkTypesPostWithHttpInfo
     *
     * Creates a new instance in types of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productGroups. (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsNkTypesPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsNkTypesPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductGroupsNkTypesPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productGroups/{nk}/types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsPost
     *
     * Creates a new instance in productGroups of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductGroup $data  (optional)
     * @return \Swagger\Client\Model\ProductGroup
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsPost($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsPostWithHttpInfo
     *
     * Creates a new instance in productGroups of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductGroup $data  (optional)
     * @return array of \Swagger\Client\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductGroup',
                '/TeamBuilderConfigs/{id}/productGroups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsRelFkDelete
     *
     * Remove the productGroups relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsRelFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsRelFkDeleteWithHttpInfo
     *
     * Remove the productGroups relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productGroups/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsRelFkHead
     *
     * Check the existence of productGroups relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsRelFkHead($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsRelFkHeadWithHttpInfo
     *
     * Check the existence of productGroups relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamBuilderConfigs/{id}/productGroups/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsRelFkPut
     *
     * Add a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductGroup $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductGroup
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductGroupsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductGroupsRelFkPutWithHttpInfo
     *
     * Add a related item by id for productGroups.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductGroup $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductGroup, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductGroupsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductGroupsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductGroupsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductGroup',
                '/TeamBuilderConfigs/{id}/productGroups/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductGroup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsCountGet
     *
     * Counts productSizeMaterials of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsCountGet($id, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsCountGetWithHttpInfo
     *
     * Counts productSizeMaterials of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsDelete
     *
     * Deletes all productSizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsDelete($id)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsDeleteWithHttpInfo
     *
     * Deletes all productSizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizeMaterials'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsFkDelete
     *
     * Delete a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsFkGet
     *
     * Find a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsFkGet($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsFkGetWithHttpInfo
     *
     * Find a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsFkPut
     *
     * Update a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsFkPutWithHttpInfo
     *
     * Update a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsGet
     *
     * Queries productSizeMaterials of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsGet($id, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsGetWithHttpInfo
     *
     * Queries productSizeMaterials of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial[]',
                '/TeamBuilderConfigs/{id}/productSizeMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkMaterialGet
     *
     * Fetches belongsTo relation material.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkMaterialGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsNkMaterialGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkMaterialGetWithHttpInfo
     *
     * Fetches belongsTo relation material.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkMaterialGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsNkMaterialGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsNkMaterialGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/material";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/material'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet
     *
     * Fetches belongsTo relation pdfColorProfile.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductPdfColorProfile
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetWithHttpInfo
     *
     * Fetches belongsTo relation pdfColorProfile.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductPdfColorProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/pdfColorProfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductPdfColorProfile',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/pdfColorProfile'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductPdfColorProfile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductPdfColorProfile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkSizeGet
     *
     * Fetches belongsTo relation size.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkSizeGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsNkSizeGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkSizeGetWithHttpInfo
     *
     * Fetches belongsTo relation size.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkSizeGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsNkSizeGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsNkSizeGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/size";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/size'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkTeamGet
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkTeamGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsNkTeamGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsNkTeamGetWithHttpInfo
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterials. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsNkTeamGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsNkTeamGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsNkTeamGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/team";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/team'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsPost
     *
     * Creates a new instance in productSizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsPost($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsPostWithHttpInfo
     *
     * Creates a new instance in productSizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelCountGet
     *
     * Counts productSizeMaterialsRel of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelCountGet($id, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelCountGetWithHttpInfo
     *
     * Counts productSizeMaterialsRel of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelDelete
     *
     * Deletes all productSizeMaterialsRel of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelDelete($id)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelDeleteWithHttpInfo
     *
     * Deletes all productSizeMaterialsRel of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkDelete
     *
     * Remove the productSizeMaterials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkDeleteWithHttpInfo
     *
     * Remove the productSizeMaterials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0
     *
     * Delete a related item by id for productSizeMaterialsRel.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterialsRel (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0WithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0WithHttpInfo
     *
     * Delete a related item by id for productSizeMaterialsRel.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterialsRel (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0WithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkGet
     *
     * Find a related item by id for productSizeMaterialsRel.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterialsRel (required)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkGet($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkGetWithHttpInfo
     *
     * Find a related item by id for productSizeMaterialsRel.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterialsRel (required)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsRelFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkHead
     *
     * Check the existence of productSizeMaterials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkHead($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkHeadWithHttpInfo
     *
     * Check the existence of productSizeMaterials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkPut
     *
     * Add a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkPutWithHttpInfo
     *
     * Add a related item by id for productSizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0
     *
     * Update a related item by id for productSizeMaterialsRel.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterialsRel (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0WithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0WithHttpInfo
     *
     * Update a related item by id for productSizeMaterialsRel.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizeMaterialsRel (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0WithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizeMaterialsRelFkPut_0');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelGet
     *
     * Queries productSizeMaterialsRel of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelGet($id, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelGetWithHttpInfo
     *
     * Queries productSizeMaterialsRel of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial[]',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet
     *
     * Fetches belongsTo relation builderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterialsRel. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetWithHttpInfo
     *
     * Fetches belongsTo relation builderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterialsRel. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/builderConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/builderConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet
     *
     * Fetches belongsTo relation pdfColorProfile.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterialsRel. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductPdfColorProfile
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetWithHttpInfo
     *
     * Fetches belongsTo relation pdfColorProfile.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterialsRel. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductPdfColorProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/pdfColorProfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductPdfColorProfile',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/pdfColorProfile'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductPdfColorProfile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductPdfColorProfile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet
     *
     * Fetches belongsTo relation productSizeMaterial.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterialsRel. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetWithHttpInfo
     *
     * Fetches belongsTo relation productSizeMaterial.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizeMaterialsRel. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/productSizeMaterial";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/productSizeMaterial'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelPost
     *
     * Creates a new instance in productSizeMaterialsRel of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelPost($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizeMaterialsRelPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizeMaterialsRelPostWithHttpInfo
     *
     * Creates a new instance in productSizeMaterialsRel of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizeMaterialsRelPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizeMaterialsRelPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizeMaterialsRel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesCountGet
     *
     * Counts productSizes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesCountGet($id, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesCountGetWithHttpInfo
     *
     * Counts productSizes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productSizes/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesDelete
     *
     * Deletes all productSizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesDelete($id)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesDeleteWithHttpInfo
     *
     * Deletes all productSizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesFkDelete
     *
     * Delete a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesFkGet
     *
     * Find a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesFkGet($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesFkGetWithHttpInfo
     *
     * Find a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productSizes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesFkPut
     *
     * Update a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesFkPutWithHttpInfo
     *
     * Update a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productSizes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesGet
     *
     * Queries productSizes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductSize[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesGet($id, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesGetWithHttpInfo
     *
     * Queries productSizes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductSize[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize[]',
                '/TeamBuilderConfigs/{id}/productSizes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsCountGet
     *
     * Counts materials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsCountGetWithHttpInfo
     *
     * Counts materials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsDelete
     *
     * Deletes all materials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsDelete($id, $nk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsDeleteWithHttpInfo
     *
     * Deletes all materials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsFkDelete
     *
     * Delete a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkMaterialsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsFkGet
     *
     * Find a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsFkGet($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsFkGetWithHttpInfo
     *
     * Find a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkMaterialsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsFkPut
     *
     * Update a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsFkPutWithHttpInfo
     *
     * Update a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkMaterialsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsGet
     *
     * Queries materials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductMaterial[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsGet($id, $nk, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsGetWithHttpInfo
     *
     * Queries materials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial[]',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsPost
     *
     * Creates a new instance in materials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsPost($id, $nk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsPostWithHttpInfo
     *
     * Creates a new instance in materials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete
     *
     * Remove the materials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteWithHttpInfo
     *
     * Remove the materials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsRelFkHead
     *
     * Check the existence of materials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsRelFkHead($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadWithHttpInfo
     *
     * Check the existence of materials relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkHead');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsRelFkPut
     *
     * Add a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsRelFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkMaterialsRelFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkMaterialsRelFkPutWithHttpInfo
     *
     * Add a related item by id for materials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for materials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkMaterialsRelFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkMaterialsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkPdfColorProfileGet
     *
     * Fetches belongsTo relation pdfColorProfile.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductPdfColorProfile
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkPdfColorProfileGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkPdfColorProfileGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkPdfColorProfileGetWithHttpInfo
     *
     * Fetches belongsTo relation pdfColorProfile.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductPdfColorProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkPdfColorProfileGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkPdfColorProfileGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkPdfColorProfileGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/pdfColorProfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductPdfColorProfile',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/pdfColorProfile'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductPdfColorProfile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductPdfColorProfile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsCountGet
     *
     * Counts products of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsCountGetWithHttpInfo
     *
     * Counts products of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsDelete
     *
     * Deletes all products of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsDelete($id, $nk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsDeleteWithHttpInfo
     *
     * Deletes all products of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsFkDelete
     *
     * Delete a related item by id for products.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for products (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for products.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for products (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkProductsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsFkGet
     *
     * Find a related item by id for products.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for products (required)
     * @return \Swagger\Client\Model\Product
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsFkGet($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsFkGetWithHttpInfo
     *
     * Find a related item by id for products.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for products (required)
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkProductsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsFkPut
     *
     * Update a related item by id for products.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for products (required)
     * @param \Swagger\Client\Model\Product $data  (optional)
     * @return \Swagger\Client\Model\Product
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsFkPutWithHttpInfo
     *
     * Update a related item by id for products.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for products (required)
     * @param \Swagger\Client\Model\Product $data  (optional)
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkProductsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsGet
     *
     * Queries products of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Product[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsGet($id, $nk, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsGetWithHttpInfo
     *
     * Queries products of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product[]',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsPost
     *
     * Creates a new instance in products of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param \Swagger\Client\Model\Product $data  (optional)
     * @return \Swagger\Client\Model\Product
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsPost($id, $nk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkProductsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkProductsPostWithHttpInfo
     *
     * Creates a new instance in products of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param \Swagger\Client\Model\Product $data  (optional)
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkProductsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkProductsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkProductsPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/products'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet
     *
     * Counts sizeMaterials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetWithHttpInfo
     *
     * Counts sizeMaterials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsDelete
     *
     * Deletes all sizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsDelete($id, $nk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteWithHttpInfo
     *
     * Deletes all sizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete
     *
     * Delete a related item by id for sizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for sizeMaterials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for sizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for sizeMaterials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet
     *
     * Find a related item by id for sizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for sizeMaterials (required)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetWithHttpInfo
     *
     * Find a related item by id for sizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for sizeMaterials (required)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut
     *
     * Update a related item by id for sizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for sizeMaterials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutWithHttpInfo
     *
     * Update a related item by id for sizeMaterials.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $fk Foreign key for sizeMaterials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsGet
     *
     * Queries sizeMaterials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsGet($id, $nk, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsGetWithHttpInfo
     *
     * Queries sizeMaterials of ProductSize.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial[]',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsPost
     *
     * Creates a new instance in sizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsPost($id, $nk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkSizeMaterialsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkSizeMaterialsPostWithHttpInfo
     *
     * Creates a new instance in sizeMaterials of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkSizeMaterialsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkSizeMaterialsPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkTypeGet
     *
     * Fetches belongsTo relation type.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkTypeGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesNkTypeGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesNkTypeGetWithHttpInfo
     *
     * Fetches belongsTo relation type.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productSizes. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesNkTypeGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesNkTypeGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductSizesNkTypeGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/type";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productSizes/{nk}/type'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesPost
     *
     * Creates a new instance in productSizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesPost($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesPostWithHttpInfo
     *
     * Creates a new instance in productSizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productSizes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesRelFkDelete
     *
     * Remove the productSizes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesRelFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesRelFkDeleteWithHttpInfo
     *
     * Remove the productSizes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productSizes/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesRelFkHead
     *
     * Check the existence of productSizes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesRelFkHead($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesRelFkHeadWithHttpInfo
     *
     * Check the existence of productSizes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamBuilderConfigs/{id}/productSizes/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesRelFkPut
     *
     * Add a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSize $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductSizesRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductSizesRelFkPutWithHttpInfo
     *
     * Add a related item by id for productSizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productSizes (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductSize $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductSizesRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductSizesRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductSizesRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductSize',
                '/TeamBuilderConfigs/{id}/productSizes/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesCountGet
     *
     * Counts productTypes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesCountGet($id, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesCountGetWithHttpInfo
     *
     * Counts productTypes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productTypes/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesDelete
     *
     * Deletes all productTypes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesDelete($id)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesDeleteWithHttpInfo
     *
     * Deletes all productTypes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productTypes'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesFkDelete
     *
     * Delete a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productTypes/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesFkGet
     *
     * Find a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesFkGet($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesFkGetWithHttpInfo
     *
     * Find a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productTypes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesFkPut
     *
     * Update a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesFkPutWithHttpInfo
     *
     * Update a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productTypes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesGet
     *
     * Queries productTypes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductType[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesGet($id, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesGetWithHttpInfo
     *
     * Queries productTypes of TeamBuilderConfig.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductType[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType[]',
                '/TeamBuilderConfigs/{id}/productTypes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkGroupGet
     *
     * Fetches belongsTo relation group.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\ProductGroup
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkGroupGet($id, $nk, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkGroupGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkGroupGetWithHttpInfo
     *
     * Fetches belongsTo relation group.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkGroupGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkGroupGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkGroupGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/group";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductGroup',
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/group'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesCountGet
     *
     * Counts sizes of ProductType.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesCountGet($id, $nk, $where = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesCountGetWithHttpInfo
     *
     * Counts sizes of ProductType.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesDelete
     *
     * Deletes all sizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesDelete($id, $nk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesDeleteWithHttpInfo
     *
     * Deletes all sizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesFkDelete
     *
     * Delete a related item by id for sizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $fk Foreign key for sizes (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesFkDelete($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for sizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $fk Foreign key for sizes (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesNkSizesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesFkGet
     *
     * Find a related item by id for sizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $fk Foreign key for sizes (required)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesFkGet($id, $nk, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesFkGetWithHttpInfo
     *
     * Find a related item by id for sizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $fk Foreign key for sizes (required)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesNkSizesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesFkPut
     *
     * Update a related item by id for sizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $fk Foreign key for sizes (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesFkPutWithHttpInfo
     *
     * Update a related item by id for sizes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $fk Foreign key for sizes (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesNkSizesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesGet
     *
     * Queries sizes of ProductType.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductSize[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesGet($id, $nk, $filter = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesGetWithHttpInfo
     *
     * Queries sizes of ProductType.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductSize[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize[]',
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesPost
     *
     * Creates a new instance in sizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return \Swagger\Client\Model\ProductSize
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesPost($id, $nk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesNkSizesPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesNkSizesPostWithHttpInfo
     *
     * Creates a new instance in sizes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $nk Foreign key for productTypes. (required)
     * @param \Swagger\Client\Model\ProductSize $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSize, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesNkSizesPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesNkSizesPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamBuilderConfigsIdProductTypesNkSizesPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSize',
                '/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSize', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSize', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesPost
     *
     * Creates a new instance in productTypes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return \Swagger\Client\Model\ProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesPost($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesPostWithHttpInfo
     *
     * Creates a new instance in productTypes of this model.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param \Swagger\Client\Model\ProductType $data  (optional)
     * @return array of \Swagger\Client\Model\ProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesPost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductType',
                '/TeamBuilderConfigs/{id}/productTypes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesRelFkDelete
     *
     * Remove the productTypes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesRelFkDelete($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesRelFkDeleteWithHttpInfo
     *
     * Remove the productTypes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamBuilderConfigs/{id}/productTypes/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesRelFkHead
     *
     * Check the existence of productTypes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesRelFkHead($id, $fk)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesRelFkHeadWithHttpInfo
     *
     * Check the existence of productTypes relation to an item by id.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamBuilderConfigs/{id}/productTypes/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesRelFkPut
     *
     * Add a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductType $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfigProductType
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdProductTypesRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdProductTypesRelFkPutWithHttpInfo
     *
     * Add a related item by id for productTypes.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param string $fk Foreign key for productTypes (required)
     * @param \Swagger\Client\Model\TeamBuilderConfigProductType $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfigProductType, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdProductTypesRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdProductTypesRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamBuilderConfigsIdProductTypesRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfigProductType',
                '/TeamBuilderConfigs/{id}/productTypes/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfigProductType', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfigProductType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdPut($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdPutWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdPut');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdReplacePost($id, $data = null)
    {
        list($response) = $this->teamBuilderConfigsIdReplacePostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdReplacePostWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdReplacePostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdReplacePost');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/replace";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/{id}/replace'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsIdTeamGet
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdTeamGet($id, $refresh = null)
    {
        list($response) = $this->teamBuilderConfigsIdTeamGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsIdTeamGetWithHttpInfo
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id TeamBuilderConfig id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsIdTeamGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamBuilderConfigsIdTeamGet');
        }
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/{id}/team";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/TeamBuilderConfigs/{id}/team'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsPatch
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsPatch($data = null)
    {
        list($response) = $this->teamBuilderConfigsPatchWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsPatchWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsPatchWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsPost
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsPost($data = null)
    {
        list($response) = $this->teamBuilderConfigsPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsPostWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsPut
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsPut($data = null)
    {
        list($response) = $this->teamBuilderConfigsPutWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsPutWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsPutWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsReplaceOrCreatePost($data = null)
    {
        list($response) = $this->teamBuilderConfigsReplaceOrCreatePostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsReplaceOrCreatePostWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamBuilderConfig $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsReplaceOrCreatePostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/replaceOrCreate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/replaceOrCreate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsUpdatePost($where = null, $data = null)
    {
        list($response) = $this->teamBuilderConfigsUpdatePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsUpdatePostWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsUpdatePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/TeamBuilderConfigs/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamBuilderConfigsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsUpsertWithWherePost($where = null, $data = null)
    {
        list($response) = $this->teamBuilderConfigsUpsertWithWherePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation teamBuilderConfigsUpsertWithWherePostWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamBuilderConfigsUpsertWithWherePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/TeamBuilderConfigs/upsertWithWhere";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamBuilderConfigs/upsertWithWhere'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
