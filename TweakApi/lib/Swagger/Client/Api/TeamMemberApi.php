<?php
/**
 * TeamMemberApi
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-alpha.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * TeamMemberApi Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamMemberApi
{

    /**
     * API Client
     *
     * @var \Tweak\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Tweak\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Tweak\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apistagecdn.tweak.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Tweak\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Tweak\Api\ApiClient $apiClient set the API client
     *
     * @return TeamMemberApi
     */
    public function setApiClient(\Tweak\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation teamMembersChangeStreamGet
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersChangeStreamGet($options = null)
    {
        list($response) = $this->teamMembersChangeStreamGetWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation teamMembersChangeStreamGetWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersChangeStreamGetWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/TeamMembers/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersChangeStreamPost
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersChangeStreamPost($options = null)
    {
        list($response) = $this->teamMembersChangeStreamPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation teamMembersChangeStreamPostWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersChangeStreamPostWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/TeamMembers/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersCountGet
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersCountGet($where = null)
    {
        list($response) = $this->teamMembersCountGetWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation teamMembersCountGetWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersCountGetWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersFindOneGet
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersFindOneGet($filter = null)
    {
        list($response) = $this->teamMembersFindOneGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation teamMembersFindOneGetWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersFindOneGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersGet
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersGet($filter = null)
    {
        list($response) = $this->teamMembersGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation teamMembersGetWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/TeamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsCountGet
     *
     * Counts assignedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdAssignedDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsCountGetWithHttpInfo
     *
     * Counts assignedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/assignedDesigns/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsDelete
     *
     * Deletes all assignedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsDelete($id)
    {
        list($response) = $this->teamMembersIdAssignedDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsDeleteWithHttpInfo
     *
     * Deletes all assignedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/assignedDesigns'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsFkDelete
     *
     * Delete a related item by id for assignedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for assignedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdAssignedDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for assignedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for assignedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdAssignedDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/assignedDesigns/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsFkGet
     *
     * Find a related item by id for assignedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for assignedDesigns (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdAssignedDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for assignedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for assignedDesigns (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdAssignedDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/assignedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsFkPut
     *
     * Update a related item by id for assignedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for assignedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdAssignedDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for assignedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for assignedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdAssignedDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/assignedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsGet
     *
     * Queries assignedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdAssignedDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsGetWithHttpInfo
     *
     * Queries assignedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/TeamMembers/{id}/assignedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdAssignedDesignsPost
     *
     * Creates a new instance in assignedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdAssignedDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdAssignedDesignsPostWithHttpInfo
     *
     * Creates a new instance in assignedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdAssignedDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdAssignedDesignsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/assignedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/assignedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsCountGet
     *
     * Counts commentedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdCommentedDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsCountGetWithHttpInfo
     *
     * Counts commentedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/commentedDesigns/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsDelete
     *
     * Deletes all commentedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsDelete($id)
    {
        list($response) = $this->teamMembersIdCommentedDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsDeleteWithHttpInfo
     *
     * Deletes all commentedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/commentedDesigns'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsFkDelete
     *
     * Delete a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdCommentedDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdCommentedDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/commentedDesigns/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsFkGet
     *
     * Find a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdCommentedDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdCommentedDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/commentedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsFkPut
     *
     * Update a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdCommentedDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdCommentedDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/commentedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsGet
     *
     * Queries commentedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdCommentedDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsGetWithHttpInfo
     *
     * Queries commentedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/TeamMembers/{id}/commentedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsPost
     *
     * Creates a new instance in commentedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdCommentedDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsPostWithHttpInfo
     *
     * Creates a new instance in commentedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/commentedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsRelFkDelete
     *
     * Remove the commentedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsRelFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdCommentedDesignsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsRelFkDeleteWithHttpInfo
     *
     * Remove the commentedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdCommentedDesignsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/commentedDesigns/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsRelFkHead
     *
     * Check the existence of commentedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsRelFkHead($id, $fk)
    {
        list($response) = $this->teamMembersIdCommentedDesignsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsRelFkHeadWithHttpInfo
     *
     * Check the existence of commentedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdCommentedDesignsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamMembers/{id}/commentedDesigns/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCommentedDesignsRelFkPut
     *
     * Add a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdCommentedDesignsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdCommentedDesignsRelFkPutWithHttpInfo
     *
     * Add a related item by id for commentedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for commentedDesigns (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCommentedDesignsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCommentedDesignsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdCommentedDesignsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/commentedDesigns/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/TeamMembers/{id}/commentedDesigns/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdCustomerGet
     *
     * Fetches belongsTo relation customer.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCustomerGet($id, $refresh = null)
    {
        list($response) = $this->teamMembersIdCustomerGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation teamMembersIdCustomerGetWithHttpInfo
     *
     * Fetches belongsTo relation customer.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdCustomerGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdCustomerGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/customer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/TeamMembers/{id}/customer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDelete
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDelete($id)
    {
        list($response) = $this->teamMembersIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdDeleteWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/TeamMembers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsCountGet
     *
     * Counts designComments of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdDesignCommentsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsCountGetWithHttpInfo
     *
     * Counts designComments of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/designComments/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsDelete
     *
     * Deletes all designComments of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsDelete($id)
    {
        list($response) = $this->teamMembersIdDesignCommentsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsDeleteWithHttpInfo
     *
     * Deletes all designComments of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/designComments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsFkDelete
     *
     * Delete a related item by id for designComments.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designComments (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdDesignCommentsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designComments.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designComments (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignCommentsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/designComments/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsFkGet
     *
     * Find a related item by id for designComments.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designComments (required)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdDesignCommentsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsFkGetWithHttpInfo
     *
     * Find a related item by id for designComments.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designComments (required)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignCommentsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/TeamMembers/{id}/designComments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsFkPut
     *
     * Update a related item by id for designComments.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designComments (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdDesignCommentsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsFkPutWithHttpInfo
     *
     * Update a related item by id for designComments.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designComments (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignCommentsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/TeamMembers/{id}/designComments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsGet
     *
     * Queries designComments of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignComment[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdDesignCommentsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsGetWithHttpInfo
     *
     * Queries designComments of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignComment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment[]',
                '/TeamMembers/{id}/designComments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignCommentsPost
     *
     * Creates a new instance in designComments of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdDesignCommentsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignCommentsPostWithHttpInfo
     *
     * Creates a new instance in designComments of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignCommentsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignCommentsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designComments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/TeamMembers/{id}/designComments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersCountGet
     *
     * Counts designFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdDesignFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersCountGetWithHttpInfo
     *
     * Counts designFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/designFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersDelete
     *
     * Deletes all designFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersDelete($id)
    {
        list($response) = $this->teamMembersIdDesignFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersDeleteWithHttpInfo
     *
     * Deletes all designFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/designFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersFkDelete
     *
     * Delete a related item by id for designFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdDesignFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/designFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersFkGet
     *
     * Find a related item by id for designFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdDesignFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for designFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/TeamMembers/{id}/designFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersFkPut
     *
     * Update a related item by id for designFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdDesignFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for designFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/TeamMembers/{id}/designFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersGet
     *
     * Queries designFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdDesignFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersGetWithHttpInfo
     *
     * Queries designFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder[]',
                '/TeamMembers/{id}/designFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignFoldersPost
     *
     * Creates a new instance in designFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdDesignFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignFoldersPostWithHttpInfo
     *
     * Creates a new instance in designFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignFoldersPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/TeamMembers/{id}/designFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesCountGet
     *
     * Counts designShares of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdDesignSharesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesCountGetWithHttpInfo
     *
     * Counts designShares of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/designShares/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesDelete
     *
     * Deletes all designShares of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesDelete($id)
    {
        list($response) = $this->teamMembersIdDesignSharesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesDeleteWithHttpInfo
     *
     * Deletes all designShares of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/designShares'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesFkDelete
     *
     * Delete a related item by id for designShares.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designShares (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdDesignSharesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designShares.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designShares (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignSharesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/designShares/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesFkGet
     *
     * Find a related item by id for designShares.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designShares (required)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdDesignSharesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesFkGetWithHttpInfo
     *
     * Find a related item by id for designShares.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designShares (required)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignSharesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/TeamMembers/{id}/designShares/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesFkPut
     *
     * Update a related item by id for designShares.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designShares (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdDesignSharesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesFkPutWithHttpInfo
     *
     * Update a related item by id for designShares.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for designShares (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdDesignSharesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/TeamMembers/{id}/designShares/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesGet
     *
     * Queries designShares of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdDesignSharesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesGetWithHttpInfo
     *
     * Queries designShares of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember[]',
                '/TeamMembers/{id}/designShares'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdDesignSharesPost
     *
     * Creates a new instance in designShares of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdDesignSharesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdDesignSharesPostWithHttpInfo
     *
     * Creates a new instance in designShares of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdDesignSharesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdDesignSharesPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/designShares";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/TeamMembers/{id}/designShares'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdExistsGet
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdExistsGet($id)
    {
        list($response) = $this->teamMembersIdExistsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdExistsGetWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdExistsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdExistsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/TeamMembers/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdGet
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdGetWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdHead
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdHead($id)
    {
        list($response) = $this->teamMembersIdHeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdHeadWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdHeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/TeamMembers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersCountGet
     *
     * Counts imageFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdImageFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersCountGetWithHttpInfo
     *
     * Counts imageFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/imageFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersDelete
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersDelete($id)
    {
        list($response) = $this->teamMembersIdImageFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersDeleteWithHttpInfo
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/imageFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersFkDelete
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdImageFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdImageFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/imageFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersFkGet
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdImageFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdImageFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/TeamMembers/{id}/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersFkPut
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdImageFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdImageFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/TeamMembers/{id}/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersGet
     *
     * Queries imageFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ImageFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdImageFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersGetWithHttpInfo
     *
     * Queries imageFolders of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder[]',
                '/TeamMembers/{id}/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersPost
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdImageFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersPostWithHttpInfo
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/TeamMembers/{id}/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersRelFkDelete
     *
     * Remove the imageFolders relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersRelFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdImageFoldersRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersRelFkDeleteWithHttpInfo
     *
     * Remove the imageFolders relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdImageFoldersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/imageFolders/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersRelFkHead
     *
     * Check the existence of imageFolders relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersRelFkHead($id, $fk)
    {
        list($response) = $this->teamMembersIdImageFoldersRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersRelFkHeadWithHttpInfo
     *
     * Check the existence of imageFolders relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdImageFoldersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamMembers/{id}/imageFolders/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdImageFoldersRelFkPut
     *
     * Add a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolderMember $data  (optional)
     * @return \Swagger\Client\Model\ImageFolderMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdImageFoldersRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdImageFoldersRelFkPutWithHttpInfo
     *
     * Add a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolderMember $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolderMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdImageFoldersRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdImageFoldersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdImageFoldersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/imageFolders/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolderMember',
                '/TeamMembers/{id}/imageFolders/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolderMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolderMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsCountGet
     *
     * Counts invitationTickets of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdInvitationTicketsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsCountGetWithHttpInfo
     *
     * Counts invitationTickets of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/invitationTickets/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsDelete
     *
     * Deletes all invitationTickets of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsDelete($id)
    {
        list($response) = $this->teamMembersIdInvitationTicketsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsDeleteWithHttpInfo
     *
     * Deletes all invitationTickets of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/invitationTickets'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsFkDelete
     *
     * Delete a related item by id for invitationTickets.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdInvitationTicketsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for invitationTickets.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdInvitationTicketsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/invitationTickets/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsFkGet
     *
     * Find a related item by id for invitationTickets.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdInvitationTicketsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsFkGetWithHttpInfo
     *
     * Find a related item by id for invitationTickets.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdInvitationTicketsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/TeamMembers/{id}/invitationTickets/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsFkPut
     *
     * Update a related item by id for invitationTickets.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdInvitationTicketsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsFkPutWithHttpInfo
     *
     * Update a related item by id for invitationTickets.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdInvitationTicketsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/TeamMembers/{id}/invitationTickets/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsGet
     *
     * Queries invitationTickets of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\InvitationTicket[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdInvitationTicketsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsGetWithHttpInfo
     *
     * Queries invitationTickets of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket[]',
                '/TeamMembers/{id}/invitationTickets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInvitationTicketsPost
     *
     * Creates a new instance in invitationTickets of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdInvitationTicketsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdInvitationTicketsPostWithHttpInfo
     *
     * Creates a new instance in invitationTickets of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInvitationTicketsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInvitationTicketsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/TeamMembers/{id}/invitationTickets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdInviteInviteePost
     *
     * Invite somebody to join the team
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $invitee  (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInviteInviteePost($id, $id2, $invitee, $data = null)
    {
        list($response) = $this->teamMembersIdInviteInviteePostWithHttpInfo($id, $id2, $invitee, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdInviteInviteePostWithHttpInfo
     *
     * Invite somebody to join the team
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $invitee  (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdInviteInviteePostWithHttpInfo($id, $id2, $invitee, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdInviteInviteePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdInviteInviteePost');
        }
        // verify the required parameter 'invitee' is set
        if ($invitee === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitee when calling teamMembersIdInviteInviteePost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/invite/{invitee}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($invitee !== null) {
            $resourcePath = str_replace(
                "{" . "invitee" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitee),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/TeamMembers/{id}/invite/{invitee}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsCountGet
     *
     * Counts notifications of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdNotificationsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsCountGetWithHttpInfo
     *
     * Counts notifications of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/notifications/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsDelete
     *
     * Deletes all notifications of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsDelete($id)
    {
        list($response) = $this->teamMembersIdNotificationsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsDeleteWithHttpInfo
     *
     * Deletes all notifications of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/notifications'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsFkDelete
     *
     * Delete a related item by id for notifications.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for notifications (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdNotificationsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for notifications.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for notifications (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdNotificationsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/notifications/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsFkGet
     *
     * Find a related item by id for notifications.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for notifications (required)
     * @return \Swagger\Client\Model\Notification
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdNotificationsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsFkGetWithHttpInfo
     *
     * Find a related item by id for notifications.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for notifications (required)
     * @return array of \Swagger\Client\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdNotificationsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Notification',
                '/TeamMembers/{id}/notifications/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Notification', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Notification', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsFkPut
     *
     * Update a related item by id for notifications.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for notifications (required)
     * @param \Swagger\Client\Model\Notification $data  (optional)
     * @return \Swagger\Client\Model\Notification
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdNotificationsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsFkPutWithHttpInfo
     *
     * Update a related item by id for notifications.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for notifications (required)
     * @param \Swagger\Client\Model\Notification $data  (optional)
     * @return array of \Swagger\Client\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdNotificationsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Notification',
                '/TeamMembers/{id}/notifications/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Notification', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Notification', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsGet
     *
     * Queries notifications of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Notification[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdNotificationsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsGetWithHttpInfo
     *
     * Queries notifications of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Notification[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Notification[]',
                '/TeamMembers/{id}/notifications'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Notification[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Notification[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdNotificationsPost
     *
     * Creates a new instance in notifications of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Notification $data  (optional)
     * @return \Swagger\Client\Model\Notification
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdNotificationsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdNotificationsPostWithHttpInfo
     *
     * Creates a new instance in notifications of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Notification $data  (optional)
     * @return array of \Swagger\Client\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdNotificationsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdNotificationsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/notifications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Notification',
                '/TeamMembers/{id}/notifications'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Notification', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Notification', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPatch($id, $data = null)
    {
        list($response) = $this->teamMembersIdPatchWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdPatchWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPatchWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPatch');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsAvailableGet
     *
     * Find all available Portals
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Portal[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsAvailableGet($id, $id2, $filter = null)
    {
        list($response) = $this->teamMembersIdPortalsAvailableGetWithHttpInfo($id, $id2, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsAvailableGetWithHttpInfo
     *
     * Find all available Portals
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Portal[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsAvailableGetWithHttpInfo($id, $id2, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsAvailableGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdPortalsAvailableGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/available";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal[]',
                '/TeamMembers/{id}/portals/available'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsCountGet
     *
     * Counts portals of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdPortalsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsCountGetWithHttpInfo
     *
     * Counts portals of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/portals/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsDelete
     *
     * Deletes all portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsDelete($id)
    {
        list($response) = $this->teamMembersIdPortalsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsDeleteWithHttpInfo
     *
     * Deletes all portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/portals'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsFkAvailableGet
     *
     * Find available Portal by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @param string $include Only include changes that match this filter (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkAvailableGet($id, $id2, $fk, $include = null)
    {
        list($response) = $this->teamMembersIdPortalsFkAvailableGetWithHttpInfo($id, $id2, $fk, $include);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsFkAvailableGetWithHttpInfo
     *
     * Find available Portal by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @param string $include Only include changes that match this filter (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkAvailableGetWithHttpInfo($id, $id2, $fk, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsFkAvailableGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdPortalsFkAvailableGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsFkAvailableGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{fk}/available";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/portals/{fk}/available'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsFkDelete
     *
     * Delete a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdPortalsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/portals/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsFkGet
     *
     * Find a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdPortalsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsFkGetWithHttpInfo
     *
     * Find a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/portals/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsFkLogoPut
     *
     * Change Portal logo
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $fk Portal id (required)
     * @param \Swagger\Client\Model\TeamMember $data Logo (required)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkLogoPut($id, $id2, $fk, $data)
    {
        list($response) = $this->teamMembersIdPortalsFkLogoPutWithHttpInfo($id, $id2, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsFkLogoPutWithHttpInfo
     *
     * Change Portal logo
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $fk Portal id (required)
     * @param \Swagger\Client\Model\TeamMember $data Logo (required)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkLogoPutWithHttpInfo($id, $id2, $fk, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsFkLogoPut');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdPortalsFkLogoPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsFkLogoPut');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling teamMembersIdPortalsFkLogoPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{fk}/logo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/portals/{fk}/logo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsFkPut
     *
     * Update a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdPortalsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsFkPutWithHttpInfo
     *
     * Update a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/portals/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsGet
     *
     * Queries portals of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Portal[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdPortalsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsGetWithHttpInfo
     *
     * Queries portals of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Portal[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal[]',
                '/TeamMembers/{id}/portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsNkDesignsFkFlashvarsGet
     *
     * Find Design FlashVars within available Portal by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $nk  (required)
     * @param string $fk  (required)
     * @return \Swagger\Client\Model\FlashVar
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsNkDesignsFkFlashvarsGet($id, $id2, $nk, $fk)
    {
        list($response) = $this->teamMembersIdPortalsNkDesignsFkFlashvarsGetWithHttpInfo($id, $id2, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsNkDesignsFkFlashvarsGetWithHttpInfo
     *
     * Find Design FlashVars within available Portal by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $nk  (required)
     * @param string $fk  (required)
     * @return array of \Swagger\Client\Model\FlashVar, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsNkDesignsFkFlashvarsGetWithHttpInfo($id, $id2, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsNkDesignsFkFlashvarsGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdPortalsNkDesignsFkFlashvarsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamMembersIdPortalsNkDesignsFkFlashvarsGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsNkDesignsFkFlashvarsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{nk}/designs/{fk}/flashvars";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FlashVar',
                '/TeamMembers/{id}/portals/{nk}/designs/{fk}/flashvars'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FlashVar', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FlashVar', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsNkTemplatesFkFlashvarsGet
     *
     * Find Template FlashVars within available Portal by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $nk  (required)
     * @param string $fk  (required)
     * @return \Swagger\Client\Model\FlashVar
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsNkTemplatesFkFlashvarsGet($id, $id2, $nk, $fk)
    {
        list($response) = $this->teamMembersIdPortalsNkTemplatesFkFlashvarsGetWithHttpInfo($id, $id2, $nk, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsNkTemplatesFkFlashvarsGetWithHttpInfo
     *
     * Find Template FlashVars within available Portal by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $nk  (required)
     * @param string $fk  (required)
     * @return array of \Swagger\Client\Model\FlashVar, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsNkTemplatesFkFlashvarsGetWithHttpInfo($id, $id2, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsNkTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdPortalsNkTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamMembersIdPortalsNkTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsNkTemplatesFkFlashvarsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/{nk}/templates/{fk}/flashvars";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FlashVar',
                '/TeamMembers/{id}/portals/{nk}/templates/{fk}/flashvars'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FlashVar', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FlashVar', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsPost
     *
     * Creates a new instance in portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdPortalsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsPostWithHttpInfo
     *
     * Creates a new instance in portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsRelFkDelete
     *
     * Remove the portals relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsRelFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdPortalsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsRelFkDeleteWithHttpInfo
     *
     * Remove the portals relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/portals/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsRelFkHead
     *
     * Check the existence of portals relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsRelFkHead($id, $fk)
    {
        list($response) = $this->teamMembersIdPortalsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsRelFkHeadWithHttpInfo
     *
     * Check the existence of portals relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamMembers/{id}/portals/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPortalsRelFkPut
     *
     * Add a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return \Swagger\Client\Model\PortalMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdPortalsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdPortalsRelFkPutWithHttpInfo
     *
     * Add a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return array of \Swagger\Client\Model\PortalMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPortalsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPortalsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdPortalsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/portals/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalMember',
                '/TeamMembers/{id}/portals/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdPut
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdPutWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReplacePost($id, $data = null)
    {
        list($response) = $this->teamMembersIdReplacePostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdReplacePostWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReplacePostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReplacePost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/replace";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}/replace'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsCountGet
     *
     * Counts requestedDesignExports of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsCountGetWithHttpInfo
     *
     * Counts requestedDesignExports of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/requestedDesignExports/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsDelete
     *
     * Deletes all requestedDesignExports of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsDelete($id)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsDeleteWithHttpInfo
     *
     * Deletes all requestedDesignExports of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/requestedDesignExports'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsFkDelete
     *
     * Delete a related item by id for requestedDesignExports.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesignExports (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for requestedDesignExports.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesignExports (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdRequestedDesignExportsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/requestedDesignExports/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsFkGet
     *
     * Find a related item by id for requestedDesignExports.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesignExports (required)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsFkGetWithHttpInfo
     *
     * Find a related item by id for requestedDesignExports.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesignExports (required)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdRequestedDesignExportsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/TeamMembers/{id}/requestedDesignExports/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsFkPut
     *
     * Update a related item by id for requestedDesignExports.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesignExports (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsFkPutWithHttpInfo
     *
     * Update a related item by id for requestedDesignExports.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesignExports (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdRequestedDesignExportsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/TeamMembers/{id}/requestedDesignExports/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsGet
     *
     * Queries requestedDesignExports of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignExport[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsGetWithHttpInfo
     *
     * Queries requestedDesignExports of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignExport[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport[]',
                '/TeamMembers/{id}/requestedDesignExports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsPost
     *
     * Creates a new instance in requestedDesignExports of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignExportsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignExportsPostWithHttpInfo
     *
     * Creates a new instance in requestedDesignExports of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignExportsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignExportsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesignExports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/TeamMembers/{id}/requestedDesignExports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsCountGet
     *
     * Counts requestedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsCountGetWithHttpInfo
     *
     * Counts requestedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/requestedDesigns/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsDelete
     *
     * Deletes all requestedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsDelete($id)
    {
        list($response) = $this->teamMembersIdRequestedDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsDeleteWithHttpInfo
     *
     * Deletes all requestedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/requestedDesigns'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsFkDelete
     *
     * Delete a related item by id for requestedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdRequestedDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for requestedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdRequestedDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/requestedDesigns/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsFkGet
     *
     * Find a related item by id for requestedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesigns (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdRequestedDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for requestedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesigns (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdRequestedDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/requestedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsFkPut
     *
     * Update a related item by id for requestedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for requestedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for requestedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdRequestedDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/requestedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsGet
     *
     * Queries requestedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsGetWithHttpInfo
     *
     * Queries requestedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/TeamMembers/{id}/requestedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdRequestedDesignsPost
     *
     * Creates a new instance in requestedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdRequestedDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdRequestedDesignsPostWithHttpInfo
     *
     * Creates a new instance in requestedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdRequestedDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdRequestedDesignsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/requestedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/requestedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsCountGet
     *
     * Counts reviewedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdReviewedDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsCountGetWithHttpInfo
     *
     * Counts reviewedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/reviewedDesigns/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsDelete
     *
     * Deletes all reviewedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsDelete($id)
    {
        list($response) = $this->teamMembersIdReviewedDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsDeleteWithHttpInfo
     *
     * Deletes all reviewedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/reviewedDesigns'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsFkDelete
     *
     * Delete a related item by id for reviewedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for reviewedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdReviewedDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for reviewedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for reviewedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdReviewedDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/reviewedDesigns/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsFkGet
     *
     * Find a related item by id for reviewedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for reviewedDesigns (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdReviewedDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for reviewedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for reviewedDesigns (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdReviewedDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/reviewedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsFkPut
     *
     * Update a related item by id for reviewedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for reviewedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdReviewedDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for reviewedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for reviewedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdReviewedDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/reviewedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsGet
     *
     * Queries reviewedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdReviewedDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsGetWithHttpInfo
     *
     * Queries reviewedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/TeamMembers/{id}/reviewedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdReviewedDesignsPost
     *
     * Creates a new instance in reviewedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdReviewedDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdReviewedDesignsPostWithHttpInfo
     *
     * Creates a new instance in reviewedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdReviewedDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdReviewedDesignsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/reviewedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/reviewedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsCountGet
     *
     * Counts sharedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdSharedDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsCountGetWithHttpInfo
     *
     * Counts sharedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/sharedDesigns/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsDelete
     *
     * Deletes all sharedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsDelete($id)
    {
        list($response) = $this->teamMembersIdSharedDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsDeleteWithHttpInfo
     *
     * Deletes all sharedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/sharedDesigns'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsFkDelete
     *
     * Delete a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdSharedDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdSharedDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/sharedDesigns/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsFkGet
     *
     * Find a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdSharedDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdSharedDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/sharedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsFkPut
     *
     * Update a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdSharedDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdSharedDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/sharedDesigns/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsGet
     *
     * Queries sharedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdSharedDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsGetWithHttpInfo
     *
     * Queries sharedDesigns of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/TeamMembers/{id}/sharedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsPost
     *
     * Creates a new instance in sharedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdSharedDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsPostWithHttpInfo
     *
     * Creates a new instance in sharedDesigns of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/TeamMembers/{id}/sharedDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsRelFkDelete
     *
     * Remove the sharedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsRelFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdSharedDesignsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsRelFkDeleteWithHttpInfo
     *
     * Remove the sharedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdSharedDesignsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/sharedDesigns/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsRelFkHead
     *
     * Check the existence of sharedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsRelFkHead($id, $fk)
    {
        list($response) = $this->teamMembersIdSharedDesignsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsRelFkHeadWithHttpInfo
     *
     * Check the existence of sharedDesigns relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdSharedDesignsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamMembers/{id}/sharedDesigns/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdSharedDesignsRelFkPut
     *
     * Add a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdSharedDesignsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdSharedDesignsRelFkPutWithHttpInfo
     *
     * Add a related item by id for sharedDesigns.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for sharedDesigns (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdSharedDesignsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdSharedDesignsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdSharedDesignsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/sharedDesigns/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/TeamMembers/{id}/sharedDesigns/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTargetModelTargetIdInviteInviteePost
     *
     * Invite somebody to join a team, portal or other targets
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $targetModel  (required)
     * @param string $targetId  (required)
     * @param string $invitee  (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTargetModelTargetIdInviteInviteePost($id, $id2, $targetModel, $targetId, $invitee, $data = null)
    {
        list($response) = $this->teamMembersIdTargetModelTargetIdInviteInviteePostWithHttpInfo($id, $id2, $targetModel, $targetId, $invitee, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTargetModelTargetIdInviteInviteePostWithHttpInfo
     *
     * Invite somebody to join a team, portal or other targets
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $targetModel  (required)
     * @param string $targetId  (required)
     * @param string $invitee  (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTargetModelTargetIdInviteInviteePostWithHttpInfo($id, $id2, $targetModel, $targetId, $invitee, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTargetModelTargetIdInviteInviteePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTargetModelTargetIdInviteInviteePost');
        }
        // verify the required parameter 'targetModel' is set
        if ($targetModel === null) {
            throw new \InvalidArgumentException('Missing the required parameter $targetModel when calling teamMembersIdTargetModelTargetIdInviteInviteePost');
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $targetId when calling teamMembersIdTargetModelTargetIdInviteInviteePost');
        }
        // verify the required parameter 'invitee' is set
        if ($invitee === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitee when calling teamMembersIdTargetModelTargetIdInviteInviteePost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/{targetModel}/{targetId}/invite/{invitee}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($targetModel !== null) {
            $resourcePath = str_replace(
                "{" . "targetModel" . "}",
                $this->apiClient->getSerializer()->toPathValue($targetModel),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                "{" . "targetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($targetId),
                $resourcePath
            );
        }
        // path params
        if ($invitee !== null) {
            $resourcePath = str_replace(
                "{" . "invitee" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitee),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/TeamMembers/{id}/{targetModel}/{targetId}/invite/{invitee}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTargetModelTargetIdInvitePost
     *
     * Invite a group of people to join a team, portal or other targets
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $targetModel  (required)
     * @param string $targetId  (required)
     * @param object[] $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTargetModelTargetIdInvitePost($id, $id2, $targetModel, $targetId, $data = null)
    {
        list($response) = $this->teamMembersIdTargetModelTargetIdInvitePostWithHttpInfo($id, $id2, $targetModel, $targetId, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTargetModelTargetIdInvitePostWithHttpInfo
     *
     * Invite a group of people to join a team, portal or other targets
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $targetModel  (required)
     * @param string $targetId  (required)
     * @param object[] $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTargetModelTargetIdInvitePostWithHttpInfo($id, $id2, $targetModel, $targetId, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTargetModelTargetIdInvitePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTargetModelTargetIdInvitePost');
        }
        // verify the required parameter 'targetModel' is set
        if ($targetModel === null) {
            throw new \InvalidArgumentException('Missing the required parameter $targetModel when calling teamMembersIdTargetModelTargetIdInvitePost');
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $targetId when calling teamMembersIdTargetModelTargetIdInvitePost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/{targetModel}/{targetId}/invite";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($targetModel !== null) {
            $resourcePath = str_replace(
                "{" . "targetModel" . "}",
                $this->apiClient->getSerializer()->toPathValue($targetModel),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                "{" . "targetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($targetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket[]',
                '/TeamMembers/{id}/{targetModel}/{targetId}/invite'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingAvailablePlansGet
     *
     * Get Available Plans
     *
     * @param string $id TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\BillingPlan[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingAvailablePlansGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamBillingAvailablePlansGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingAvailablePlansGetWithHttpInfo
     *
     * Get Available Plans
     *
     * @param string $id TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\BillingPlan[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingAvailablePlansGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingAvailablePlansGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/availablePlans";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BillingPlan[]',
                '/TeamMembers/{id}/team/billing/availablePlans'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BillingPlan[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BillingPlan[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingCachedGet
     *
     * Get Cached version of Team Billing
     *
     * @param string $id TeamMember id (required)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCachedGet($id)
    {
        list($response) = $this->teamMembersIdTeamBillingCachedGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingCachedGetWithHttpInfo
     *
     * Get Cached version of Team Billing
     *
     * @param string $id TeamMember id (required)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCachedGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingCachedGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/cached";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing/cached'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingCardDelete
     *
     * Delete Team Billing Card
     *
     * @param string $id TeamMember id (required)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCardDelete($id)
    {
        list($response) = $this->teamMembersIdTeamBillingCardDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingCardDeleteWithHttpInfo
     *
     * Delete Team Billing Card
     *
     * @param string $id TeamMember id (required)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCardDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingCardDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing/card'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingCardPost
     *
     * Create Team Billing Card
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCardPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBillingCardPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingCardPostWithHttpInfo
     *
     * Create Team Billing Card
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCardPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingCardPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing/card'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingCardPut
     *
     * Update Team Billing Card
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCardPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBillingCardPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingCardPutWithHttpInfo
     *
     * Update Team Billing Card
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingCardPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingCardPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing/card'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingInvoicesFkPost
     *
     * Pay Team Billing Invoice
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Billing Invoice id (required)
     * @return \Swagger\Client\Model\BillingInvoice
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingInvoicesFkPost($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamBillingInvoicesFkPostWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingInvoicesFkPostWithHttpInfo
     *
     * Pay Team Billing Invoice
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Billing Invoice id (required)
     * @return array of \Swagger\Client\Model\BillingInvoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingInvoicesFkPostWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingInvoicesFkPost');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamBillingInvoicesFkPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/invoices/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BillingInvoice',
                '/TeamMembers/{id}/team/billing/invoices/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BillingInvoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BillingInvoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingInvoicesGet
     *
     * List Team Billing Invoices
     *
     * @param string $id TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\BillingInvoice[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingInvoicesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamBillingInvoicesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingInvoicesGetWithHttpInfo
     *
     * List Team Billing Invoices
     *
     * @param string $id TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\BillingInvoice[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingInvoicesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingInvoicesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/invoices";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BillingInvoice[]',
                '/TeamMembers/{id}/team/billing/invoices'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BillingInvoice[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BillingInvoice[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingInvoicesUpcomingGet
     *
     * List Upcoming Team Billing Invoices
     *
     * @param string $id TeamMember id (required)
     * @return \Swagger\Client\Model\BillingInvoice
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingInvoicesUpcomingGet($id)
    {
        list($response) = $this->teamMembersIdTeamBillingInvoicesUpcomingGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingInvoicesUpcomingGetWithHttpInfo
     *
     * List Upcoming Team Billing Invoices
     *
     * @param string $id TeamMember id (required)
     * @return array of \Swagger\Client\Model\BillingInvoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingInvoicesUpcomingGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingInvoicesUpcomingGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/invoices/upcoming";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BillingInvoice',
                '/TeamMembers/{id}/team/billing/invoices/upcoming'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BillingInvoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BillingInvoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingPut
     *
     * Update Team Billing
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBillingPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingPutWithHttpInfo
     *
     * Update Team Billing
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingSubscriptionPlanPut
     *
     * Update Team Billing Subscription Plan
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingSubscriptionPlanPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBillingSubscriptionPlanPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingSubscriptionPlanPutWithHttpInfo
     *
     * Update Team Billing Subscription Plan
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingSubscriptionPlanPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingSubscriptionPlanPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/subscription/plan";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing/subscription/plan'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingTaxEvidenceGet
     *
     * Get Team Billing Tax Evidence
     *
     * @param string $id TeamMember id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingTaxEvidenceGet($id)
    {
        list($response) = $this->teamMembersIdTeamBillingTaxEvidenceGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingTaxEvidenceGetWithHttpInfo
     *
     * Get Team Billing Tax Evidence
     *
     * @param string $id TeamMember id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingTaxEvidenceGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingTaxEvidenceGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/taxEvidence";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/TeamMembers/{id}/team/billing/taxEvidence'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBillingUncachedGet
     *
     * Get Team Billing
     *
     * @param string $id TeamMember id (required)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingUncachedGet($id)
    {
        list($response) = $this->teamMembersIdTeamBillingUncachedGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBillingUncachedGetWithHttpInfo
     *
     * Get Team Billing
     *
     * @param string $id TeamMember id (required)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBillingUncachedGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBillingUncachedGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/billing/uncached";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/TeamMembers/{id}/team/billing/uncached'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBrandDelete
     *
     * Deletes brand of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandDelete($id)
    {
        list($response) = $this->teamMembersIdTeamBrandDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBrandDeleteWithHttpInfo
     *
     * Deletes brand of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBrandDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/brand'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBrandGet
     *
     * Fetches hasOne relation brand.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamBrand
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandGet($id, $refresh = null)
    {
        list($response) = $this->teamMembersIdTeamBrandGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBrandGetWithHttpInfo
     *
     * Fetches hasOne relation brand.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamBrand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBrandGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBrand',
                '/TeamMembers/{id}/team/brand'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBrand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBrand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBrandPost
     *
     * Creates a new instance in brand of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return \Swagger\Client\Model\TeamBrand
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBrandPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBrandPostWithHttpInfo
     *
     * Creates a new instance in brand of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBrand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBrandPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBrand',
                '/TeamMembers/{id}/team/brand'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBrand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBrand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBrandPut
     *
     * Update brand of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return \Swagger\Client\Model\TeamBrand
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBrandPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBrandPutWithHttpInfo
     *
     * Update brand of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBrand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBrandPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBrandPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBrand',
                '/TeamMembers/{id}/team/brand'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBrand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBrand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsCountGet
     *
     * Counts builderConfigs of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsCountGetWithHttpInfo
     *
     * Counts builderConfigs of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/builderConfigs/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsDefaultGet
     *
     * Get default Team Builder Config
     *
     * @param string $id TeamMember id (required)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsDefaultGet($id)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsDefaultGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsDefaultGetWithHttpInfo
     *
     * Get default Team Builder Config
     *
     * @param string $id TeamMember id (required)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsDefaultGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsDefaultGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/default";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamMembers/{id}/team/builderConfigs/default'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsDelete
     *
     * Deletes all builderConfigs of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsDelete($id)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsDeleteWithHttpInfo
     *
     * Deletes all builderConfigs of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/builderConfigs'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkDelete
     *
     * Delete a related item by id for builderConfigs.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for builderConfigs (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for builderConfigs.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for builderConfigs (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamBuilderConfigsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/builderConfigs/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkGet
     *
     * Find a related item by id for builderConfigs.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for builderConfigs (required)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkGetWithHttpInfo
     *
     * Find a related item by id for builderConfigs.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for builderConfigs (required)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamBuilderConfigsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamMembers/{id}/team/builderConfigs/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkLogoPut
     *
     * Change Builder Config logo
     *
     * @param string $id TeamMember id (required)
     * @param string $fk BuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamMember $data Logo (required)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkLogoPut($id, $fk, $data)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsFkLogoPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkLogoPutWithHttpInfo
     *
     * Change Builder Config logo
     *
     * @param string $id TeamMember id (required)
     * @param string $fk BuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamMember $data Logo (required)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkLogoPutWithHttpInfo($id, $fk, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsFkLogoPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamBuilderConfigsFkLogoPut');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling teamMembersIdTeamBuilderConfigsFkLogoPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/{fk}/logo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamMembers/{id}/team/builderConfigs/{fk}/logo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkPut
     *
     * Update a related item by id for builderConfigs.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for builderConfigs (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkPutWithHttpInfo
     *
     * Update a related item by id for builderConfigs.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for builderConfigs (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamBuilderConfigsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamMembers/{id}/team/builderConfigs/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkWatermarkPut
     *
     * Change Builder Config watermark
     *
     * @param string $id TeamMember id (required)
     * @param string $fk BuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamMember $data Watermark (required)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkWatermarkPut($id, $fk, $data)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsFkWatermarkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsFkWatermarkPutWithHttpInfo
     *
     * Change Builder Config watermark
     *
     * @param string $id TeamMember id (required)
     * @param string $fk BuilderConfig id (required)
     * @param \Swagger\Client\Model\TeamMember $data Watermark (required)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsFkWatermarkPutWithHttpInfo($id, $fk, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsFkWatermarkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamBuilderConfigsFkWatermarkPut');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling teamMembersIdTeamBuilderConfigsFkWatermarkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs/{fk}/watermark";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamMembers/{id}/team/builderConfigs/{fk}/watermark'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsGet
     *
     * Queries builderConfigs of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsGetWithHttpInfo
     *
     * Queries builderConfigs of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig[]',
                '/TeamMembers/{id}/team/builderConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsPost
     *
     * Creates a new instance in builderConfigs of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data  (optional)
     * @return \Swagger\Client\Model\TeamBuilderConfig
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamBuilderConfigsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamBuilderConfigsPostWithHttpInfo
     *
     * Creates a new instance in builderConfigs of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamBuilderConfig $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBuilderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamBuilderConfigsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamBuilderConfigsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/builderConfigs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBuilderConfig',
                '/TeamMembers/{id}/team/builderConfigs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBuilderConfig', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBuilderConfig', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataRecordGet
     *
     * Get TeamData Record
     *
     * @param string $id TeamMember id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataRecordGet($id)
    {
        list($response) = $this->teamMembersIdTeamDataRecordGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataRecordGetWithHttpInfo
     *
     * Get TeamData Record
     *
     * @param string $id TeamMember id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataRecordGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataRecordGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/teamData/record";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/TeamMembers/{id}/teamData/record'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataRecordPost
     *
     * Create TeamData Record
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataRecordPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamDataRecordPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataRecordPostWithHttpInfo
     *
     * Create TeamData Record
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataRecordPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataRecordPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/teamData/record";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/TeamMembers/{id}/teamData/record'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataRecordPut
     *
     * Update TeamData Record
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataRecordPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamDataRecordPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataRecordPutWithHttpInfo
     *
     * Update TeamData Record
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataRecordPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataRecordPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/teamData/record";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/TeamMembers/{id}/teamData/record'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesCountGet
     *
     * Counts dataSources of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesCountGetWithHttpInfo
     *
     * Counts dataSources of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/dataSources/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesDelete
     *
     * Deletes all dataSources of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesDelete($id)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesDeleteWithHttpInfo
     *
     * Deletes all dataSources of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/dataSources'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesFkDelete
     *
     * Delete a related item by id for dataSources.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for dataSources.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamDataSourcesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/dataSources/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesFkGet
     *
     * Find a related item by id for dataSources.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return \Swagger\Client\Model\DataSource
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesFkGetWithHttpInfo
     *
     * Find a related item by id for dataSources.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return array of \Swagger\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamDataSourcesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource',
                '/TeamMembers/{id}/team/dataSources/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesFkPut
     *
     * Update a related item by id for dataSources.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dataSources (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return \Swagger\Client\Model\DataSource
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesFkPutWithHttpInfo
     *
     * Update a related item by id for dataSources.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dataSources (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return array of \Swagger\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamDataSourcesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource',
                '/TeamMembers/{id}/team/dataSources/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesGet
     *
     * Queries dataSources of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DataSource[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesGetWithHttpInfo
     *
     * Queries dataSources of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DataSource[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource[]',
                '/TeamMembers/{id}/team/dataSources'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDataSourcesPost
     *
     * Creates a new instance in dataSources of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return \Swagger\Client\Model\DataSource
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamDataSourcesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDataSourcesPostWithHttpInfo
     *
     * Creates a new instance in dataSources of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return array of \Swagger\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDataSourcesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDataSourcesPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dataSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource',
                '/TeamMembers/{id}/team/dataSources'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasCountGet
     *
     * Counts dynamicDatas of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasCountGetWithHttpInfo
     *
     * Counts dynamicDatas of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/dynamicDatas/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasDelete
     *
     * Deletes all dynamicDatas of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasDelete($id)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasDeleteWithHttpInfo
     *
     * Deletes all dynamicDatas of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/dynamicDatas'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasFkDelete
     *
     * Delete a related item by id for dynamicDatas.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dynamicDatas (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasFkDeleteWithHttpInfo
     *
     * Delete a related item by id for dynamicDatas.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dynamicDatas (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamDynamicDatasFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/dynamicDatas/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasFkGet
     *
     * Find a related item by id for dynamicDatas.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dynamicDatas (required)
     * @return \Swagger\Client\Model\DynamicData
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasFkGetWithHttpInfo
     *
     * Find a related item by id for dynamicDatas.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dynamicDatas (required)
     * @return array of \Swagger\Client\Model\DynamicData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamDynamicDatasFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DynamicData',
                '/TeamMembers/{id}/team/dynamicDatas/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DynamicData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DynamicData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasFkPut
     *
     * Update a related item by id for dynamicDatas.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dynamicDatas (required)
     * @param \Swagger\Client\Model\DynamicData $data  (optional)
     * @return \Swagger\Client\Model\DynamicData
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasFkPutWithHttpInfo
     *
     * Update a related item by id for dynamicDatas.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for dynamicDatas (required)
     * @param \Swagger\Client\Model\DynamicData $data  (optional)
     * @return array of \Swagger\Client\Model\DynamicData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamDynamicDatasFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DynamicData',
                '/TeamMembers/{id}/team/dynamicDatas/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DynamicData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DynamicData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasGet
     *
     * Queries dynamicDatas of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DynamicData[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasGetWithHttpInfo
     *
     * Queries dynamicDatas of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DynamicData[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DynamicData[]',
                '/TeamMembers/{id}/team/dynamicDatas'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DynamicData[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DynamicData[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasPost
     *
     * Creates a new instance in dynamicDatas of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DynamicData $data  (optional)
     * @return \Swagger\Client\Model\DynamicData
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamDynamicDatasPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamDynamicDatasPostWithHttpInfo
     *
     * Creates a new instance in dynamicDatas of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\DynamicData $data  (optional)
     * @return array of \Swagger\Client\Model\DynamicData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamDynamicDatasPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamDynamicDatasPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/dynamicDatas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DynamicData',
                '/TeamMembers/{id}/team/dynamicDatas'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DynamicData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DynamicData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamGet
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamGet($id, $refresh = null)
    {
        list($response) = $this->teamMembersIdTeamGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamGetWithHttpInfo
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/TeamMembers/{id}/team'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersCountGet
     *
     * Counts imageFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersCountGetWithHttpInfo
     *
     * Counts imageFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/imageFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersDelete
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersDelete($id)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersDeleteWithHttpInfo
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/imageFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersFkDelete
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamImageFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/imageFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersFkGet
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamImageFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/TeamMembers/{id}/team/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersFkPut
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamImageFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/TeamMembers/{id}/team/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersGet
     *
     * Queries imageFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ImageFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersGetWithHttpInfo
     *
     * Queries imageFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder[]',
                '/TeamMembers/{id}/team/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImageFoldersPost
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamImageFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImageFoldersPostWithHttpInfo
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImageFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImageFoldersPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/TeamMembers/{id}/team/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesCountGet
     *
     * Counts images of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamImagesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesCountGetWithHttpInfo
     *
     * Counts images of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/images/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesDelete
     *
     * Deletes all images of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesDelete($id)
    {
        list($response) = $this->teamMembersIdTeamImagesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesDeleteWithHttpInfo
     *
     * Deletes all images of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/images'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesFkDelete
     *
     * Delete a related item by id for images.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for images (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamImagesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for images.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for images (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamImagesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/images/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesFkGet
     *
     * Find a related item by id for images.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for images (required)
     * @return \Swagger\Client\Model\Image
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamImagesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesFkGetWithHttpInfo
     *
     * Find a related item by id for images.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for images (required)
     * @return array of \Swagger\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamImagesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image',
                '/TeamMembers/{id}/team/images/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesFkPut
     *
     * Update a related item by id for images.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for images (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return \Swagger\Client\Model\Image
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamImagesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesFkPutWithHttpInfo
     *
     * Update a related item by id for images.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for images (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return array of \Swagger\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamImagesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image',
                '/TeamMembers/{id}/team/images/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesGet
     *
     * Queries images of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Image[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamImagesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesGetWithHttpInfo
     *
     * Queries images of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Image[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image[]',
                '/TeamMembers/{id}/team/images'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamImagesPost
     *
     * Creates a new instance in images of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return \Swagger\Client\Model\Image
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamImagesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamImagesPostWithHttpInfo
     *
     * Creates a new instance in images of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return array of \Swagger\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamImagesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamImagesPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/images";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image',
                '/TeamMembers/{id}/team/images'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamLogoPut
     *
     * Change Team logo
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data Logo (required)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamLogoPut($id, $id2, $data)
    {
        list($response) = $this->teamMembersIdTeamLogoPutWithHttpInfo($id, $id2, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamLogoPutWithHttpInfo
     *
     * Change Team logo
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data Logo (required)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamLogoPutWithHttpInfo($id, $id2, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamLogoPut');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTeamLogoPut');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling teamMembersIdTeamLogoPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/logo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/TeamMembers/{id}/team/logo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersCountGet
     *
     * Counts members of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamMembersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersCountGetWithHttpInfo
     *
     * Counts members of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/members/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersDelete
     *
     * Deletes all members of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersDelete($id)
    {
        list($response) = $this->teamMembersIdTeamMembersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersDeleteWithHttpInfo
     *
     * Deletes all members of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/members'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersFkDelete
     *
     * Delete a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamMembersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/members/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersFkGet
     *
     * Find a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamMembersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersFkGetWithHttpInfo
     *
     * Find a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/TeamMembers/{id}/team/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersFkPut
     *
     * Update a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamMembersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersFkPutWithHttpInfo
     *
     * Update a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/TeamMembers/{id}/team/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersGet
     *
     * Queries members of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Customer[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamMembersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersGetWithHttpInfo
     *
     * Queries members of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Customer[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer[]',
                '/TeamMembers/{id}/team/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersPost
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamMembersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersPostWithHttpInfo
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/TeamMembers/{id}/team/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersRelFkDelete
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersRelFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamMembersRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersRelFkDeleteWithHttpInfo
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamMembersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/members/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersRelFkHead
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersRelFkHead($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamMembersRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersRelFkHeadWithHttpInfo
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamMembersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamMembers/{id}/team/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamMembersRelFkPut
     *
     * Add a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamMembersRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamMembersRelFkPutWithHttpInfo
     *
     * Add a related item by id for members.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamMembersRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamMembersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamMembersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}/team/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPermissionDelete
     *
     * Deletes permission of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionDelete($id)
    {
        list($response) = $this->teamMembersIdTeamPermissionDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPermissionDeleteWithHttpInfo
     *
     * Deletes permission of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPermissionDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/permission'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPermissionGet
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionGet($id, $refresh = null)
    {
        list($response) = $this->teamMembersIdTeamPermissionGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPermissionGetWithHttpInfo
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPermissionGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPermissionSet',
                '/TeamMembers/{id}/team/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPermissionPost
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\TeamPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamPermissionPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPermissionPostWithHttpInfo
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\TeamPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPermissionPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPermissionSet',
                '/TeamMembers/{id}/team/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPermissionPut
     *
     * Update permission of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\TeamPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionPut($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamPermissionPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPermissionPutWithHttpInfo
     *
     * Update permission of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\TeamPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPermissionPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPermissionPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPermissionSet',
                '/TeamMembers/{id}/team/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsCountGet
     *
     * Counts portals of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamPortalsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsCountGetWithHttpInfo
     *
     * Counts portals of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/portals/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsDelete
     *
     * Deletes all portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsDelete($id)
    {
        list($response) = $this->teamMembersIdTeamPortalsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsDeleteWithHttpInfo
     *
     * Deletes all portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/portals'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsFkDelete
     *
     * Delete a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamPortalsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamPortalsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/portals/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsFkGet
     *
     * Find a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamPortalsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsFkGetWithHttpInfo
     *
     * Find a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamPortalsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/team/portals/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsFkPut
     *
     * Update a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamPortalsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsFkPutWithHttpInfo
     *
     * Update a related item by id for portals.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamPortalsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/team/portals/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsGet
     *
     * Queries portals of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Portal[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamPortalsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsGetWithHttpInfo
     *
     * Queries portals of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Portal[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal[]',
                '/TeamMembers/{id}/team/portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamPortalsPost
     *
     * Creates a new instance in portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamPortalsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamPortalsPostWithHttpInfo
     *
     * Creates a new instance in portals of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamPortalsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamPortalsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/TeamMembers/{id}/team/portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsCountGet
     *
     * Counts productMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsCountGetWithHttpInfo
     *
     * Counts productMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/productMaterials/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsDelete
     *
     * Deletes all productMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsDelete($id)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsDeleteWithHttpInfo
     *
     * Deletes all productMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/productMaterials'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsFkDelete
     *
     * Delete a related item by id for productMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productMaterials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for productMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productMaterials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamProductMaterialsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/productMaterials/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsFkGet
     *
     * Find a related item by id for productMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productMaterials (required)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsFkGetWithHttpInfo
     *
     * Find a related item by id for productMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productMaterials (required)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamProductMaterialsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamMembers/{id}/team/productMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsFkPut
     *
     * Update a related item by id for productMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productMaterials (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsFkPutWithHttpInfo
     *
     * Update a related item by id for productMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productMaterials (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamProductMaterialsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamMembers/{id}/team/productMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsGet
     *
     * Queries productMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductMaterial[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsGetWithHttpInfo
     *
     * Queries productMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial[]',
                '/TeamMembers/{id}/team/productMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsPost
     *
     * Creates a new instance in productMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamProductMaterialsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductMaterialsPostWithHttpInfo
     *
     * Creates a new instance in productMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ProductMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductMaterialsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductMaterialsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductMaterial',
                '/TeamMembers/{id}/team/productMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsCountGet
     *
     * Counts productSizeMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsCountGetWithHttpInfo
     *
     * Counts productSizeMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/productSizeMaterials/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsDelete
     *
     * Deletes all productSizeMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsDelete($id)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsDeleteWithHttpInfo
     *
     * Deletes all productSizeMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/productSizeMaterials'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsFkDelete
     *
     * Delete a related item by id for productSizeMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for productSizeMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamProductSizeMaterialsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/productSizeMaterials/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsFkGet
     *
     * Find a related item by id for productSizeMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsFkGetWithHttpInfo
     *
     * Find a related item by id for productSizeMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamProductSizeMaterialsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamMembers/{id}/team/productSizeMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsFkPut
     *
     * Update a related item by id for productSizeMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsFkPutWithHttpInfo
     *
     * Update a related item by id for productSizeMaterials.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for productSizeMaterials (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamProductSizeMaterialsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamMembers/{id}/team/productSizeMaterials/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsGet
     *
     * Queries productSizeMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsGetWithHttpInfo
     *
     * Queries productSizeMaterials of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial[]',
                '/TeamMembers/{id}/team/productSizeMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsPost
     *
     * Creates a new instance in productSizeMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return \Swagger\Client\Model\ProductSizeMaterial
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamProductSizeMaterialsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamProductSizeMaterialsPostWithHttpInfo
     *
     * Creates a new instance in productSizeMaterials of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\ProductSizeMaterial $data  (optional)
     * @return array of \Swagger\Client\Model\ProductSizeMaterial, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamProductSizeMaterialsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamProductSizeMaterialsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/productSizeMaterials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSizeMaterial',
                '/TeamMembers/{id}/team/productSizeMaterials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSizeMaterial', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSizeMaterial', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamDataGet
     *
     * Fetches belongsTo relation teamData.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DynamicData
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamDataGet($id, $refresh = null)
    {
        list($response) = $this->teamMembersIdTeamTeamDataGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamDataGetWithHttpInfo
     *
     * Fetches belongsTo relation teamData.
     *
     * @param string $id TeamMember id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DynamicData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamDataGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamDataGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamData";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DynamicData',
                '/TeamMembers/{id}/team/teamData'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DynamicData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DynamicData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersCountGet
     *
     * Counts teamMembers of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersCountGetWithHttpInfo
     *
     * Counts teamMembers of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/teamMembers/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersDelete
     *
     * Deletes all teamMembers of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersDelete($id)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersDeleteWithHttpInfo
     *
     * Deletes all teamMembers of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/teamMembers'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersFkDelete
     *
     * Delete a related item by id for teamMembers.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for teamMembers.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTeamMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/teamMembers/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersFkGet
     *
     * Find a related item by id for teamMembers.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersFkGetWithHttpInfo
     *
     * Find a related item by id for teamMembers.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTeamMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}/team/teamMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersFkPut
     *
     * Update a related item by id for teamMembers.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersFkPutWithHttpInfo
     *
     * Update a related item by id for teamMembers.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTeamMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}/team/teamMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersGet
     *
     * Queries teamMembers of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersGetWithHttpInfo
     *
     * Queries teamMembers of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/TeamMembers/{id}/team/teamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTeamMembersPost
     *
     * Creates a new instance in teamMembers of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamTeamMembersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTeamMembersPostWithHttpInfo
     *
     * Creates a new instance in teamMembers of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTeamMembersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTeamMembersPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/teamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/{id}/team/teamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersCountGet
     *
     * Counts templateFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersCountGetWithHttpInfo
     *
     * Counts templateFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/templateFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersDelete
     *
     * Deletes all templateFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersDelete($id)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersDeleteWithHttpInfo
     *
     * Deletes all templateFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/templateFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersFkDelete
     *
     * Delete a related item by id for templateFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templateFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplateFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/templateFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersFkGet
     *
     * Find a related item by id for templateFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for templateFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplateFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/TeamMembers/{id}/team/templateFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersFkPut
     *
     * Update a related item by id for templateFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for templateFolders.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplateFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/TeamMembers/{id}/team/templateFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersGet
     *
     * Queries templateFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersGetWithHttpInfo
     *
     * Queries templateFolders of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder[]',
                '/TeamMembers/{id}/team/templateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersPost
     *
     * Creates a new instance in templateFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamTemplateFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplateFoldersPostWithHttpInfo
     *
     * Creates a new instance in templateFolders of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplateFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplateFoldersPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/TeamMembers/{id}/team/templateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesCountGet
     *
     * Counts templates of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamTemplatesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesCountGetWithHttpInfo
     *
     * Counts templates of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/templates/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesDelete
     *
     * Deletes all templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesDelete($id)
    {
        list($response) = $this->teamMembersIdTeamTemplatesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesDeleteWithHttpInfo
     *
     * Deletes all templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/templates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkDelete
     *
     * Delete a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTemplatesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplatesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/templates/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkGet
     *
     * Find a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTemplatesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkGetWithHttpInfo
     *
     * Find a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/team/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkPut
     *
     * Update a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamTemplatesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkPutWithHttpInfo
     *
     * Update a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplatesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/team/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkUrlReviewGet
     *
     * Get URL to review a Team Template
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Template id (required)
     * @return string
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkUrlReviewGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamTemplatesFkUrlReviewGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesFkUrlReviewGetWithHttpInfo
     *
     * Get URL to review a Team Template
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Template id (required)
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesFkUrlReviewGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesFkUrlReviewGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamTemplatesFkUrlReviewGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates/{fk}/url/review";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/TeamMembers/{id}/team/templates/{fk}/url/review'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesGet
     *
     * Queries templates of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamTemplatesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesGetWithHttpInfo
     *
     * Queries templates of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/TeamMembers/{id}/team/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesPost
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamTemplatesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesPostWithHttpInfo
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/team/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamTemplatesWithDesignsGet
     *
     * List Templates with Designs for the Team of TeamMember
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesWithDesignsGet($id, $id2, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamTemplatesWithDesignsGetWithHttpInfo($id, $id2, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamTemplatesWithDesignsGetWithHttpInfo
     *
     * List Templates with Designs for the Team of TeamMember
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamTemplatesWithDesignsGetWithHttpInfo($id, $id2, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamTemplatesWithDesignsGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTeamTemplatesWithDesignsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/templatesWithDesigns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/TeamMembers/{id}/team/templatesWithDesigns'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsCountGet
     *
     * Counts workflows of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsCountGetWithHttpInfo
     *
     * Counts workflows of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/team/workflows/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsDelete
     *
     * Deletes all workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsDelete($id)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsDeleteWithHttpInfo
     *
     * Deletes all workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/workflows'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsFkDelete
     *
     * Delete a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamWorkflowsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/team/workflows/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsFkGet
     *
     * Find a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsFkGetWithHttpInfo
     *
     * Find a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamWorkflowsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/TeamMembers/{id}/team/workflows/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsFkPut
     *
     * Update a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsFkPutWithHttpInfo
     *
     * Update a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTeamWorkflowsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/TeamMembers/{id}/team/workflows/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsGet
     *
     * Queries workflows of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Workflow[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsGetWithHttpInfo
     *
     * Queries workflows of Team.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Workflow[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow[]',
                '/TeamMembers/{id}/team/workflows'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTeamWorkflowsPost
     *
     * Creates a new instance in workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTeamWorkflowsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTeamWorkflowsPostWithHttpInfo
     *
     * Creates a new instance in workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTeamWorkflowsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTeamWorkflowsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/team/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/TeamMembers/{id}/team/workflows'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesCountGet
     *
     * Counts templates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdTemplatesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesCountGetWithHttpInfo
     *
     * Counts templates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/templates/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesDelete
     *
     * Deletes all templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesDelete($id)
    {
        list($response) = $this->teamMembersIdTemplatesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesDeleteWithHttpInfo
     *
     * Deletes all templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/templates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesFkDelete
     *
     * Delete a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTemplatesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/templates/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesFkFlashvarsGet
     *
     * Find Template FlashVars by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @return \Swagger\Client\Model\FlashVar
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkFlashvarsGet($id, $id2, $fk)
    {
        list($response) = $this->teamMembersIdTemplatesFkFlashvarsGetWithHttpInfo($id, $id2, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesFkFlashvarsGetWithHttpInfo
     *
     * Find Template FlashVars by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @return array of \Swagger\Client\Model\FlashVar, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkFlashvarsGetWithHttpInfo($id, $id2, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesFkFlashvarsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/{fk}/flashvars";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FlashVar',
                '/TeamMembers/{id}/templates/{fk}/flashvars'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FlashVar', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FlashVar', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesFkGet
     *
     * Find a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdTemplatesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesFkGetWithHttpInfo
     *
     * Find a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesFkPut
     *
     * Update a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTemplatesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesFkPutWithHttpInfo
     *
     * Update a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesGet
     *
     * Queries templates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdTemplatesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesGetWithHttpInfo
     *
     * Queries templates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/TeamMembers/{id}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesPost
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdTemplatesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesPostWithHttpInfo
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesRelFkDelete
     *
     * Remove the templates relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesRelFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdTemplatesRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesRelFkDeleteWithHttpInfo
     *
     * Remove the templates relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/templates/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesRelFkHead
     *
     * Check the existence of templates relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesRelFkHead($id, $fk)
    {
        list($response) = $this->teamMembersIdTemplatesRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesRelFkHeadWithHttpInfo
     *
     * Check the existence of templates relation to an item by id.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesRelFkHead');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/TeamMembers/{id}/templates/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTemplatesRelFkPut
     *
     * Add a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\TemplateMember $data  (optional)
     * @return \Swagger\Client\Model\TemplateMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdTemplatesRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdTemplatesRelFkPutWithHttpInfo
     *
     * Add a related item by id for templates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\TemplateMember $data  (optional)
     * @return array of \Swagger\Client\Model\TemplateMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTemplatesRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTemplatesRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTemplatesRelFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/templates/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TemplateMember',
                '/TeamMembers/{id}/templates/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TemplateMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TemplateMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersGet
     *
     * List Tweak Templates Folders
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersGet($id, $id2, $filter = null)
    {
        list($response) = $this->teamMembersIdTweakTemplateFoldersGetWithHttpInfo($id, $id2, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersGetWithHttpInfo
     *
     * List Tweak Templates Folders
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersGetWithHttpInfo($id, $id2, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplateFoldersGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplateFoldersGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder[]',
                '/TeamMembers/{id}/tweakTemplateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersNkGet
     *
     * Get Tweak Templates Folders details
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $nk TemplateFolder id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersNkGet($id, $id2, $nk, $filter = null)
    {
        list($response) = $this->teamMembersIdTweakTemplateFoldersNkGetWithHttpInfo($id, $id2, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersNkGetWithHttpInfo
     *
     * Get Tweak Templates Folders details
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $nk TemplateFolder id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersNkGetWithHttpInfo($id, $id2, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplateFoldersNkGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplateFoldersNkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamMembersIdTweakTemplateFoldersNkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplateFolders/{nk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/TeamMembers/{id}/tweakTemplateFolders/{nk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersNkTemplatesFkGet
     *
     * Get Tweak Template details within a Tweak Template Folder
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $nk TemplateFolder id (required)
     * @param string $fk Template id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersNkTemplatesFkGet($id, $id2, $nk, $fk, $filter = null)
    {
        list($response) = $this->teamMembersIdTweakTemplateFoldersNkTemplatesFkGetWithHttpInfo($id, $id2, $nk, $fk, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersNkTemplatesFkGetWithHttpInfo
     *
     * Get Tweak Template details within a Tweak Template Folder
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $nk TemplateFolder id (required)
     * @param string $fk Template id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersNkTemplatesFkGetWithHttpInfo($id, $id2, $nk, $fk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplateFoldersNkTemplatesFkGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplateFoldersNkTemplatesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamMembersIdTweakTemplateFoldersNkTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTweakTemplateFoldersNkTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplateFolders/{nk}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/tweakTemplateFolders/{nk}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersNkTemplatesGet
     *
     * List Tweak Templates within a Tweak Template Folder
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $nk TemplateFolder id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersNkTemplatesGet($id, $id2, $nk, $filter = null)
    {
        list($response) = $this->teamMembersIdTweakTemplateFoldersNkTemplatesGetWithHttpInfo($id, $id2, $nk, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplateFoldersNkTemplatesGetWithHttpInfo
     *
     * List Tweak Templates within a Tweak Template Folder
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $nk TemplateFolder id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplateFoldersNkTemplatesGetWithHttpInfo($id, $id2, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplateFoldersNkTemplatesGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplateFoldersNkTemplatesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling teamMembersIdTweakTemplateFoldersNkTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplateFolders/{nk}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/TeamMembers/{id}/tweakTemplateFolders/{nk}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplatesFkFlashvarsGet
     *
     * Find Template FlashVars by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @return \Swagger\Client\Model\FlashVar
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplatesFkFlashvarsGet($id, $id2, $fk)
    {
        list($response) = $this->teamMembersIdTweakTemplatesFkFlashvarsGetWithHttpInfo($id, $id2, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplatesFkFlashvarsGetWithHttpInfo
     *
     * Find Template FlashVars by id
     *
     * @param string $id TeamMember id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @return array of \Swagger\Client\Model\FlashVar, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplatesFkFlashvarsGetWithHttpInfo($id, $id2, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplatesFkFlashvarsGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTweakTemplatesFkFlashvarsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplates/{fk}/flashvars";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FlashVar',
                '/TeamMembers/{id}/tweakTemplates/{fk}/flashvars'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FlashVar', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FlashVar', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplatesFkGet
     *
     * Get Tweak Template details
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $fk Template id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplatesFkGet($id, $id2, $fk, $filter = null)
    {
        list($response) = $this->teamMembersIdTweakTemplatesFkGetWithHttpInfo($id, $id2, $fk, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplatesFkGetWithHttpInfo
     *
     * Get Tweak Template details
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $fk Template id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplatesFkGetWithHttpInfo($id, $id2, $fk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplatesFkGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdTweakTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/tweakTemplates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdTweakTemplatesGet
     *
     * List Tweak Templates
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplatesGet($id, $id2, $filter = null)
    {
        list($response) = $this->teamMembersIdTweakTemplatesGetWithHttpInfo($id, $id2, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdTweakTemplatesGetWithHttpInfo
     *
     * List Tweak Templates
     *
     * @param string $id TeamMember id (required)
     * @param string $id2 TeamMember id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdTweakTemplatesGetWithHttpInfo($id, $id2, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdTweakTemplatesGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling teamMembersIdTweakTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/tweakTemplates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/TeamMembers/{id}/tweakTemplates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesCountGet
     *
     * Counts uploadedTemplates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesCountGetWithHttpInfo
     *
     * Counts uploadedTemplates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/uploadedTemplates/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesDelete
     *
     * Deletes all uploadedTemplates of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesDelete($id)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesDeleteWithHttpInfo
     *
     * Deletes all uploadedTemplates of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/uploadedTemplates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesFkDelete
     *
     * Delete a related item by id for uploadedTemplates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for uploadedTemplates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for uploadedTemplates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for uploadedTemplates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdUploadedTemplatesFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/uploadedTemplates/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesFkGet
     *
     * Find a related item by id for uploadedTemplates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for uploadedTemplates (required)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesFkGetWithHttpInfo
     *
     * Find a related item by id for uploadedTemplates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for uploadedTemplates (required)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdUploadedTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/uploadedTemplates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesFkPut
     *
     * Update a related item by id for uploadedTemplates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for uploadedTemplates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesFkPutWithHttpInfo
     *
     * Update a related item by id for uploadedTemplates.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for uploadedTemplates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdUploadedTemplatesFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/uploadedTemplates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesGet
     *
     * Queries uploadedTemplates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesGetWithHttpInfo
     *
     * Queries uploadedTemplates of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/TeamMembers/{id}/uploadedTemplates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdUploadedTemplatesPost
     *
     * Creates a new instance in uploadedTemplates of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdUploadedTemplatesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdUploadedTemplatesPostWithHttpInfo
     *
     * Creates a new instance in uploadedTemplates of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdUploadedTemplatesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdUploadedTemplatesPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/uploadedTemplates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/TeamMembers/{id}/uploadedTemplates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsCountGet
     *
     * Counts workflows of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsCountGet($id, $where = null)
    {
        list($response) = $this->teamMembersIdWorkflowsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsCountGetWithHttpInfo
     *
     * Counts workflows of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsCountGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/TeamMembers/{id}/workflows/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsDelete
     *
     * Deletes all workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsDelete($id)
    {
        list($response) = $this->teamMembersIdWorkflowsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsDeleteWithHttpInfo
     *
     * Deletes all workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/workflows'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsFkDelete
     *
     * Delete a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsFkDelete($id, $fk)
    {
        list($response) = $this->teamMembersIdWorkflowsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdWorkflowsFkDelete');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/TeamMembers/{id}/workflows/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsFkGet
     *
     * Find a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsFkGet($id, $fk)
    {
        list($response) = $this->teamMembersIdWorkflowsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsFkGetWithHttpInfo
     *
     * Find a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdWorkflowsFkGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/TeamMembers/{id}/workflows/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsFkPut
     *
     * Update a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->teamMembersIdWorkflowsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsFkPutWithHttpInfo
     *
     * Update a related item by id for workflows.
     *
     * @param string $id TeamMember id (required)
     * @param string $fk Foreign key for workflows (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling teamMembersIdWorkflowsFkPut');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/TeamMembers/{id}/workflows/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsGet
     *
     * Queries workflows of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Workflow[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsGet($id, $filter = null)
    {
        list($response) = $this->teamMembersIdWorkflowsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsGetWithHttpInfo
     *
     * Queries workflows of TeamMember.
     *
     * @param string $id TeamMember id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Workflow[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsGet');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow[]',
                '/TeamMembers/{id}/workflows'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersIdWorkflowsPost
     *
     * Creates a new instance in workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsPost($id, $data = null)
    {
        list($response) = $this->teamMembersIdWorkflowsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation teamMembersIdWorkflowsPostWithHttpInfo
     *
     * Creates a new instance in workflows of this model.
     *
     * @param string $id TeamMember id (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersIdWorkflowsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling teamMembersIdWorkflowsPost');
        }
        // parse inputs
        $resourcePath = "/TeamMembers/{id}/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/TeamMembers/{id}/workflows'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersPatch
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersPatch($data = null)
    {
        list($response) = $this->teamMembersPatchWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamMembersPatchWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersPatchWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersPost
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersPost($data = null)
    {
        list($response) = $this->teamMembersPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamMembersPostWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersPut
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersPut($data = null)
    {
        list($response) = $this->teamMembersPutWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamMembersPutWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersPutWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersReplaceOrCreatePost($data = null)
    {
        list($response) = $this->teamMembersReplaceOrCreatePostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation teamMembersReplaceOrCreatePostWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\TeamMember $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersReplaceOrCreatePostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/replaceOrCreate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/replaceOrCreate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamMember $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersUpdatePost($where = null, $data = null)
    {
        list($response) = $this->teamMembersUpdatePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation teamMembersUpdatePostWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamMember $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersUpdatePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/TeamMembers/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamMember $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersUpsertWithWherePost($where = null, $data = null)
    {
        list($response) = $this->teamMembersUpsertWithWherePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation teamMembersUpsertWithWherePostWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\TeamMember $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function teamMembersUpsertWithWherePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/TeamMembers/upsertWithWhere";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/TeamMembers/upsertWithWhere'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
