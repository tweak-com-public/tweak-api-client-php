<?php
/**
 * PortalApi
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-beta.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * PortalApi Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortalApi
{

    /**
     * API Client
     *
     * @var \Tweak\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Tweak\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Tweak\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apistagecdn.tweak.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Tweak\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Tweak\Api\ApiClient $apiClient set the API client
     *
     * @return PortalApi
     */
    public function setApiClient(\Tweak\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation portalsChangeStreamGet
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsChangeStreamGet($options = null)
    {
        list($response) = $this->portalsChangeStreamGetWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation portalsChangeStreamGetWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsChangeStreamGetWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Portals/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Portals/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsChangeStreamPost
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsChangeStreamPost($options = null)
    {
        list($response) = $this->portalsChangeStreamPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation portalsChangeStreamPostWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsChangeStreamPostWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Portals/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Portals/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsCountGet
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsCountGet($where = null)
    {
        list($response) = $this->portalsCountGetWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation portalsCountGetWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsCountGetWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/Portals/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsFindOneGet($filter = null)
    {
        list($response) = $this->portalsFindOneGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation portalsFindOneGetWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsFindOneGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Portals/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsGet
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Portal[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsGet($filter = null)
    {
        list($response) = $this->portalsGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation portalsGetWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Portal[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal[]',
                '/Portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDelete
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDelete($id)
    {
        list($response) = $this->portalsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdDeleteWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Portals/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersCountGet
     *
     * Counts designFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdDesignFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersCountGetWithHttpInfo
     *
     * Counts designFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersDelete
     *
     * Deletes all designFolders of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersDelete($id)
    {
        list($response) = $this->portalsIdDesignFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersDeleteWithHttpInfo
     *
     * Deletes all designFolders of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersFkDelete
     *
     * Delete a related item by id for designFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdDesignFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersFkGet
     *
     * Find a related item by id for designFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersFkGet($id, $fk)
    {
        list($response) = $this->portalsIdDesignFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for designFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/Portals/{id}/designFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersFkPut
     *
     * Update a related item by id for designFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for designFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designFolders (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/Portals/{id}/designFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersGet
     *
     * Queries designFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersGet($id, $filter = null)
    {
        list($response) = $this->portalsIdDesignFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersGetWithHttpInfo
     *
     * Queries designFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder[]',
                '/Portals/{id}/designFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignFoldersPost
     *
     * Creates a new instance in designFolders of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersPost($id, $data = null)
    {
        list($response) = $this->portalsIdDesignFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignFoldersPostWithHttpInfo
     *
     * Creates a new instance in designFolders of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\DesignFolder $data  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignFoldersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/Portals/{id}/designFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsCountGet
     *
     * Counts designs of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsCountGetWithHttpInfo
     *
     * Counts designs of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsDelete
     *
     * Deletes all designs of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsDelete($id)
    {
        list($response) = $this->portalsIdDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdDesignsDeleteWithHttpInfo
     *
     * Deletes all designs of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsFkDelete
     *
     * Delete a related item by id for designs.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designs (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designs.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designs (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsFkGet
     *
     * Find a related item by id for designs.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designs (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsFkGet($id, $fk)
    {
        list($response) = $this->portalsIdDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for designs.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designs (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Portals/{id}/designs/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsFkPut
     *
     * Update a related item by id for designs.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designs (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for designs.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for designs (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Portals/{id}/designs/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsGet
     *
     * Queries designs of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsGet($id, $filter = null)
    {
        list($response) = $this->portalsIdDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsGetWithHttpInfo
     *
     * Queries designs of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/Portals/{id}/designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkAssigneeGet
     *
     * Fetches belongsTo relation assignee.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkAssigneeGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkAssigneeGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkAssigneeGetWithHttpInfo
     *
     * Fetches belongsTo relation assignee.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkAssigneeGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkAssigneeGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkAssigneeGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/assignee";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/assignee'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersCountGet
     *
     * Counts commenters of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersCountGetWithHttpInfo
     *
     * Counts commenters of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/{nk}/commenters/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersDelete
     *
     * Deletes all commenters of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkCommentersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersDeleteWithHttpInfo
     *
     * Deletes all commenters of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/commenters'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersFkDelete
     *
     * Delete a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkCommentersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/commenters/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersFkGet
     *
     * Find a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersFkGet($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkCommentersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersFkGetWithHttpInfo
     *
     * Find a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/commenters/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersFkPut
     *
     * Update a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersFkPutWithHttpInfo
     *
     * Update a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/commenters/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersGet
     *
     * Queries commenters of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersGet($id, $nk, $filter = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersGetWithHttpInfo
     *
     * Queries commenters of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/Portals/{id}/designs/{nk}/commenters'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersPost
     *
     * Creates a new instance in commenters of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersPostWithHttpInfo
     *
     * Creates a new instance in commenters of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/commenters'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersRelFkDelete
     *
     * Remove the commenters relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersRelFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkCommentersRelFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersRelFkDeleteWithHttpInfo
     *
     * Remove the commenters relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersRelFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersRelFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/commenters/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersRelFkHead
     *
     * Check the existence of commenters relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersRelFkHead($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkCommentersRelFkHeadWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersRelFkHeadWithHttpInfo
     *
     * Check the existence of commenters relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersRelFkHeadWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersRelFkHead');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Portals/{id}/designs/{nk}/commenters/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentersRelFkPut
     *
     * Add a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersRelFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentersRelFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentersRelFkPutWithHttpInfo
     *
     * Add a related item by id for commenters.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for commenters (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentersRelFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentersRelFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Portals/{id}/designs/{nk}/commenters/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsCountGet
     *
     * Counts comments of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsCountGetWithHttpInfo
     *
     * Counts comments of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/{nk}/comments/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsDelete
     *
     * Deletes all comments of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkCommentsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsDeleteWithHttpInfo
     *
     * Deletes all comments of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/comments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsFkDelete
     *
     * Delete a related item by id for comments.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for comments (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkCommentsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for comments.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for comments (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/comments/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsFkGet
     *
     * Find a related item by id for comments.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for comments (required)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsFkGet($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkCommentsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsFkGetWithHttpInfo
     *
     * Find a related item by id for comments.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for comments (required)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentsFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Portals/{id}/designs/{nk}/comments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsFkPut
     *
     * Update a related item by id for comments.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for comments (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsFkPutWithHttpInfo
     *
     * Update a related item by id for comments.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for comments (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkCommentsFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Portals/{id}/designs/{nk}/comments/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsGet
     *
     * Queries comments of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignComment[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsGet($id, $nk, $filter = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsGetWithHttpInfo
     *
     * Queries comments of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignComment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment[]',
                '/Portals/{id}/designs/{nk}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkCommentsPost
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkCommentsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkCommentsPostWithHttpInfo
     *
     * Creates a new instance in comments of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignComment $data  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkCommentsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkCommentsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkCommentsPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Portals/{id}/designs/{nk}/comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersCountGet
     *
     * Counts designMembers of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersCountGetWithHttpInfo
     *
     * Counts designMembers of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/{nk}/designMembers/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersDelete
     *
     * Deletes all designMembers of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersDeleteWithHttpInfo
     *
     * Deletes all designMembers of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/designMembers'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersFkDelete
     *
     * Delete a related item by id for designMembers.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for designMembers (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designMembers.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for designMembers (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkDesignMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/designMembers/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersFkGet
     *
     * Find a related item by id for designMembers.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for designMembers (required)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersFkGet($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersFkGetWithHttpInfo
     *
     * Find a related item by id for designMembers.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for designMembers (required)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkDesignMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/Portals/{id}/designs/{nk}/designMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersFkPut
     *
     * Update a related item by id for designMembers.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for designMembers (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersFkPutWithHttpInfo
     *
     * Update a related item by id for designMembers.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for designMembers (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkDesignMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/Portals/{id}/designs/{nk}/designMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersGet
     *
     * Queries designMembers of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersGet($id, $nk, $filter = null)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersGetWithHttpInfo
     *
     * Queries designMembers of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember[]',
                '/Portals/{id}/designs/{nk}/designMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersPost
     *
     * Creates a new instance in designMembers of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkDesignMembersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDesignMembersPostWithHttpInfo
     *
     * Creates a new instance in designMembers of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDesignMembersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDesignMembersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDesignMembersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/designMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/Portals/{id}/designs/{nk}/designMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkDynamicDataGet
     *
     * Fetches belongsTo relation dynamicData.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DynamicData
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDynamicDataGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkDynamicDataGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkDynamicDataGetWithHttpInfo
     *
     * Fetches belongsTo relation dynamicData.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DynamicData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkDynamicDataGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkDynamicDataGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkDynamicDataGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/dynamicData";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DynamicData',
                '/Portals/{id}/designs/{nk}/dynamicData'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DynamicData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DynamicData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsCountGet
     *
     * Counts exports of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->portalsIdDesignsNkExportsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsCountGetWithHttpInfo
     *
     * Counts exports of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/{nk}/exports/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsDelete
     *
     * Deletes all exports of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkExportsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsDeleteWithHttpInfo
     *
     * Deletes all exports of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/exports'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsFkDelete
     *
     * Delete a related item by id for exports.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for exports (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkExportsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for exports.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for exports (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkExportsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/exports/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsFkGet
     *
     * Find a related item by id for exports.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for exports (required)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsFkGet($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkExportsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsFkGetWithHttpInfo
     *
     * Find a related item by id for exports.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for exports (required)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkExportsFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/Portals/{id}/designs/{nk}/exports/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsFkPut
     *
     * Update a related item by id for exports.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for exports (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkExportsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsFkPutWithHttpInfo
     *
     * Update a related item by id for exports.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for exports (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkExportsFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/Portals/{id}/designs/{nk}/exports/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsGet
     *
     * Queries exports of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DesignExport[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsGet($id, $nk, $filter = null)
    {
        list($response) = $this->portalsIdDesignsNkExportsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsGetWithHttpInfo
     *
     * Queries exports of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DesignExport[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport[]',
                '/Portals/{id}/designs/{nk}/exports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkExportsPost
     *
     * Creates a new instance in exports of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return \Swagger\Client\Model\DesignExport
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkExportsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkExportsPostWithHttpInfo
     *
     * Creates a new instance in exports of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignExport $data  (optional)
     * @return array of \Swagger\Client\Model\DesignExport, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkExportsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkExportsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkExportsPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/exports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignExport',
                '/Portals/{id}/designs/{nk}/exports'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignExport', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignExport', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkFolderGet
     *
     * Fetches belongsTo relation folder.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DesignFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkFolderGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkFolderGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkFolderGetWithHttpInfo
     *
     * Fetches belongsTo relation folder.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DesignFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkFolderGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkFolderGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkFolderGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/folder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignFolder',
                '/Portals/{id}/designs/{nk}/folder'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersCountGet
     *
     * Counts members of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->portalsIdDesignsNkMembersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersCountGetWithHttpInfo
     *
     * Counts members of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/{nk}/members/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersDelete
     *
     * Deletes all members of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkMembersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersDeleteWithHttpInfo
     *
     * Deletes all members of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/members'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersFkDelete
     *
     * Delete a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkMembersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/members/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersFkGet
     *
     * Find a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersFkGet($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkMembersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersFkGetWithHttpInfo
     *
     * Find a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersFkPut
     *
     * Update a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkMembersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersFkPutWithHttpInfo
     *
     * Update a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersGet
     *
     * Queries members of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersGet($id, $nk, $filter = null)
    {
        list($response) = $this->portalsIdDesignsNkMembersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersGetWithHttpInfo
     *
     * Queries members of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/Portals/{id}/designs/{nk}/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersPost
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkMembersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersPostWithHttpInfo
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersRelFkDelete
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersRelFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkMembersRelFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersRelFkDeleteWithHttpInfo
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersRelFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersRelFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkMembersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/members/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersRelFkHead
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersRelFkHead($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkMembersRelFkHeadWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersRelFkHeadWithHttpInfo
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersRelFkHeadWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersRelFkHead');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkMembersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Portals/{id}/designs/{nk}/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkMembersRelFkPut
     *
     * Add a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return \Swagger\Client\Model\DesignMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersRelFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkMembersRelFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkMembersRelFkPutWithHttpInfo
     *
     * Add a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\DesignMember $data  (optional)
     * @return array of \Swagger\Client\Model\DesignMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkMembersRelFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkMembersRelFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkMembersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkMembersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignMember',
                '/Portals/{id}/designs/{nk}/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkPermissionDelete
     *
     * Deletes permission of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkPermissionDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkPermissionDeleteWithHttpInfo
     *
     * Deletes permission of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkPermissionDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkPermissionDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/permission'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkPermissionGet
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DesignPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkPermissionGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkPermissionGetWithHttpInfo
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DesignPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkPermissionGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkPermissionGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignPermissionSet',
                '/Portals/{id}/designs/{nk}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkPermissionPost
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\DesignPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkPermissionPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkPermissionPostWithHttpInfo
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\DesignPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkPermissionPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkPermissionPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignPermissionSet',
                '/Portals/{id}/designs/{nk}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkPermissionPut
     *
     * Update permission of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\DesignPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionPut($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkPermissionPutWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkPermissionPutWithHttpInfo
     *
     * Update permission of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\DesignPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\DesignPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPermissionPutWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkPermissionPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkPermissionPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignPermissionSet',
                '/Portals/{id}/designs/{nk}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkPortalGet
     *
     * Fetches belongsTo relation portal.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPortalGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkPortalGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkPortalGetWithHttpInfo
     *
     * Fetches belongsTo relation portal.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkPortalGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkPortalGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkPortalGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/portal";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/{id}/designs/{nk}/portal'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkRejectionCommentGet
     *
     * Fetches belongsTo relation rejectionComment.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\DesignComment
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkRejectionCommentGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkRejectionCommentGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkRejectionCommentGetWithHttpInfo
     *
     * Fetches belongsTo relation rejectionComment.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\DesignComment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkRejectionCommentGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkRejectionCommentGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkRejectionCommentGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/rejectionComment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignComment',
                '/Portals/{id}/designs/{nk}/rejectionComment'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignComment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignComment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkRequesterGet
     *
     * Fetches belongsTo relation requester.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkRequesterGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkRequesterGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkRequesterGetWithHttpInfo
     *
     * Fetches belongsTo relation requester.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkRequesterGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkRequesterGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkRequesterGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/requester";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/requester'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkReviewerGet
     *
     * Fetches belongsTo relation reviewer.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkReviewerGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkReviewerGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkReviewerGetWithHttpInfo
     *
     * Fetches belongsTo relation reviewer.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkReviewerGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkReviewerGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkReviewerGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/reviewer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/designs/{nk}/reviewer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsCountGet
     *
     * Counts tags of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->portalsIdDesignsNkTagsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsCountGetWithHttpInfo
     *
     * Counts tags of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/designs/{nk}/tags/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsDelete
     *
     * Deletes all tags of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsDelete($id, $nk)
    {
        list($response) = $this->portalsIdDesignsNkTagsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsDeleteWithHttpInfo
     *
     * Deletes all tags of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/tags'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsFkDelete
     *
     * Delete a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkTagsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkTagsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/tags/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsFkGet
     *
     * Find a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return \Swagger\Client\Model\Tag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsFkGet($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkTagsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsFkGetWithHttpInfo
     *
     * Find a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkTagsFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Portals/{id}/designs/{nk}/tags/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsFkPut
     *
     * Update a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return \Swagger\Client\Model\Tag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkTagsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsFkPutWithHttpInfo
     *
     * Update a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkTagsFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Portals/{id}/designs/{nk}/tags/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsGet
     *
     * Queries tags of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Tag[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsGet($id, $nk, $filter = null)
    {
        list($response) = $this->portalsIdDesignsNkTagsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsGetWithHttpInfo
     *
     * Queries tags of Design.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag[]',
                '/Portals/{id}/designs/{nk}/tags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsPost
     *
     * Creates a new instance in tags of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return \Swagger\Client\Model\Tag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsPost($id, $nk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkTagsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsPostWithHttpInfo
     *
     * Creates a new instance in tags of this model.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param \Swagger\Client\Model\Tag $data  (optional)
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Portals/{id}/designs/{nk}/tags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsRelFkDelete
     *
     * Remove the tags relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsRelFkDelete($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkTagsRelFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsRelFkDeleteWithHttpInfo
     *
     * Remove the tags relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsRelFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsRelFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkTagsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/designs/{nk}/tags/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsRelFkHead
     *
     * Check the existence of tags relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsRelFkHead($id, $nk, $fk)
    {
        list($response) = $this->portalsIdDesignsNkTagsRelFkHeadWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsRelFkHeadWithHttpInfo
     *
     * Check the existence of tags relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsRelFkHeadWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsRelFkHead');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkTagsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Portals/{id}/designs/{nk}/tags/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTagsRelFkPut
     *
     * Add a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\DesignTag $data  (optional)
     * @return \Swagger\Client\Model\DesignTag
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsRelFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->portalsIdDesignsNkTagsRelFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTagsRelFkPutWithHttpInfo
     *
     * Add a related item by id for tags.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param string $fk Foreign key for tags (required)
     * @param \Swagger\Client\Model\DesignTag $data  (optional)
     * @return array of \Swagger\Client\Model\DesignTag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTagsRelFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTagsRelFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTagsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdDesignsNkTagsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DesignTag',
                '/Portals/{id}/designs/{nk}/tags/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DesignTag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DesignTag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTeamGet
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTeamGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkTeamGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTeamGetWithHttpInfo
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTeamGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTeamGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTeamGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/team";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/Portals/{id}/designs/{nk}/team'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsNkTemplateGet
     *
     * Fetches belongsTo relation template.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTemplateGet($id, $nk, $refresh = null)
    {
        list($response) = $this->portalsIdDesignsNkTemplateGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdDesignsNkTemplateGetWithHttpInfo
     *
     * Fetches belongsTo relation template.
     *
     * @param string $id Portal id (required)
     * @param string $nk Foreign key for designs. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsNkTemplateGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsNkTemplateGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdDesignsNkTemplateGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs/{nk}/template";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Portals/{id}/designs/{nk}/template'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdDesignsPost
     *
     * Creates a new instance in designs of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsPost($id, $data = null)
    {
        list($response) = $this->portalsIdDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdDesignsPostWithHttpInfo
     *
     * Creates a new instance in designs of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdDesignsPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Portals/{id}/designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdExistsGet
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdExistsGet($id)
    {
        list($response) = $this->portalsIdExistsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdExistsGetWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdExistsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdExistsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Portals/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdGet
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdGet($id, $filter = null)
    {
        list($response) = $this->portalsIdGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdGetWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdHead
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdHead($id)
    {
        list($response) = $this->portalsIdHeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdHeadWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdHeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Portals/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersCountGet
     *
     * Counts imageFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdImageFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersCountGetWithHttpInfo
     *
     * Counts imageFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/imageFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersDelete
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersDelete($id)
    {
        list($response) = $this->portalsIdImageFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersDeleteWithHttpInfo
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/imageFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersFkDelete
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdImageFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdImageFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/imageFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersFkGet
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersFkGet($id, $fk)
    {
        list($response) = $this->portalsIdImageFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdImageFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/Portals/{id}/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersFkPut
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdImageFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdImageFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/Portals/{id}/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersGet
     *
     * Queries imageFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ImageFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersGet($id, $filter = null)
    {
        list($response) = $this->portalsIdImageFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersGetWithHttpInfo
     *
     * Queries imageFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder[]',
                '/Portals/{id}/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersPost
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersPost($id, $data = null)
    {
        list($response) = $this->portalsIdImageFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersPostWithHttpInfo
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/Portals/{id}/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersRelFkDelete
     *
     * Remove the imageFolders relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersRelFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdImageFoldersRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersRelFkDeleteWithHttpInfo
     *
     * Remove the imageFolders relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdImageFoldersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/imageFolders/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersRelFkHead
     *
     * Check the existence of imageFolders relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersRelFkHead($id, $fk)
    {
        list($response) = $this->portalsIdImageFoldersRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersRelFkHeadWithHttpInfo
     *
     * Check the existence of imageFolders relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdImageFoldersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Portals/{id}/imageFolders/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdImageFoldersRelFkPut
     *
     * Add a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\PortalImageFolder $data  (optional)
     * @return \Swagger\Client\Model\PortalImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdImageFoldersRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdImageFoldersRelFkPutWithHttpInfo
     *
     * Add a related item by id for imageFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\PortalImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\PortalImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdImageFoldersRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdImageFoldersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdImageFoldersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/imageFolders/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalImageFolder',
                '/Portals/{id}/imageFolders/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdInvitationTicketsFkDelete
     *
     * Delete InvitationTickets for this Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $fk InvitationTicket id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdInvitationTicketsFkDelete($id, $id2, $fk)
    {
        list($response) = $this->portalsIdInvitationTicketsFkDeleteWithHttpInfo($id, $id2, $fk);
        return $response;
    }

    /**
     * Operation portalsIdInvitationTicketsFkDeleteWithHttpInfo
     *
     * Delete InvitationTickets for this Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $fk InvitationTicket id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdInvitationTicketsFkDeleteWithHttpInfo($id, $id2, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdInvitationTicketsFkDelete');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdInvitationTicketsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdInvitationTicketsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Portals/{id}/invitationTickets/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdInvitationTicketsFkGet
     *
     * Get InvitationTicket by Id for this Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $fk InvitationTicket id (required)
     * @param string $filter Only include changes that match this filter (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdInvitationTicketsFkGet($id, $id2, $fk, $filter = null)
    {
        list($response) = $this->portalsIdInvitationTicketsFkGetWithHttpInfo($id, $id2, $fk, $filter);
        return $response;
    }

    /**
     * Operation portalsIdInvitationTicketsFkGetWithHttpInfo
     *
     * Get InvitationTicket by Id for this Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $fk InvitationTicket id (required)
     * @param string $filter Only include changes that match this filter (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdInvitationTicketsFkGetWithHttpInfo($id, $id2, $fk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdInvitationTicketsFkGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdInvitationTicketsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdInvitationTicketsFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/Portals/{id}/invitationTickets/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdInvitationTicketsGet
     *
     * List InvitationTickets for this Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\InvitationTicket[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdInvitationTicketsGet($id, $id2, $filter = null)
    {
        list($response) = $this->portalsIdInvitationTicketsGetWithHttpInfo($id, $id2, $filter);
        return $response;
    }

    /**
     * Operation portalsIdInvitationTicketsGetWithHttpInfo
     *
     * List InvitationTickets for this Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdInvitationTicketsGetWithHttpInfo($id, $id2, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdInvitationTicketsGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdInvitationTicketsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket[]',
                '/Portals/{id}/invitationTickets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdLogoPut
     *
     * Change logo
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param \Swagger\Client\Model\Portal $data Logo (required)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdLogoPut($id, $id2, $data)
    {
        list($response) = $this->portalsIdLogoPutWithHttpInfo($id, $id2, $data);
        return $response;
    }

    /**
     * Operation portalsIdLogoPutWithHttpInfo
     *
     * Change logo
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param \Swagger\Client\Model\Portal $data Logo (required)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdLogoPutWithHttpInfo($id, $id2, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdLogoPut');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdLogoPut');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling portalsIdLogoPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/logo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/{id}/logo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersCountGet
     *
     * Counts members of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdMembersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdMembersCountGetWithHttpInfo
     *
     * Counts members of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/members/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersDelete
     *
     * Deletes all members of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersDelete($id)
    {
        list($response) = $this->portalsIdMembersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdMembersDeleteWithHttpInfo
     *
     * Deletes all members of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/members'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersFkDelete
     *
     * Delete a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdMembersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/members/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersFkGet
     *
     * Find a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersFkGet($id, $fk)
    {
        list($response) = $this->portalsIdMembersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdMembersFkGetWithHttpInfo
     *
     * Find a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersFkPut
     *
     * Update a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdMembersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdMembersFkPutWithHttpInfo
     *
     * Update a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersGet
     *
     * Queries members of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersGet($id, $filter = null)
    {
        list($response) = $this->portalsIdMembersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdMembersGetWithHttpInfo
     *
     * Queries members of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/Portals/{id}/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersPost
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersPost($id, $data = null)
    {
        list($response) = $this->portalsIdMembersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdMembersPostWithHttpInfo
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Portals/{id}/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersRelFkDelete
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersRelFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdMembersRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdMembersRelFkDeleteWithHttpInfo
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdMembersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/members/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersRelFkHead
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersRelFkHead($id, $fk)
    {
        list($response) = $this->portalsIdMembersRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdMembersRelFkHeadWithHttpInfo
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdMembersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Portals/{id}/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdMembersRelFkPut
     *
     * Add a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return \Swagger\Client\Model\PortalMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdMembersRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdMembersRelFkPutWithHttpInfo
     *
     * Add a related item by id for members.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return array of \Swagger\Client\Model\PortalMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdMembersRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdMembersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdMembersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalMember',
                '/Portals/{id}/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\Portal $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPatch($id, $data = null)
    {
        list($response) = $this->portalsIdPatchWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdPatchWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\Portal $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPatchWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPatch');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPermissionDelete
     *
     * Deletes permission of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionDelete($id)
    {
        list($response) = $this->portalsIdPermissionDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdPermissionDeleteWithHttpInfo
     *
     * Deletes permission of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPermissionDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/permission'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPermissionGet
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Portal id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\PortalPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionGet($id, $refresh = null)
    {
        list($response) = $this->portalsIdPermissionGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdPermissionGetWithHttpInfo
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Portal id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\PortalPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPermissionGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalPermissionSet',
                '/Portals/{id}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPermissionPost
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\PortalPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionPost($id, $data = null)
    {
        list($response) = $this->portalsIdPermissionPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdPermissionPostWithHttpInfo
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\PortalPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPermissionPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalPermissionSet',
                '/Portals/{id}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPermissionPut
     *
     * Update permission of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\PortalPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionPut($id, $data = null)
    {
        list($response) = $this->portalsIdPermissionPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdPermissionPutWithHttpInfo
     *
     * Update permission of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\PortalPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPermissionPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPermissionPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalPermissionSet',
                '/Portals/{id}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersCountGet
     *
     * Counts portalMembers of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdPortalMembersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersCountGetWithHttpInfo
     *
     * Counts portalMembers of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/portalMembers/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersDelete
     *
     * Deletes all portalMembers of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersDelete($id)
    {
        list($response) = $this->portalsIdPortalMembersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersDeleteWithHttpInfo
     *
     * Deletes all portalMembers of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/portalMembers'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersFkDelete
     *
     * Delete a related item by id for portalMembers.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for portalMembers (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdPortalMembersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for portalMembers.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for portalMembers (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdPortalMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/portalMembers/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersFkGet
     *
     * Find a related item by id for portalMembers.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for portalMembers (required)
     * @return \Swagger\Client\Model\PortalMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersFkGet($id, $fk)
    {
        list($response) = $this->portalsIdPortalMembersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersFkGetWithHttpInfo
     *
     * Find a related item by id for portalMembers.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for portalMembers (required)
     * @return array of \Swagger\Client\Model\PortalMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdPortalMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalMember',
                '/Portals/{id}/portalMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersFkPut
     *
     * Update a related item by id for portalMembers.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for portalMembers (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return \Swagger\Client\Model\PortalMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdPortalMembersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersFkPutWithHttpInfo
     *
     * Update a related item by id for portalMembers.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for portalMembers (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return array of \Swagger\Client\Model\PortalMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdPortalMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalMember',
                '/Portals/{id}/portalMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersGet
     *
     * Queries portalMembers of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\PortalMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersGet($id, $filter = null)
    {
        list($response) = $this->portalsIdPortalMembersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersGetWithHttpInfo
     *
     * Queries portalMembers of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\PortalMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalMember[]',
                '/Portals/{id}/portalMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPortalMembersPost
     *
     * Creates a new instance in portalMembers of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return \Swagger\Client\Model\PortalMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersPost($id, $data = null)
    {
        list($response) = $this->portalsIdPortalMembersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdPortalMembersPostWithHttpInfo
     *
     * Creates a new instance in portalMembers of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalMember $data  (optional)
     * @return array of \Swagger\Client\Model\PortalMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPortalMembersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPortalMembersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/portalMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalMember',
                '/Portals/{id}/portalMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPut($id, $data = null)
    {
        list($response) = $this->portalsIdPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdPutWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdReplacePost($id, $data = null)
    {
        list($response) = $this->portalsIdReplacePostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdReplacePostWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdReplacePostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdReplacePost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/replace";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/{id}/replace'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTeamGet
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id Portal id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTeamGet($id, $refresh = null)
    {
        list($response) = $this->portalsIdTeamGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation portalsIdTeamGetWithHttpInfo
     *
     * Fetches belongsTo relation team.
     *
     * @param string $id Portal id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTeamGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTeamGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/team";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/Portals/{id}/team'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersCountGet
     *
     * Counts templateFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdTemplateFoldersCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersCountGetWithHttpInfo
     *
     * Counts templateFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/templateFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersDelete
     *
     * Deletes all templateFolders of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersDelete($id)
    {
        list($response) = $this->portalsIdTemplateFoldersDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersDeleteWithHttpInfo
     *
     * Deletes all templateFolders of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templateFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersFkDelete
     *
     * Delete a related item by id for templateFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdTemplateFoldersFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templateFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templateFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersFkGet
     *
     * Find a related item by id for templateFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return \Swagger\Client\Model\PortalTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersFkGet($id, $fk)
    {
        list($response) = $this->portalsIdTemplateFoldersFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for templateFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return array of \Swagger\Client\Model\PortalTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolder',
                '/Portals/{id}/templateFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersFkPut
     *
     * Update a related item by id for templateFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @param \Swagger\Client\Model\PortalTemplateFolder $data  (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdTemplateFoldersFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for templateFolders.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @param \Swagger\Client\Model\PortalTemplateFolder $data  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolder',
                '/Portals/{id}/templateFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersGet
     *
     * Queries templateFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersGet($id, $filter = null)
    {
        list($response) = $this->portalsIdTemplateFoldersGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersGetWithHttpInfo
     *
     * Queries templateFolders of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolder[]',
                '/Portals/{id}/templateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersNkTemplatesFkRelDelete
     *
     * Unlink folder with Template and Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $nk PortalTemplateFolder id (required)
     * @param string $fk Template id (required)
     * @return \Swagger\Client\Model\PortalTemplate
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersNkTemplatesFkRelDelete($id, $id2, $nk, $fk)
    {
        list($response) = $this->portalsIdTemplateFoldersNkTemplatesFkRelDeleteWithHttpInfo($id, $id2, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersNkTemplatesFkRelDeleteWithHttpInfo
     *
     * Unlink folder with Template and Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $nk PortalTemplateFolder id (required)
     * @param string $fk Template id (required)
     * @return array of \Swagger\Client\Model\PortalTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersNkTemplatesFkRelDeleteWithHttpInfo($id, $id2, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersNkTemplatesFkRelDelete');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdTemplateFoldersNkTemplatesFkRelDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdTemplateFoldersNkTemplatesFkRelDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateFoldersNkTemplatesFkRelDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate',
                '/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersNkTemplatesFkRelPut
     *
     * Link folder with Template and Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $nk PortalTemplateFolder id (required)
     * @param string $fk Template id (required)
     * @return \Swagger\Client\Model\PortalTemplate
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersNkTemplatesFkRelPut($id, $id2, $nk, $fk)
    {
        list($response) = $this->portalsIdTemplateFoldersNkTemplatesFkRelPutWithHttpInfo($id, $id2, $nk, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersNkTemplatesFkRelPutWithHttpInfo
     *
     * Link folder with Template and Portal
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $nk PortalTemplateFolder id (required)
     * @param string $fk Template id (required)
     * @return array of \Swagger\Client\Model\PortalTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersNkTemplatesFkRelPutWithHttpInfo($id, $id2, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersNkTemplatesFkRelPut');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdTemplateFoldersNkTemplatesFkRelPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling portalsIdTemplateFoldersNkTemplatesFkRelPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateFoldersNkTemplatesFkRelPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate',
                '/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersPost
     *
     * Creates a new instance in templateFolders of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolder $data  (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersPost($id, $data = null)
    {
        list($response) = $this->portalsIdTemplateFoldersPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersPostWithHttpInfo
     *
     * Creates a new instance in templateFolders of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolder $data  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolder',
                '/Portals/{id}/templateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateFoldersRootTemplatesGet
     *
     * List templates on root folder
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $filter Only include changes that match this filter (optional)
     * @return \Swagger\Client\Model\PortalTemplate[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersRootTemplatesGet($id, $id2, $filter = null)
    {
        list($response) = $this->portalsIdTemplateFoldersRootTemplatesGetWithHttpInfo($id, $id2, $filter);
        return $response;
    }

    /**
     * Operation portalsIdTemplateFoldersRootTemplatesGetWithHttpInfo
     *
     * List templates on root folder
     *
     * @param string $id Portal id (required)
     * @param string $id2 Portal id (required)
     * @param string $filter Only include changes that match this filter (optional)
     * @return array of \Swagger\Client\Model\PortalTemplate[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateFoldersRootTemplatesGetWithHttpInfo($id, $id2, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateFoldersRootTemplatesGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdTemplateFoldersRootTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateFolders/root/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate[]',
                '/Portals/{id}/templateFolders/root/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsCountGet
     *
     * Counts templateRels of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdTemplateRelsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsCountGetWithHttpInfo
     *
     * Counts templateRels of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/templateRels/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsDelete
     *
     * Deletes all templateRels of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsDelete($id)
    {
        list($response) = $this->portalsIdTemplateRelsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsDeleteWithHttpInfo
     *
     * Deletes all templateRels of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templateRels'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsFkDelete
     *
     * Delete a related item by id for templateRels.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateRels (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdTemplateRelsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templateRels.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateRels (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateRelsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templateRels/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsFkGet
     *
     * Find a related item by id for templateRels.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateRels (required)
     * @return \Swagger\Client\Model\PortalTemplate
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsFkGet($id, $fk)
    {
        list($response) = $this->portalsIdTemplateRelsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsFkGetWithHttpInfo
     *
     * Find a related item by id for templateRels.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateRels (required)
     * @return array of \Swagger\Client\Model\PortalTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateRelsFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate',
                '/Portals/{id}/templateRels/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsFkPut
     *
     * Update a related item by id for templateRels.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateRels (required)
     * @param \Swagger\Client\Model\PortalTemplate $data  (optional)
     * @return \Swagger\Client\Model\PortalTemplate
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdTemplateRelsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsFkPutWithHttpInfo
     *
     * Update a related item by id for templateRels.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templateRels (required)
     * @param \Swagger\Client\Model\PortalTemplate $data  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplateRelsFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate',
                '/Portals/{id}/templateRels/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsGet
     *
     * Queries templateRels of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\PortalTemplate[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsGet($id, $filter = null)
    {
        list($response) = $this->portalsIdTemplateRelsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsGetWithHttpInfo
     *
     * Queries templateRels of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplate[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate[]',
                '/Portals/{id}/templateRels'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplateRelsPost
     *
     * Creates a new instance in templateRels of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalTemplate $data  (optional)
     * @return \Swagger\Client\Model\PortalTemplate
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsPost($id, $data = null)
    {
        list($response) = $this->portalsIdTemplateRelsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplateRelsPostWithHttpInfo
     *
     * Creates a new instance in templateRels of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\PortalTemplate $data  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplateRelsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplateRelsPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templateRels";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate',
                '/Portals/{id}/templateRels'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesCountGet
     *
     * Counts templates of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesCountGet($id, $where = null)
    {
        list($response) = $this->portalsIdTemplatesCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesCountGetWithHttpInfo
     *
     * Counts templates of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesCountGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Portals/{id}/templates/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesDelete
     *
     * Deletes all templates of this model.
     *
     * @param string $id Portal id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesDelete($id)
    {
        list($response) = $this->portalsIdTemplatesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesDeleteWithHttpInfo
     *
     * Deletes all templates of this model.
     *
     * @param string $id Portal id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesFkDelete
     *
     * Delete a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdTemplatesFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templates/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesFkDesignsGenerateBulkPost
     *
     * Generate Design from Template
     *
     * @param string $id Portal id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @param object[] $data  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkDesignsGenerateBulkPost($id, $id2, $fk, $data = null)
    {
        list($response) = $this->portalsIdTemplatesFkDesignsGenerateBulkPostWithHttpInfo($id, $id2, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesFkDesignsGenerateBulkPostWithHttpInfo
     *
     * Generate Design from Template
     *
     * @param string $id Portal id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @param object[] $data  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkDesignsGenerateBulkPostWithHttpInfo($id, $id2, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesFkDesignsGenerateBulkPost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdTemplatesFkDesignsGenerateBulkPost');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesFkDesignsGenerateBulkPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/{fk}/designs/generate/bulk";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/Portals/{id}/templates/{fk}/designs/generate/bulk'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesFkDesignsGeneratePost
     *
     * Generate Design from Template
     *
     * @param string $id Portal id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkDesignsGeneratePost($id, $id2, $fk, $data = null)
    {
        list($response) = $this->portalsIdTemplatesFkDesignsGeneratePostWithHttpInfo($id, $id2, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesFkDesignsGeneratePostWithHttpInfo
     *
     * Generate Design from Template
     *
     * @param string $id Portal id (required)
     * @param string $id2  (required)
     * @param string $fk  (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkDesignsGeneratePostWithHttpInfo($id, $id2, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesFkDesignsGeneratePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling portalsIdTemplatesFkDesignsGeneratePost');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesFkDesignsGeneratePost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/{fk}/designs/generate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Portals/{id}/templates/{fk}/designs/generate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesFkGet
     *
     * Find a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkGet($id, $fk)
    {
        list($response) = $this->portalsIdTemplatesFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesFkGetWithHttpInfo
     *
     * Find a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Portals/{id}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesFkPut
     *
     * Update a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdTemplatesFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesFkPutWithHttpInfo
     *
     * Update a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Portals/{id}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesGet
     *
     * Queries templates of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesGet($id, $filter = null)
    {
        list($response) = $this->portalsIdTemplatesGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesGetWithHttpInfo
     *
     * Queries templates of Portal.
     *
     * @param string $id Portal id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/Portals/{id}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesPost
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesPost($id, $data = null)
    {
        list($response) = $this->portalsIdTemplatesPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesPostWithHttpInfo
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id Portal id (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesPost');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Portals/{id}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesRelFkDelete
     *
     * Remove the templates relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesRelFkDelete($id, $fk)
    {
        list($response) = $this->portalsIdTemplatesRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesRelFkDeleteWithHttpInfo
     *
     * Remove the templates relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Portals/{id}/templates/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesRelFkHead
     *
     * Check the existence of templates relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesRelFkHead($id, $fk)
    {
        list($response) = $this->portalsIdTemplatesRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesRelFkHeadWithHttpInfo
     *
     * Check the existence of templates relation to an item by id.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Portals/{id}/templates/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsIdTemplatesRelFkPut
     *
     * Add a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\PortalTemplate $data  (optional)
     * @return \Swagger\Client\Model\PortalTemplate
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->portalsIdTemplatesRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation portalsIdTemplatesRelFkPutWithHttpInfo
     *
     * Add a related item by id for templates.
     *
     * @param string $id Portal id (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\PortalTemplate $data  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsIdTemplatesRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalsIdTemplatesRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling portalsIdTemplatesRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Portals/{id}/templates/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplate',
                '/Portals/{id}/templates/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsPatch
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsPatch($data = null)
    {
        list($response) = $this->portalsPatchWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalsPatchWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsPatchWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsPost
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsPost($data = null)
    {
        list($response) = $this->portalsPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalsPostWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsPut
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsPut($data = null)
    {
        list($response) = $this->portalsPutWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalsPutWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsPutWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsReplaceOrCreatePost($data = null)
    {
        list($response) = $this->portalsReplaceOrCreatePostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalsReplaceOrCreatePostWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Portal $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsReplaceOrCreatePostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Portals/replaceOrCreate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/replaceOrCreate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Portal $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsUpdatePost($where = null, $data = null)
    {
        list($response) = $this->portalsUpdatePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation portalsUpdatePostWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Portal $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsUpdatePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Portals/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/Portals/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Portal $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsUpsertWithWherePost($where = null, $data = null)
    {
        list($response) = $this->portalsUpsertWithWherePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation portalsUpsertWithWherePostWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Portal $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalsUpsertWithWherePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Portals/upsertWithWhere";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Portals/upsertWithWhere'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
