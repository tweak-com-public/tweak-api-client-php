<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.2-alpha.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{

    /**
     * API Client
     *
     * @var \Tweak\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Tweak\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Tweak\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apidevcdn.tweak.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Tweak\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Tweak\Api\ApiClient $apiClient set the API client
     *
     * @return CustomerApi
     */
    public function setApiClient(\Tweak\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation customersChangePasswordPost
     *
     * Change a user's password.
     *
     * @param string $oldPassword  (required)
     * @param string $newPassword  (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersChangePasswordPost($oldPassword, $newPassword)
    {
        list($response) = $this->customersChangePasswordPostWithHttpInfo($oldPassword, $newPassword);
        return $response;
    }

    /**
     * Operation customersChangePasswordPostWithHttpInfo
     *
     * Change a user's password.
     *
     * @param string $oldPassword  (required)
     * @param string $newPassword  (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersChangePasswordPostWithHttpInfo($oldPassword, $newPassword)
    {
        // verify the required parameter 'oldPassword' is set
        if ($oldPassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldPassword when calling customersChangePasswordPost');
        }
        // verify the required parameter 'newPassword' is set
        if ($newPassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newPassword when calling customersChangePasswordPost');
        }
        // parse inputs
        $resourcePath = "/Customers/change-password";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($oldPassword !== null) {
            $formParams['oldPassword'] = $this->apiClient->getSerializer()->toFormValue($oldPassword);
        }
        // form params
        if ($newPassword !== null) {
            $formParams['newPassword'] = $this->apiClient->getSerializer()->toFormValue($newPassword);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/change-password'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersChangeStreamGet
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersChangeStreamGet($options = null)
    {
        list($response) = $this->customersChangeStreamGetWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation customersChangeStreamGetWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersChangeStreamGetWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Customers/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Customers/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersChangeStreamPost
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersChangeStreamPost($options = null)
    {
        list($response) = $this->customersChangeStreamPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation customersChangeStreamPostWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersChangeStreamPostWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Customers/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Customers/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersConfirmGet
     *
     * Confirm a user registration with identity verification token.
     *
     * @param string $uid  (required)
     * @param string $token  (required)
     * @param string $redirect  (optional)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersConfirmGet($uid, $token, $redirect = null)
    {
        list($response) = $this->customersConfirmGetWithHttpInfo($uid, $token, $redirect);
        return $response;
    }

    /**
     * Operation customersConfirmGetWithHttpInfo
     *
     * Confirm a user registration with identity verification token.
     *
     * @param string $uid  (required)
     * @param string $token  (required)
     * @param string $redirect  (optional)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersConfirmGetWithHttpInfo($uid, $token, $redirect = null)
    {
        // verify the required parameter 'uid' is set
        if ($uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $uid when calling customersConfirmGet');
        }
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling customersConfirmGet');
        }
        // parse inputs
        $resourcePath = "/Customers/confirm";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($uid !== null) {
            $queryParams['uid'] = $this->apiClient->getSerializer()->toQueryValue($uid);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // query params
        if ($redirect !== null) {
            $queryParams['redirect'] = $this->apiClient->getSerializer()->toQueryValue($redirect);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/confirm'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersCountGet
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersCountGet($where = null)
    {
        list($response) = $this->customersCountGetWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation customersCountGetWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersCountGetWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/Customers/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersEmailEmailExistsGet
     *
     * Define whether customer exists or not
     *
     * @param string $email Customer email (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersEmailEmailExistsGet($email)
    {
        list($response) = $this->customersEmailEmailExistsGetWithHttpInfo($email);
        return $response;
    }

    /**
     * Operation customersEmailEmailExistsGetWithHttpInfo
     *
     * Define whether customer exists or not
     *
     * @param string $email Customer email (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersEmailEmailExistsGetWithHttpInfo($email)
    {
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling customersEmailEmailExistsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/email/{email}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                "{" . "email" . "}",
                $this->apiClient->getSerializer()->toPathValue($email),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Customers/email/{email}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersFindOneGet
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersFindOneGet($filter = null)
    {
        list($response) = $this->customersFindOneGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation customersFindOneGetWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersFindOneGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Customers/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersGet
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Customer[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersGet($filter = null)
    {
        list($response) = $this->customersGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation customersGetWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Customer[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Customers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer[]',
                '/Customers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensCountGet
     *
     * Counts accessTokens of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensCountGet($id, $where = null)
    {
        list($response) = $this->customersIdAccessTokensCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensCountGetWithHttpInfo
     *
     * Counts accessTokens of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/accessTokens/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensDelete
     *
     * Deletes all accessTokens of this model.
     *
     * @param string $id Customer id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensDelete($id)
    {
        list($response) = $this->customersIdAccessTokensDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensDeleteWithHttpInfo
     *
     * Deletes all accessTokens of this model.
     *
     * @param string $id Customer id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/accessTokens'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensFkDelete
     *
     * Delete a related item by id for accessTokens.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for accessTokens (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensFkDelete($id, $fk)
    {
        list($response) = $this->customersIdAccessTokensFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensFkDeleteWithHttpInfo
     *
     * Delete a related item by id for accessTokens.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for accessTokens (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdAccessTokensFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/accessTokens/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensFkGet
     *
     * Find a related item by id for accessTokens.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for accessTokens (required)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensFkGet($id, $fk)
    {
        list($response) = $this->customersIdAccessTokensFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensFkGetWithHttpInfo
     *
     * Find a related item by id for accessTokens.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for accessTokens (required)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdAccessTokensFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/{id}/accessTokens/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensFkPut
     *
     * Update a related item by id for accessTokens.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for accessTokens (required)
     * @param \Swagger\Client\Model\TeamMemberAccessToken $data  (optional)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensFkPut($id, $fk, $data = null)
    {
        list($response) = $this->customersIdAccessTokensFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensFkPutWithHttpInfo
     *
     * Update a related item by id for accessTokens.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for accessTokens (required)
     * @param \Swagger\Client\Model\TeamMemberAccessToken $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdAccessTokensFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/{id}/accessTokens/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensGet
     *
     * Queries accessTokens of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMemberAccessToken[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensGet($id, $filter = null)
    {
        list($response) = $this->customersIdAccessTokensGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensGetWithHttpInfo
     *
     * Queries accessTokens of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken[]',
                '/Customers/{id}/accessTokens'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdAccessTokensPost
     *
     * Creates a new instance in accessTokens of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\TeamMemberAccessToken $data  (optional)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensPost($id, $data = null)
    {
        list($response) = $this->customersIdAccessTokensPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdAccessTokensPostWithHttpInfo
     *
     * Creates a new instance in accessTokens of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\TeamMemberAccessToken $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdAccessTokensPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdAccessTokensPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/accessTokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/{id}/accessTokens'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdActiveGet
     *
     * Define whether customer is active or not
     *
     * @param string $id Customer id or email (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdActiveGet($id)
    {
        list($response) = $this->customersIdActiveGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdActiveGetWithHttpInfo
     *
     * Define whether customer is active or not
     *
     * @param string $id Customer id or email (required)
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdActiveGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdActiveGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/active";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/Customers/{id}/active'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDelete
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDelete($id)
    {
        list($response) = $this->customersIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdDeleteWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Customers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsCountGet
     *
     * Counts designs of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsCountGet($id, $where = null)
    {
        list($response) = $this->customersIdDesignsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation customersIdDesignsCountGetWithHttpInfo
     *
     * Counts designs of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/designs/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsDelete
     *
     * Deletes all designs of this model.
     *
     * @param string $id Customer id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsDelete($id)
    {
        list($response) = $this->customersIdDesignsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdDesignsDeleteWithHttpInfo
     *
     * Deletes all designs of this model.
     *
     * @param string $id Customer id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/designs'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsFkDelete
     *
     * Delete a related item by id for designs.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for designs (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsFkDelete($id, $fk)
    {
        list($response) = $this->customersIdDesignsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdDesignsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for designs.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for designs (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdDesignsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/designs/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsFkGet
     *
     * Find a related item by id for designs.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for designs (required)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsFkGet($id, $fk)
    {
        list($response) = $this->customersIdDesignsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdDesignsFkGetWithHttpInfo
     *
     * Find a related item by id for designs.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for designs (required)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdDesignsFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Customers/{id}/designs/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsFkPut
     *
     * Update a related item by id for designs.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for designs (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->customersIdDesignsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdDesignsFkPutWithHttpInfo
     *
     * Update a related item by id for designs.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for designs (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdDesignsFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Customers/{id}/designs/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsGet
     *
     * Queries designs of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Design[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsGet($id, $filter = null)
    {
        list($response) = $this->customersIdDesignsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation customersIdDesignsGetWithHttpInfo
     *
     * Queries designs of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Design[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design[]',
                '/Customers/{id}/designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdDesignsPost
     *
     * Creates a new instance in designs of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return \Swagger\Client\Model\Design
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsPost($id, $data = null)
    {
        list($response) = $this->customersIdDesignsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdDesignsPostWithHttpInfo
     *
     * Creates a new instance in designs of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Design $data  (optional)
     * @return array of \Swagger\Client\Model\Design, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdDesignsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdDesignsPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/designs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Design',
                '/Customers/{id}/designs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Design', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Design', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdExistsGet
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdExistsGet($id)
    {
        list($response) = $this->customersIdExistsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdExistsGetWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdExistsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdExistsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Customers/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdGet
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdGet($id, $filter = null)
    {
        list($response) = $this->customersIdGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation customersIdGetWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdHead
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdHead($id)
    {
        list($response) = $this->customersIdHeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdHeadWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdHeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdHead');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/Customers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsCountGet
     *
     * Counts invitationTickets of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsCountGet($id, $where = null)
    {
        list($response) = $this->customersIdInvitationTicketsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsCountGetWithHttpInfo
     *
     * Counts invitationTickets of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/invitationTickets/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsDelete
     *
     * Deletes all invitationTickets of this model.
     *
     * @param string $id Customer id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsDelete($id)
    {
        list($response) = $this->customersIdInvitationTicketsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsDeleteWithHttpInfo
     *
     * Deletes all invitationTickets of this model.
     *
     * @param string $id Customer id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/invitationTickets'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsFkDelete
     *
     * Delete a related item by id for invitationTickets.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsFkDelete($id, $fk)
    {
        list($response) = $this->customersIdInvitationTicketsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for invitationTickets.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdInvitationTicketsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/invitationTickets/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsFkGet
     *
     * Find a related item by id for invitationTickets.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsFkGet($id, $fk)
    {
        list($response) = $this->customersIdInvitationTicketsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsFkGetWithHttpInfo
     *
     * Find a related item by id for invitationTickets.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdInvitationTicketsFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/Customers/{id}/invitationTickets/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsFkPut
     *
     * Update a related item by id for invitationTickets.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->customersIdInvitationTicketsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsFkPutWithHttpInfo
     *
     * Update a related item by id for invitationTickets.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for invitationTickets (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdInvitationTicketsFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/Customers/{id}/invitationTickets/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsGet
     *
     * Queries invitationTickets of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\InvitationTicket[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsGet($id, $filter = null)
    {
        list($response) = $this->customersIdInvitationTicketsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsGetWithHttpInfo
     *
     * Queries invitationTickets of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket[]',
                '/Customers/{id}/invitationTickets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdInvitationTicketsPost
     *
     * Creates a new instance in invitationTickets of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsPost($id, $data = null)
    {
        list($response) = $this->customersIdInvitationTicketsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdInvitationTicketsPostWithHttpInfo
     *
     * Creates a new instance in invitationTickets of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\InvitationTicket $data  (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdInvitationTicketsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdInvitationTicketsPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/invitationTickets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/Customers/{id}/invitationTickets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Customer $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPatch($id, $data = null)
    {
        list($response) = $this->customersIdPatchWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdPatchWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Customer $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPatchWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdPatch');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdPermissionDelete
     *
     * Deletes permission of this model.
     *
     * @param string $id Customer id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionDelete($id)
    {
        list($response) = $this->customersIdPermissionDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdPermissionDeleteWithHttpInfo
     *
     * Deletes permission of this model.
     *
     * @param string $id Customer id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdPermissionDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/permission'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdPermissionGet
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Customer id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\CustomerPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionGet($id, $refresh = null)
    {
        list($response) = $this->customersIdPermissionGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation customersIdPermissionGetWithHttpInfo
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Customer id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\CustomerPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdPermissionGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPermissionSet',
                '/Customers/{id}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdPermissionPost
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\CustomerPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\CustomerPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionPost($id, $data = null)
    {
        list($response) = $this->customersIdPermissionPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdPermissionPostWithHttpInfo
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\CustomerPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\CustomerPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdPermissionPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPermissionSet',
                '/Customers/{id}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdPermissionPut
     *
     * Update permission of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\CustomerPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\CustomerPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionPut($id, $data = null)
    {
        list($response) = $this->customersIdPermissionPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdPermissionPutWithHttpInfo
     *
     * Update permission of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\CustomerPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\CustomerPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPermissionPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdPermissionPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPermissionSet',
                '/Customers/{id}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdProfilePicturePut
     *
     * Change profile picture
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @param \Swagger\Client\Model\Customer $data Profile picture (required)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdProfilePicturePut($id, $id2, $data)
    {
        list($response) = $this->customersIdProfilePicturePutWithHttpInfo($id, $id2, $data);
        return $response;
    }

    /**
     * Operation customersIdProfilePicturePutWithHttpInfo
     *
     * Change profile picture
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @param \Swagger\Client\Model\Customer $data Profile picture (required)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdProfilePicturePutWithHttpInfo($id, $id2, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdProfilePicturePut');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling customersIdProfilePicturePut');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling customersIdProfilePicturePut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/profilePicture";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}/profilePicture'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdPut
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPut($id, $data = null)
    {
        list($response) = $this->customersIdPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdPutWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdRegisterTeamPost
     *
     * Register team and assign it to the customer
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Team $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdRegisterTeamPost($id, $data = null)
    {
        list($response) = $this->customersIdRegisterTeamPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdRegisterTeamPostWithHttpInfo
     *
     * Register team and assign it to the customer
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Team $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdRegisterTeamPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdRegisterTeamPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/register/team";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/{id}/register/team'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdReplacePost($id, $data = null)
    {
        list($response) = $this->customersIdReplacePostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdReplacePostWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdReplacePostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdReplacePost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/replace";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}/replace'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsCountGet
     *
     * Counts teams of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsCountGet($id, $where = null)
    {
        list($response) = $this->customersIdTeamsCountGetWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsCountGetWithHttpInfo
     *
     * Counts teams of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsCountGetWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsDelete
     *
     * Deletes all teams of this model.
     *
     * @param string $id Customer id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsDelete($id)
    {
        list($response) = $this->customersIdTeamsDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdTeamsDeleteWithHttpInfo
     *
     * Deletes all teams of this model.
     *
     * @param string $id Customer id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsFkDelete
     *
     * Delete a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsFkDelete($id, $fk)
    {
        list($response) = $this->customersIdTeamsFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsFkGet
     *
     * Find a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsFkGet($id, $fk)
    {
        list($response) = $this->customersIdTeamsFkGetWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsFkGetWithHttpInfo
     *
     * Find a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsFkGetWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/Customers/{id}/teams/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsFkPut
     *
     * Update a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @param \Swagger\Client\Model\Team $data  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsFkPut($id, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsFkPutWithHttpInfo
     *
     * Update a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @param \Swagger\Client\Model\Team $data  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/Customers/{id}/teams/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsGet
     *
     * Queries teams of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Team[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsGet($id, $filter = null)
    {
        list($response) = $this->customersIdTeamsGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsGetWithHttpInfo
     *
     * Queries teams of Customer.
     *
     * @param string $id Customer id (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Team[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team[]',
                '/Customers/{id}/teams'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBillingDelete
     *
     * Deletes billing of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkBillingDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBillingDeleteWithHttpInfo
     *
     * Deletes billing of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBillingDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBillingDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/billing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/billing'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBillingGet
     *
     * Fetches hasOne relation billing.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingGet($id, $nk, $refresh = null)
    {
        list($response) = $this->customersIdTeamsNkBillingGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBillingGetWithHttpInfo
     *
     * Fetches hasOne relation billing.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBillingGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBillingGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/billing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/Customers/{id}/teams/{nk}/billing'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBillingPost
     *
     * Creates a new instance in billing of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Billing $data  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkBillingPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBillingPostWithHttpInfo
     *
     * Creates a new instance in billing of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Billing $data  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBillingPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBillingPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/billing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/Customers/{id}/teams/{nk}/billing'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBillingPut
     *
     * Update billing of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Billing $data  (optional)
     * @return \Swagger\Client\Model\Billing
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingPut($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkBillingPutWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBillingPutWithHttpInfo
     *
     * Update billing of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Billing $data  (optional)
     * @return array of \Swagger\Client\Model\Billing, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBillingPutWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBillingPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBillingPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/billing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Billing',
                '/Customers/{id}/teams/{nk}/billing'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Billing', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Billing', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBrandDelete
     *
     * Deletes brand of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkBrandDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBrandDeleteWithHttpInfo
     *
     * Deletes brand of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBrandDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBrandDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/brand'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBrandGet
     *
     * Fetches hasOne relation brand.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamBrand
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandGet($id, $nk, $refresh = null)
    {
        list($response) = $this->customersIdTeamsNkBrandGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBrandGetWithHttpInfo
     *
     * Fetches hasOne relation brand.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamBrand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBrandGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBrandGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBrand',
                '/Customers/{id}/teams/{nk}/brand'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBrand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBrand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBrandPost
     *
     * Creates a new instance in brand of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return \Swagger\Client\Model\TeamBrand
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkBrandPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBrandPostWithHttpInfo
     *
     * Creates a new instance in brand of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBrand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBrandPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBrandPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBrand',
                '/Customers/{id}/teams/{nk}/brand'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBrand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBrand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkBrandPut
     *
     * Update brand of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return \Swagger\Client\Model\TeamBrand
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandPut($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkBrandPutWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkBrandPutWithHttpInfo
     *
     * Update brand of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamBrand $data  (optional)
     * @return array of \Swagger\Client\Model\TeamBrand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkBrandPutWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkBrandPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkBrandPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamBrand',
                '/Customers/{id}/teams/{nk}/brand'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamBrand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamBrand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesCountGet
     *
     * Counts dataSources of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesCountGetWithHttpInfo
     *
     * Counts dataSources of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/dataSources/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesDelete
     *
     * Deletes all dataSources of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesDeleteWithHttpInfo
     *
     * Deletes all dataSources of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/dataSources'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesFkDelete
     *
     * Delete a related item by id for dataSources.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for dataSources.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkDataSourcesFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/dataSources/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesFkGet
     *
     * Find a related item by id for dataSources.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return \Swagger\Client\Model\DataSource
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesFkGetWithHttpInfo
     *
     * Find a related item by id for dataSources.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for dataSources (required)
     * @return array of \Swagger\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkDataSourcesFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource',
                '/Customers/{id}/teams/{nk}/dataSources/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesFkPut
     *
     * Update a related item by id for dataSources.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for dataSources (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return \Swagger\Client\Model\DataSource
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesFkPutWithHttpInfo
     *
     * Update a related item by id for dataSources.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for dataSources (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return array of \Swagger\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkDataSourcesFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource',
                '/Customers/{id}/teams/{nk}/dataSources/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesGet
     *
     * Queries dataSources of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\DataSource[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesGetWithHttpInfo
     *
     * Queries dataSources of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\DataSource[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource[]',
                '/Customers/{id}/teams/{nk}/dataSources'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkDataSourcesPost
     *
     * Creates a new instance in dataSources of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return \Swagger\Client\Model\DataSource
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkDataSourcesPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkDataSourcesPostWithHttpInfo
     *
     * Creates a new instance in dataSources of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\DataSource $data  (optional)
     * @return array of \Swagger\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkDataSourcesPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkDataSourcesPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkDataSourcesPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/dataSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DataSource',
                '/Customers/{id}/teams/{nk}/dataSources'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DataSource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersCountGet
     *
     * Counts imageFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersCountGetWithHttpInfo
     *
     * Counts imageFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/imageFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersDelete
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersDeleteWithHttpInfo
     *
     * Deletes all imageFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/imageFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersFkDelete
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for imageFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkImageFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/imageFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersFkGet
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for imageFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkImageFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/Customers/{id}/teams/{nk}/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersFkPut
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for imageFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for imageFolders (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkImageFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/Customers/{id}/teams/{nk}/imageFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersGet
     *
     * Queries imageFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\ImageFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersGetWithHttpInfo
     *
     * Queries imageFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder[]',
                '/Customers/{id}/teams/{nk}/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImageFoldersPost
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return \Swagger\Client\Model\ImageFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkImageFoldersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImageFoldersPostWithHttpInfo
     *
     * Creates a new instance in imageFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\ImageFolder $data  (optional)
     * @return array of \Swagger\Client\Model\ImageFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImageFoldersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImageFoldersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImageFoldersPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/imageFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImageFolder',
                '/Customers/{id}/teams/{nk}/imageFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImageFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImageFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesCountGet
     *
     * Counts images of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkImagesCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesCountGetWithHttpInfo
     *
     * Counts images of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/images/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesDelete
     *
     * Deletes all images of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkImagesDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesDeleteWithHttpInfo
     *
     * Deletes all images of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/images'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesFkDelete
     *
     * Delete a related item by id for images.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for images (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkImagesFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for images.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for images (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkImagesFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/images/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesFkGet
     *
     * Find a related item by id for images.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for images (required)
     * @return \Swagger\Client\Model\Image
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkImagesFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesFkGetWithHttpInfo
     *
     * Find a related item by id for images.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for images (required)
     * @return array of \Swagger\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkImagesFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image',
                '/Customers/{id}/teams/{nk}/images/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesFkPut
     *
     * Update a related item by id for images.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for images (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return \Swagger\Client\Model\Image
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkImagesFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesFkPutWithHttpInfo
     *
     * Update a related item by id for images.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for images (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return array of \Swagger\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkImagesFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image',
                '/Customers/{id}/teams/{nk}/images/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesGet
     *
     * Queries images of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Image[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkImagesGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesGetWithHttpInfo
     *
     * Queries images of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Image[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image[]',
                '/Customers/{id}/teams/{nk}/images'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkImagesPost
     *
     * Creates a new instance in images of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return \Swagger\Client\Model\Image
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkImagesPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkImagesPostWithHttpInfo
     *
     * Creates a new instance in images of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Image $data  (optional)
     * @return array of \Swagger\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkImagesPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkImagesPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkImagesPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/images";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Image',
                '/Customers/{id}/teams/{nk}/images'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Image', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Image', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersCountGet
     *
     * Counts members of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkMembersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersCountGetWithHttpInfo
     *
     * Counts members of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/members/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersDelete
     *
     * Deletes all members of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkMembersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersDeleteWithHttpInfo
     *
     * Deletes all members of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/members'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersFkDelete
     *
     * Delete a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkMembersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/members/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersFkGet
     *
     * Find a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkMembersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersFkGetWithHttpInfo
     *
     * Find a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}/teams/{nk}/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersFkPut
     *
     * Update a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkMembersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersFkPutWithHttpInfo
     *
     * Update a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}/teams/{nk}/members/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersGet
     *
     * Queries members of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Customer[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkMembersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersGetWithHttpInfo
     *
     * Queries members of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Customer[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer[]',
                '/Customers/{id}/teams/{nk}/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersPost
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkMembersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersPostWithHttpInfo
     *
     * Creates a new instance in members of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Customer $data  (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/{id}/teams/{nk}/members'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersRelFkDelete
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersRelFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkMembersRelFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersRelFkDeleteWithHttpInfo
     *
     * Remove the members relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersRelFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersRelFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkMembersRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/members/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersRelFkHead
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersRelFkHead($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkMembersRelFkHeadWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersRelFkHeadWithHttpInfo
     *
     * Check the existence of members relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersRelFkHeadWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersRelFkHead');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkMembersRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Customers/{id}/teams/{nk}/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkMembersRelFkPut
     *
     * Add a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersRelFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkMembersRelFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkMembersRelFkPutWithHttpInfo
     *
     * Add a related item by id for members.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for members (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkMembersRelFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkMembersRelFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkMembersRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkMembersRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/{id}/teams/{nk}/members/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPermissionDelete
     *
     * Deletes permission of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkPermissionDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPermissionDeleteWithHttpInfo
     *
     * Deletes permission of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPermissionDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPermissionDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/permission'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPermissionGet
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\TeamPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionGet($id, $nk, $refresh = null)
    {
        list($response) = $this->customersIdTeamsNkPermissionGetWithHttpInfo($id, $nk, $refresh);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPermissionGetWithHttpInfo
     *
     * Fetches hasOne relation permission.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\TeamPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionGetWithHttpInfo($id, $nk, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPermissionGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPermissionGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPermissionSet',
                '/Customers/{id}/teams/{nk}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPermissionPost
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\TeamPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkPermissionPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPermissionPostWithHttpInfo
     *
     * Creates a new instance in permission of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\TeamPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPermissionPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPermissionPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPermissionSet',
                '/Customers/{id}/teams/{nk}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPermissionPut
     *
     * Update permission of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return \Swagger\Client\Model\TeamPermissionSet
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionPut($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkPermissionPutWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPermissionPutWithHttpInfo
     *
     * Update permission of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamPermissionSet $data  (optional)
     * @return array of \Swagger\Client\Model\TeamPermissionSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPermissionPutWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPermissionPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPermissionPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/permission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamPermissionSet',
                '/Customers/{id}/teams/{nk}/permission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamPermissionSet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamPermissionSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsCountGet
     *
     * Counts portals of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkPortalsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsCountGetWithHttpInfo
     *
     * Counts portals of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/portals/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsDelete
     *
     * Deletes all portals of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkPortalsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsDeleteWithHttpInfo
     *
     * Deletes all portals of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/portals'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsFkDelete
     *
     * Delete a related item by id for portals.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for portals (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkPortalsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for portals.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkPortalsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/portals/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsFkGet
     *
     * Find a related item by id for portals.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for portals (required)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkPortalsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsFkGetWithHttpInfo
     *
     * Find a related item by id for portals.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for portals (required)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkPortalsFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Customers/{id}/teams/{nk}/portals/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsFkPut
     *
     * Update a related item by id for portals.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkPortalsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsFkPutWithHttpInfo
     *
     * Update a related item by id for portals.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for portals (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkPortalsFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Customers/{id}/teams/{nk}/portals/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsGet
     *
     * Queries portals of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Portal[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkPortalsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsGetWithHttpInfo
     *
     * Queries portals of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Portal[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal[]',
                '/Customers/{id}/teams/{nk}/portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkPortalsPost
     *
     * Creates a new instance in portals of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return \Swagger\Client\Model\Portal
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkPortalsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkPortalsPostWithHttpInfo
     *
     * Creates a new instance in portals of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Portal $data  (optional)
     * @return array of \Swagger\Client\Model\Portal, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkPortalsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkPortalsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkPortalsPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/portals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Portal',
                '/Customers/{id}/teams/{nk}/portals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Portal', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Portal', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersCountGet
     *
     * Counts teamMembers of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersCountGetWithHttpInfo
     *
     * Counts teamMembers of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/teamMembers/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersDelete
     *
     * Deletes all teamMembers of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersDeleteWithHttpInfo
     *
     * Deletes all teamMembers of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/teamMembers'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersFkDelete
     *
     * Delete a related item by id for teamMembers.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for teamMembers.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTeamMembersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/teamMembers/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersFkGet
     *
     * Find a related item by id for teamMembers.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersFkGetWithHttpInfo
     *
     * Find a related item by id for teamMembers.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTeamMembersFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/{id}/teams/{nk}/teamMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersFkPut
     *
     * Update a related item by id for teamMembers.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersFkPutWithHttpInfo
     *
     * Update a related item by id for teamMembers.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for teamMembers (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTeamMembersFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/{id}/teams/{nk}/teamMembers/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersGet
     *
     * Queries teamMembers of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamMember[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersGetWithHttpInfo
     *
     * Queries teamMembers of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamMember[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember[]',
                '/Customers/{id}/teams/{nk}/teamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTeamMembersPost
     *
     * Creates a new instance in teamMembers of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkTeamMembersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTeamMembersPostWithHttpInfo
     *
     * Creates a new instance in teamMembers of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTeamMembersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTeamMembersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTeamMembersPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/teamMembers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/{id}/teams/{nk}/teamMembers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersCountGet
     *
     * Counts templateFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersCountGetWithHttpInfo
     *
     * Counts templateFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/templateFolders/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersDelete
     *
     * Deletes all templateFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersDeleteWithHttpInfo
     *
     * Deletes all templateFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/templateFolders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersFkDelete
     *
     * Delete a related item by id for templateFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templateFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTemplateFoldersFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/templateFolders/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersFkGet
     *
     * Find a related item by id for templateFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersFkGetWithHttpInfo
     *
     * Find a related item by id for templateFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTemplateFoldersFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/Customers/{id}/teams/{nk}/templateFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersFkPut
     *
     * Update a related item by id for templateFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersFkPutWithHttpInfo
     *
     * Update a related item by id for templateFolders.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templateFolders (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTemplateFoldersFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/Customers/{id}/teams/{nk}/templateFolders/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersGet
     *
     * Queries templateFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersGetWithHttpInfo
     *
     * Queries templateFolders of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder[]',
                '/Customers/{id}/teams/{nk}/templateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersPost
     *
     * Creates a new instance in templateFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return \Swagger\Client\Model\TeamTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkTemplateFoldersPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplateFoldersPostWithHttpInfo
     *
     * Creates a new instance in templateFolders of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\TeamTemplateFolder $data  (optional)
     * @return array of \Swagger\Client\Model\TeamTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplateFoldersPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplateFoldersPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplateFoldersPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templateFolders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamTemplateFolder',
                '/Customers/{id}/teams/{nk}/templateFolders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesCountGet
     *
     * Counts templates of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkTemplatesCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesCountGetWithHttpInfo
     *
     * Counts templates of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/templates/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesDelete
     *
     * Deletes all templates of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkTemplatesDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesDeleteWithHttpInfo
     *
     * Deletes all templates of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/templates'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesFkDelete
     *
     * Delete a related item by id for templates.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templates (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkTemplatesFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesFkDeleteWithHttpInfo
     *
     * Delete a related item by id for templates.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTemplatesFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/templates/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesFkGet
     *
     * Find a related item by id for templates.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templates (required)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkTemplatesFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesFkGetWithHttpInfo
     *
     * Find a related item by id for templates.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templates (required)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTemplatesFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Customers/{id}/teams/{nk}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesFkPut
     *
     * Update a related item by id for templates.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkTemplatesFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesFkPutWithHttpInfo
     *
     * Update a related item by id for templates.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for templates (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkTemplatesFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Customers/{id}/teams/{nk}/templates/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesGet
     *
     * Queries templates of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Template[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkTemplatesGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesGetWithHttpInfo
     *
     * Queries templates of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Template[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template[]',
                '/Customers/{id}/teams/{nk}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkTemplatesPost
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkTemplatesPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkTemplatesPostWithHttpInfo
     *
     * Creates a new instance in templates of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Template $data  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkTemplatesPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkTemplatesPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkTemplatesPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/Customers/{id}/teams/{nk}/templates'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsCountGet
     *
     * Counts workflows of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsCountGet($id, $nk, $where = null)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsCountGetWithHttpInfo($id, $nk, $where);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsCountGetWithHttpInfo
     *
     * Counts workflows of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsCountGetWithHttpInfo($id, $nk, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsCountGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsCountGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/Customers/{id}/teams/{nk}/workflows/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsDelete
     *
     * Deletes all workflows of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsDelete($id, $nk)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsDeleteWithHttpInfo($id, $nk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsDeleteWithHttpInfo
     *
     * Deletes all workflows of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsDeleteWithHttpInfo($id, $nk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/workflows'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsFkDelete
     *
     * Delete a related item by id for workflows.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for workflows (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsFkDelete($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsFkDeleteWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsFkDeleteWithHttpInfo
     *
     * Delete a related item by id for workflows.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for workflows (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsFkDeleteWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsFkDelete');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkWorkflowsFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/{nk}/workflows/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsFkGet
     *
     * Find a related item by id for workflows.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for workflows (required)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsFkGet($id, $nk, $fk)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsFkGetWithHttpInfo($id, $nk, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsFkGetWithHttpInfo
     *
     * Find a related item by id for workflows.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for workflows (required)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsFkGetWithHttpInfo($id, $nk, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsFkGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsFkGet');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkWorkflowsFkGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/Customers/{id}/teams/{nk}/workflows/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsFkPut
     *
     * Update a related item by id for workflows.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for workflows (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsFkPut($id, $nk, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsFkPutWithHttpInfo($id, $nk, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsFkPutWithHttpInfo
     *
     * Update a related item by id for workflows.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $fk Foreign key for workflows (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsFkPutWithHttpInfo($id, $nk, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsFkPut');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsNkWorkflowsFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/Customers/{id}/teams/{nk}/workflows/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsGet
     *
     * Queries workflows of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return \Swagger\Client\Model\Workflow[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsGet($id, $nk, $filter = null)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsGetWithHttpInfo($id, $nk, $filter);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsGetWithHttpInfo
     *
     * Queries workflows of Team.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param string $filter  (optional)
     * @return array of \Swagger\Client\Model\Workflow[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsGetWithHttpInfo($id, $nk, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsGet');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow[]',
                '/Customers/{id}/teams/{nk}/workflows'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsNkWorkflowsPost
     *
     * Creates a new instance in workflows of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return \Swagger\Client\Model\Workflow
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsPost($id, $nk, $data = null)
    {
        list($response) = $this->customersIdTeamsNkWorkflowsPostWithHttpInfo($id, $nk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsNkWorkflowsPostWithHttpInfo
     *
     * Creates a new instance in workflows of this model.
     *
     * @param string $id Customer id (required)
     * @param string $nk Foreign key for teams. (required)
     * @param \Swagger\Client\Model\Workflow $data  (optional)
     * @return array of \Swagger\Client\Model\Workflow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsNkWorkflowsPostWithHttpInfo($id, $nk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsNkWorkflowsPost');
        }
        // verify the required parameter 'nk' is set
        if ($nk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nk when calling customersIdTeamsNkWorkflowsPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{nk}/workflows";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($nk !== null) {
            $resourcePath = str_replace(
                "{" . "nk" . "}",
                $this->apiClient->getSerializer()->toPathValue($nk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Workflow',
                '/Customers/{id}/teams/{nk}/workflows'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Workflow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Workflow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsPost
     *
     * Creates a new instance in teams of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Team $data  (optional)
     * @return \Swagger\Client\Model\Team
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsPost($id, $data = null)
    {
        list($response) = $this->customersIdTeamsPostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsPostWithHttpInfo
     *
     * Creates a new instance in teams of this model.
     *
     * @param string $id Customer id (required)
     * @param \Swagger\Client\Model\Team $data  (optional)
     * @return array of \Swagger\Client\Model\Team, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsPostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Team',
                '/Customers/{id}/teams'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Team', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Team', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsRelFkDelete
     *
     * Remove the teams relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsRelFkDelete($id, $fk)
    {
        list($response) = $this->customersIdTeamsRelFkDeleteWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsRelFkDeleteWithHttpInfo
     *
     * Remove the teams relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsRelFkDeleteWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsRelFkDelete');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsRelFkDelete');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/teams/rel/{fk}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsRelFkHead
     *
     * Check the existence of teams relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return bool
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsRelFkHead($id, $fk)
    {
        list($response) = $this->customersIdTeamsRelFkHeadWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation customersIdTeamsRelFkHeadWithHttpInfo
     *
     * Check the existence of teams relation to an item by id.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsRelFkHeadWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsRelFkHead');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsRelFkHead');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/Customers/{id}/teams/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsRelFkPut
     *
     * Add a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsRelFkPut($id, $fk, $data = null)
    {
        list($response) = $this->customersIdTeamsRelFkPutWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation customersIdTeamsRelFkPutWithHttpInfo
     *
     * Add a related item by id for teams.
     *
     * @param string $id Customer id (required)
     * @param string $fk Foreign key for teams (required)
     * @param \Swagger\Client\Model\TeamMember $data  (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsRelFkPutWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsRelFkPut');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling customersIdTeamsRelFkPut');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/rel/{fk}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/{id}/teams/rel/{fk}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsTeamIdChangePost
     *
     * Move authentication to a Team
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @param string $teamId Team id (required)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsTeamIdChangePost($id, $id2, $teamId)
    {
        list($response) = $this->customersIdTeamsTeamIdChangePostWithHttpInfo($id, $id2, $teamId);
        return $response;
    }

    /**
     * Operation customersIdTeamsTeamIdChangePostWithHttpInfo
     *
     * Move authentication to a Team
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @param string $teamId Team id (required)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsTeamIdChangePostWithHttpInfo($id, $id2, $teamId)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsTeamIdChangePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling customersIdTeamsTeamIdChangePost');
        }
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling customersIdTeamsTeamIdChangePost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{teamId}/change";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/{id}/teams/{teamId}/change'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTeamsTeamIdPortalsPortalIdChangePost
     *
     * Move authentication to a Portal
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @param string $teamId Team id (required)
     * @param string $portalId Portal id (required)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsTeamIdPortalsPortalIdChangePost($id, $id2, $teamId, $portalId)
    {
        list($response) = $this->customersIdTeamsTeamIdPortalsPortalIdChangePostWithHttpInfo($id, $id2, $teamId, $portalId);
        return $response;
    }

    /**
     * Operation customersIdTeamsTeamIdPortalsPortalIdChangePostWithHttpInfo
     *
     * Move authentication to a Portal
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @param string $teamId Team id (required)
     * @param string $portalId Portal id (required)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTeamsTeamIdPortalsPortalIdChangePostWithHttpInfo($id, $id2, $teamId, $portalId)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTeamsTeamIdPortalsPortalIdChangePost');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling customersIdTeamsTeamIdPortalsPortalIdChangePost');
        }
        // verify the required parameter 'teamId' is set
        if ($teamId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teamId when calling customersIdTeamsTeamIdPortalsPortalIdChangePost');
        }
        // verify the required parameter 'portalId' is set
        if ($portalId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portalId when calling customersIdTeamsTeamIdPortalsPortalIdChangePost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/teams/{teamId}/portals/{portalId}/change";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // path params
        if ($teamId !== null) {
            $resourcePath = str_replace(
                "{" . "teamId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teamId),
                $resourcePath
            );
        }
        // path params
        if ($portalId !== null) {
            $resourcePath = str_replace(
                "{" . "portalId" . "}",
                $this->apiClient->getSerializer()->toPathValue($portalId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/{id}/teams/{teamId}/portals/{portalId}/change'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdTokenGet
     *
     * Get token info
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTokenGet($id, $id2)
    {
        list($response) = $this->customersIdTokenGetWithHttpInfo($id, $id2);
        return $response;
    }

    /**
     * Operation customersIdTokenGetWithHttpInfo
     *
     * Get token info
     *
     * @param string $id Customer id (required)
     * @param string $id2 Customer id (required)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdTokenGetWithHttpInfo($id, $id2)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdTokenGet');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling customersIdTokenGet');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/{id}/token'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersIdVerifyPost
     *
     * Trigger user's identity verification with configured verifyOptions
     *
     * @param string $id Customer id (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdVerifyPost($id)
    {
        list($response) = $this->customersIdVerifyPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation customersIdVerifyPostWithHttpInfo
     *
     * Trigger user's identity verification with configured verifyOptions
     *
     * @param string $id Customer id (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersIdVerifyPostWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customersIdVerifyPost');
        }
        // parse inputs
        $resourcePath = "/Customers/{id}/verify";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/{id}/verify'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersInvitationTicketsTokenAcceptPost
     *
     * Accept invitation with token
     *
     * @param string $token Token describing invitation ticket (required)
     * @param \Swagger\Client\Model\Customer $data Customer data in case new customer (optional)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersInvitationTicketsTokenAcceptPost($token, $data = null)
    {
        list($response) = $this->customersInvitationTicketsTokenAcceptPostWithHttpInfo($token, $data);
        return $response;
    }

    /**
     * Operation customersInvitationTicketsTokenAcceptPostWithHttpInfo
     *
     * Accept invitation with token
     *
     * @param string $token Token describing invitation ticket (required)
     * @param \Swagger\Client\Model\Customer $data Customer data in case new customer (optional)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersInvitationTicketsTokenAcceptPostWithHttpInfo($token, $data = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling customersInvitationTicketsTokenAcceptPost');
        }
        // parse inputs
        $resourcePath = "/Customers/invitationTickets/{token}/accept";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                $this->apiClient->getSerializer()->toPathValue($token),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/Customers/invitationTickets/{token}/accept'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersInvitationTicketsTokenGet
     *
     * Get invitation details with token
     *
     * @param string $token Token describing invitation ticket (required)
     * @return \Swagger\Client\Model\InvitationTicket
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersInvitationTicketsTokenGet($token)
    {
        list($response) = $this->customersInvitationTicketsTokenGetWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation customersInvitationTicketsTokenGetWithHttpInfo
     *
     * Get invitation details with token
     *
     * @param string $token Token describing invitation ticket (required)
     * @return array of \Swagger\Client\Model\InvitationTicket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersInvitationTicketsTokenGetWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling customersInvitationTicketsTokenGet');
        }
        // parse inputs
        $resourcePath = "/Customers/invitationTickets/{token}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                $this->apiClient->getSerializer()->toPathValue($token),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvitationTicket',
                '/Customers/invitationTickets/{token}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvitationTicket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvitationTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersLoginPost
     *
     * Login a user with username/email and password.
     *
     * @param object $credentials  (required)
     * @param string $include Related objects to include in the response. See the description of return value for more details. (optional)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersLoginPost($credentials, $include = null)
    {
        list($response) = $this->customersLoginPostWithHttpInfo($credentials, $include);
        return $response;
    }

    /**
     * Operation customersLoginPostWithHttpInfo
     *
     * Login a user with username/email and password.
     *
     * @param object $credentials  (required)
     * @param string $include Related objects to include in the response. See the description of return value for more details. (optional)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersLoginPostWithHttpInfo($credentials, $include = null)
    {
        // verify the required parameter 'credentials' is set
        if ($credentials === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credentials when calling customersLoginPost');
        }
        // parse inputs
        $resourcePath = "/Customers/login";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Customers/login'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersLogoutPost
     *
     * Logout a user with access token.
     *
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersLogoutPost()
    {
        list($response) = $this->customersLogoutPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation customersLogoutPostWithHttpInfo
     *
     * Logout a user with access token.
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersLogoutPostWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Customers/logout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/logout'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersMeTokenGet
     *
     * Get token info
     *
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersMeTokenGet()
    {
        list($response) = $this->customersMeTokenGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation customersMeTokenGetWithHttpInfo
     *
     * Get token info
     *
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersMeTokenGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Customers/me/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/me/token'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersMeTokenRefreshGet
     *
     * Refresh current access token
     *
     * @param string $refreshToken AccessToken refreshToken (required)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersMeTokenRefreshGet($refreshToken)
    {
        list($response) = $this->customersMeTokenRefreshGetWithHttpInfo($refreshToken);
        return $response;
    }

    /**
     * Operation customersMeTokenRefreshGetWithHttpInfo
     *
     * Refresh current access token
     *
     * @param string $refreshToken AccessToken refreshToken (required)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersMeTokenRefreshGetWithHttpInfo($refreshToken)
    {
        // verify the required parameter 'refreshToken' is set
        if ($refreshToken === null) {
            throw new \InvalidArgumentException('Missing the required parameter $refreshToken when calling customersMeTokenRefreshGet');
        }
        // parse inputs
        $resourcePath = "/Customers/me/token/refresh";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refreshToken !== null) {
            $queryParams['refreshToken'] = $this->apiClient->getSerializer()->toQueryValue($refreshToken);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/me/token/refresh'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersPatch
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersPatch($data = null)
    {
        list($response) = $this->customersPatchWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation customersPatchWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersPatchWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Customers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersPost
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersPost($data = null)
    {
        list($response) = $this->customersPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation customersPostWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Customers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersPut
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersPut($data = null)
    {
        list($response) = $this->customersPutWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation customersPutWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersPutWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Customers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersRegisterPost
     *
     * Create customer and assign it to a team
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\TeamMember
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersRegisterPost($data = null)
    {
        list($response) = $this->customersRegisterPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation customersRegisterPostWithHttpInfo
     *
     * Create customer and assign it to a team
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\TeamMember, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersRegisterPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Customers/register";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMember',
                '/Customers/register'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMember', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMember', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersReplaceOrCreatePost($data = null)
    {
        list($response) = $this->customersReplaceOrCreatePostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation customersReplaceOrCreatePostWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\Customer $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersReplaceOrCreatePostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Customers/replaceOrCreate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/replaceOrCreate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersResetPasswordPost
     *
     * Reset user's password via a password-reset token.
     *
     * @param string $newPassword  (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersResetPasswordPost($newPassword)
    {
        list($response) = $this->customersResetPasswordPostWithHttpInfo($newPassword);
        return $response;
    }

    /**
     * Operation customersResetPasswordPostWithHttpInfo
     *
     * Reset user's password via a password-reset token.
     *
     * @param string $newPassword  (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersResetPasswordPostWithHttpInfo($newPassword)
    {
        // verify the required parameter 'newPassword' is set
        if ($newPassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newPassword when calling customersResetPasswordPost');
        }
        // parse inputs
        $resourcePath = "/Customers/reset-password";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($newPassword !== null) {
            $formParams['newPassword'] = $this->apiClient->getSerializer()->toFormValue($newPassword);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/reset-password'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersResetPasswordTokenGet
     *
     * Get token info for reset password token
     *
     * @param string $token Reset password access token (required)
     * @return \Swagger\Client\Model\TeamMemberAccessToken
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersResetPasswordTokenGet($token)
    {
        list($response) = $this->customersResetPasswordTokenGetWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation customersResetPasswordTokenGetWithHttpInfo
     *
     * Get token info for reset password token
     *
     * @param string $token Reset password access token (required)
     * @return array of \Swagger\Client\Model\TeamMemberAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersResetPasswordTokenGetWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling customersResetPasswordTokenGet');
        }
        // parse inputs
        $resourcePath = "/Customers/reset-password/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeamMemberAccessToken',
                '/Customers/reset-password/token'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeamMemberAccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeamMemberAccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersResetPost
     *
     * Reset password for a user with email.
     *
     * @param object $options  (required)
     * @return void
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersResetPost($options)
    {
        list($response) = $this->customersResetPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation customersResetPostWithHttpInfo
     *
     * Reset password for a user with email.
     *
     * @param object $options  (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersResetPostWithHttpInfo($options)
    {
        // verify the required parameter 'options' is set
        if ($options === null) {
            throw new \InvalidArgumentException('Missing the required parameter $options when calling customersResetPost');
        }
        // parse inputs
        $resourcePath = "/Customers/reset";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Customers/reset'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customersUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Customer $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersUpdatePost($where = null, $data = null)
    {
        list($response) = $this->customersUpdatePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation customersUpdatePostWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Customer $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersUpdatePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Customers/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/Customers/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Customer $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersUpsertWithWherePost($where = null, $data = null)
    {
        list($response) = $this->customersUpsertWithWherePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation customersUpsertWithWherePostWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\Customer $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function customersUpsertWithWherePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Customers/upsertWithWhere";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/Customers/upsertWithWhere'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
