<?php
/**
 * PortalTemplateFolderThroughApi
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Tweak\Api\Configuration;
use \Tweak\Api\ApiClient;
use \Tweak\Api\ApiException;
use \Tweak\Api\ObjectSerializer;

/**
 * PortalTemplateFolderThroughApi Class Doc Comment
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortalTemplateFolderThroughApi
{

    /**
     * API Client
     *
     * @var \Tweak\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Tweak\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Tweak\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apidevcdn.tweak.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Tweak\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Tweak\Api\ApiClient $apiClient set the API client
     *
     * @return PortalTemplateFolderThroughApi
     */
    public function setApiClient(\Tweak\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation portalTemplateFolderThroughsChangeStreamGet
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsChangeStreamGet($options = null)
    {
        list($response) = $this->portalTemplateFolderThroughsChangeStreamGetWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsChangeStreamGetWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsChangeStreamGetWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/PortalTemplateFolderThroughs/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsChangeStreamPost
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return \SplFileObject
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsChangeStreamPost($options = null)
    {
        list($response) = $this->portalTemplateFolderThroughsChangeStreamPostWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsChangeStreamPostWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsChangeStreamPostWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/change-stream";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/PortalTemplateFolderThroughs/change-stream'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsCountGet
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsCountGet($where = null)
    {
        list($response) = $this->portalTemplateFolderThroughsCountGetWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsCountGetWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsCountGetWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/PortalTemplateFolderThroughs/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsFindOneGet
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsFindOneGet($filter = null)
    {
        list($response) = $this->portalTemplateFolderThroughsFindOneGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsFindOneGetWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsFindOneGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/findOne";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/findOne'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsGet
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough[]
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsGet($filter = null)
    {
        list($response) = $this->portalTemplateFolderThroughsGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsGetWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsGetWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough[]',
                '/PortalTemplateFolderThroughs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdDelete
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return object
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdDelete($id)
    {
        list($response) = $this->portalTemplateFolderThroughsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdDeleteWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdDelete');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/PortalTemplateFolderThroughs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdExistsGet
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdExistsGet($id)
    {
        list($response) = $this->portalTemplateFolderThroughsIdExistsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdExistsGetWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdExistsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdExistsGet');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}/exists";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/PortalTemplateFolderThroughs/{id}/exists'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdGet
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdGet($id, $filter = null)
    {
        list($response) = $this->portalTemplateFolderThroughsIdGetWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdGetWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdGetWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdGet');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdHead
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdHead($id)
    {
        list($response) = $this->portalTemplateFolderThroughsIdHeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdHeadWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdHeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdHead');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/PortalTemplateFolderThroughs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdPatch
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id PortalTemplateFolderThrough id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdPatch($id, $data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsIdPatchWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdPatchWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id PortalTemplateFolderThrough id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdPatchWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdPatch');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdPortalFolderGet
     *
     * Fetches belongsTo relation portalFolder.
     *
     * @param string $id PortalTemplateFolderThrough id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolder
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdPortalFolderGet($id, $refresh = null)
    {
        list($response) = $this->portalTemplateFolderThroughsIdPortalFolderGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdPortalFolderGetWithHttpInfo
     *
     * Fetches belongsTo relation portalFolder.
     *
     * @param string $id PortalTemplateFolderThrough id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdPortalFolderGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdPortalFolderGet');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}/portalFolder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolder',
                '/PortalTemplateFolderThroughs/{id}/portalFolder'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdPut
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdPut($id, $data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsIdPutWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdPutWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdPutWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdPut');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdReplacePost
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdReplacePost($id, $data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsIdReplacePostWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdReplacePostWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdReplacePostWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdReplacePost');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}/replace";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/{id}/replace'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsIdTemplateGet
     *
     * Fetches belongsTo relation template.
     *
     * @param string $id PortalTemplateFolderThrough id (required)
     * @param bool $refresh  (optional)
     * @return \Swagger\Client\Model\Template
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdTemplateGet($id, $refresh = null)
    {
        list($response) = $this->portalTemplateFolderThroughsIdTemplateGetWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsIdTemplateGetWithHttpInfo
     *
     * Fetches belongsTo relation template.
     *
     * @param string $id PortalTemplateFolderThrough id (required)
     * @param bool $refresh  (optional)
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsIdTemplateGetWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling portalTemplateFolderThroughsIdTemplateGet');
        }
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/{id}/template";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Template',
                '/PortalTemplateFolderThroughs/{id}/template'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Template', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Template', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsPatch
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsPatch($data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsPatchWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsPatchWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsPatchWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsPost
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsPost($data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsPostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsPostWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsPostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsPut
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsPut($data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsPutWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsPutWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsPutWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsReplaceOrCreatePost
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsReplaceOrCreatePost($data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsReplaceOrCreatePostWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsReplaceOrCreatePostWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data Model instance data (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsReplaceOrCreatePostWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/replaceOrCreate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/replaceOrCreate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsUpdatePost
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsUpdatePost($where = null, $data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsUpdatePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsUpdatePostWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsUpdatePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/PortalTemplateFolderThroughs/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation portalTemplateFolderThroughsUpsertWithWherePost
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data An object of model property name/value pairs (optional)
     * @return \Swagger\Client\Model\PortalTemplateFolderThrough
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsUpsertWithWherePost($where = null, $data = null)
    {
        list($response) = $this->portalTemplateFolderThroughsUpsertWithWherePostWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation portalTemplateFolderThroughsUpsertWithWherePostWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Swagger\Client\Model\PortalTemplateFolderThrough $data An object of model property name/value pairs (optional)
     * @return array of \Swagger\Client\Model\PortalTemplateFolderThrough, HTTP status code, HTTP response headers (array of strings)
     * @throws \Tweak\Api\ApiException on non-2xx response
     */
    public function portalTemplateFolderThroughsUpsertWithWherePostWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/PortalTemplateFolderThroughs/upsertWithWhere";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded','application/xml','text/xml'));

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortalTemplateFolderThrough',
                '/PortalTemplateFolderThroughs/upsertWithWhere'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortalTemplateFolderThrough', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortalTemplateFolderThrough', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
