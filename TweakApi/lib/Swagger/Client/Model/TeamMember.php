<?php
/**
 * TeamMember
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TeamMember Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Tweak\Api
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TeamMember implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TeamMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'roles' => 'string[]',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'id' => 'string',
        'customerId' => 'string',
        'teamId' => 'string',
        'customer' => '\Swagger\Client\Model\Customer',
        'team' => '\Swagger\Client\Model\Team',
        'portals' => '\Swagger\Client\Model\Portal[]',
        'uploadedTemplates' => '\Swagger\Client\Model\Template[]',
        'templates' => '\Swagger\Client\Model\Template[]',
        'invitationTickets' => '\Swagger\Client\Model\InvitationTicket[]',
        'requestedDesigns' => '\Swagger\Client\Model\Design[]',
        'requestedDesignExports' => '\Swagger\Client\Model\DesignExport[]',
        'assignedDesigns' => '\Swagger\Client\Model\Design[]',
        'reviewedDesigns' => '\Swagger\Client\Model\Design[]',
        'commentedDesigns' => '\Swagger\Client\Model\Design[]',
        'designComments' => '\Swagger\Client\Model\DesignComment[]',
        'designFolders' => '\Swagger\Client\Model\DesignFolder[]',
        'workflows' => '\Swagger\Client\Model\Workflow[]',
        'imageFolders' => '\Swagger\Client\Model\ImageFolder[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'roles' => 'roles',
        'created' => 'created',
        'modified' => 'modified',
        'id' => 'id',
        'customerId' => 'customerId',
        'teamId' => 'teamId',
        'customer' => 'customer',
        'team' => 'team',
        'portals' => 'portals',
        'uploadedTemplates' => 'uploadedTemplates',
        'templates' => 'templates',
        'invitationTickets' => 'invitationTickets',
        'requestedDesigns' => 'requestedDesigns',
        'requestedDesignExports' => 'requestedDesignExports',
        'assignedDesigns' => 'assignedDesigns',
        'reviewedDesigns' => 'reviewedDesigns',
        'commentedDesigns' => 'commentedDesigns',
        'designComments' => 'designComments',
        'designFolders' => 'designFolders',
        'workflows' => 'workflows',
        'imageFolders' => 'imageFolders'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'roles' => 'setRoles',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'id' => 'setId',
        'customerId' => 'setCustomerId',
        'teamId' => 'setTeamId',
        'customer' => 'setCustomer',
        'team' => 'setTeam',
        'portals' => 'setPortals',
        'uploadedTemplates' => 'setUploadedTemplates',
        'templates' => 'setTemplates',
        'invitationTickets' => 'setInvitationTickets',
        'requestedDesigns' => 'setRequestedDesigns',
        'requestedDesignExports' => 'setRequestedDesignExports',
        'assignedDesigns' => 'setAssignedDesigns',
        'reviewedDesigns' => 'setReviewedDesigns',
        'commentedDesigns' => 'setCommentedDesigns',
        'designComments' => 'setDesignComments',
        'designFolders' => 'setDesignFolders',
        'workflows' => 'setWorkflows',
        'imageFolders' => 'setImageFolders'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'roles' => 'getRoles',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'id' => 'getId',
        'customerId' => 'getCustomerId',
        'teamId' => 'getTeamId',
        'customer' => 'getCustomer',
        'team' => 'getTeam',
        'portals' => 'getPortals',
        'uploadedTemplates' => 'getUploadedTemplates',
        'templates' => 'getTemplates',
        'invitationTickets' => 'getInvitationTickets',
        'requestedDesigns' => 'getRequestedDesigns',
        'requestedDesignExports' => 'getRequestedDesignExports',
        'assignedDesigns' => 'getAssignedDesigns',
        'reviewedDesigns' => 'getReviewedDesigns',
        'commentedDesigns' => 'getCommentedDesigns',
        'designComments' => 'getDesignComments',
        'designFolders' => 'getDesignFolders',
        'workflows' => 'getWorkflows',
        'imageFolders' => 'getImageFolders'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['teamId'] = isset($data['teamId']) ? $data['teamId'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['portals'] = isset($data['portals']) ? $data['portals'] : null;
        $this->container['uploadedTemplates'] = isset($data['uploadedTemplates']) ? $data['uploadedTemplates'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
        $this->container['invitationTickets'] = isset($data['invitationTickets']) ? $data['invitationTickets'] : null;
        $this->container['requestedDesigns'] = isset($data['requestedDesigns']) ? $data['requestedDesigns'] : null;
        $this->container['requestedDesignExports'] = isset($data['requestedDesignExports']) ? $data['requestedDesignExports'] : null;
        $this->container['assignedDesigns'] = isset($data['assignedDesigns']) ? $data['assignedDesigns'] : null;
        $this->container['reviewedDesigns'] = isset($data['reviewedDesigns']) ? $data['reviewedDesigns'] : null;
        $this->container['commentedDesigns'] = isset($data['commentedDesigns']) ? $data['commentedDesigns'] : null;
        $this->container['designComments'] = isset($data['designComments']) ? $data['designComments'] : null;
        $this->container['designFolders'] = isset($data['designFolders']) ? $data['designFolders'] : null;
        $this->container['workflows'] = isset($data['workflows']) ? $data['workflows'] : null;
        $this->container['imageFolders'] = isset($data['imageFolders']) ? $data['imageFolders'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['roles'] === null) {
            $invalid_properties[] = "'roles' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['roles'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets roles
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     * @param string[] $roles
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \DateTime $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customerId
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     * @param string $customerId
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets teamId
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['teamId'];
    }

    /**
     * Sets teamId
     * @param string $teamId
     * @return $this
     */
    public function setTeamId($teamId)
    {
        $this->container['teamId'] = $teamId;

        return $this;
    }

    /**
     * Gets customer
     * @return \Swagger\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \Swagger\Client\Model\Customer $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets team
     * @return \Swagger\Client\Model\Team
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     * @param \Swagger\Client\Model\Team $team
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets portals
     * @return \Swagger\Client\Model\Portal[]
     */
    public function getPortals()
    {
        return $this->container['portals'];
    }

    /**
     * Sets portals
     * @param \Swagger\Client\Model\Portal[] $portals
     * @return $this
     */
    public function setPortals($portals)
    {
        $this->container['portals'] = $portals;

        return $this;
    }

    /**
     * Gets uploadedTemplates
     * @return \Swagger\Client\Model\Template[]
     */
    public function getUploadedTemplates()
    {
        return $this->container['uploadedTemplates'];
    }

    /**
     * Sets uploadedTemplates
     * @param \Swagger\Client\Model\Template[] $uploadedTemplates
     * @return $this
     */
    public function setUploadedTemplates($uploadedTemplates)
    {
        $this->container['uploadedTemplates'] = $uploadedTemplates;

        return $this;
    }

    /**
     * Gets templates
     * @return \Swagger\Client\Model\Template[]
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     * @param \Swagger\Client\Model\Template[] $templates
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }

    /**
     * Gets invitationTickets
     * @return \Swagger\Client\Model\InvitationTicket[]
     */
    public function getInvitationTickets()
    {
        return $this->container['invitationTickets'];
    }

    /**
     * Sets invitationTickets
     * @param \Swagger\Client\Model\InvitationTicket[] $invitationTickets
     * @return $this
     */
    public function setInvitationTickets($invitationTickets)
    {
        $this->container['invitationTickets'] = $invitationTickets;

        return $this;
    }

    /**
     * Gets requestedDesigns
     * @return \Swagger\Client\Model\Design[]
     */
    public function getRequestedDesigns()
    {
        return $this->container['requestedDesigns'];
    }

    /**
     * Sets requestedDesigns
     * @param \Swagger\Client\Model\Design[] $requestedDesigns
     * @return $this
     */
    public function setRequestedDesigns($requestedDesigns)
    {
        $this->container['requestedDesigns'] = $requestedDesigns;

        return $this;
    }

    /**
     * Gets requestedDesignExports
     * @return \Swagger\Client\Model\DesignExport[]
     */
    public function getRequestedDesignExports()
    {
        return $this->container['requestedDesignExports'];
    }

    /**
     * Sets requestedDesignExports
     * @param \Swagger\Client\Model\DesignExport[] $requestedDesignExports
     * @return $this
     */
    public function setRequestedDesignExports($requestedDesignExports)
    {
        $this->container['requestedDesignExports'] = $requestedDesignExports;

        return $this;
    }

    /**
     * Gets assignedDesigns
     * @return \Swagger\Client\Model\Design[]
     */
    public function getAssignedDesigns()
    {
        return $this->container['assignedDesigns'];
    }

    /**
     * Sets assignedDesigns
     * @param \Swagger\Client\Model\Design[] $assignedDesigns
     * @return $this
     */
    public function setAssignedDesigns($assignedDesigns)
    {
        $this->container['assignedDesigns'] = $assignedDesigns;

        return $this;
    }

    /**
     * Gets reviewedDesigns
     * @return \Swagger\Client\Model\Design[]
     */
    public function getReviewedDesigns()
    {
        return $this->container['reviewedDesigns'];
    }

    /**
     * Sets reviewedDesigns
     * @param \Swagger\Client\Model\Design[] $reviewedDesigns
     * @return $this
     */
    public function setReviewedDesigns($reviewedDesigns)
    {
        $this->container['reviewedDesigns'] = $reviewedDesigns;

        return $this;
    }

    /**
     * Gets commentedDesigns
     * @return \Swagger\Client\Model\Design[]
     */
    public function getCommentedDesigns()
    {
        return $this->container['commentedDesigns'];
    }

    /**
     * Sets commentedDesigns
     * @param \Swagger\Client\Model\Design[] $commentedDesigns
     * @return $this
     */
    public function setCommentedDesigns($commentedDesigns)
    {
        $this->container['commentedDesigns'] = $commentedDesigns;

        return $this;
    }

    /**
     * Gets designComments
     * @return \Swagger\Client\Model\DesignComment[]
     */
    public function getDesignComments()
    {
        return $this->container['designComments'];
    }

    /**
     * Sets designComments
     * @param \Swagger\Client\Model\DesignComment[] $designComments
     * @return $this
     */
    public function setDesignComments($designComments)
    {
        $this->container['designComments'] = $designComments;

        return $this;
    }

    /**
     * Gets designFolders
     * @return \Swagger\Client\Model\DesignFolder[]
     */
    public function getDesignFolders()
    {
        return $this->container['designFolders'];
    }

    /**
     * Sets designFolders
     * @param \Swagger\Client\Model\DesignFolder[] $designFolders
     * @return $this
     */
    public function setDesignFolders($designFolders)
    {
        $this->container['designFolders'] = $designFolders;

        return $this;
    }

    /**
     * Gets workflows
     * @return \Swagger\Client\Model\Workflow[]
     */
    public function getWorkflows()
    {
        return $this->container['workflows'];
    }

    /**
     * Sets workflows
     * @param \Swagger\Client\Model\Workflow[] $workflows
     * @return $this
     */
    public function setWorkflows($workflows)
    {
        $this->container['workflows'] = $workflows;

        return $this;
    }

    /**
     * Gets imageFolders
     * @return \Swagger\Client\Model\ImageFolder[]
     */
    public function getImageFolders()
    {
        return $this->container['imageFolders'];
    }

    /**
     * Sets imageFolders
     * @param \Swagger\Client\Model\ImageFolder[] $imageFolders
     * @return $this
     */
    public function setImageFolders($imageFolders)
    {
        $this->container['imageFolders'] = $imageFolders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Tweak\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Tweak\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


