<?php
/**
 * BillingLimitLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tweak\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.7-alpha.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BillingLimitLog Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Tweak\Api
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BillingLimitLog implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BillingLimitLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'value' => 'string',
        'operation' => 'string',
        'before' => '\Swagger\Client\Model\BillingLimitCounter',
        'after' => '\Swagger\Client\Model\BillingLimitCounter',
        'limit' => 'string',
        'message' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'id' => 'string',
        'billingId' => 'string',
        'billing' => '\Swagger\Client\Model\Billing'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'value' => 'value',
        'operation' => 'operation',
        'before' => 'before',
        'after' => 'after',
        'limit' => 'limit',
        'message' => 'message',
        'created' => 'created',
        'modified' => 'modified',
        'id' => 'id',
        'billingId' => 'billingId',
        'billing' => 'billing'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'value' => 'setValue',
        'operation' => 'setOperation',
        'before' => 'setBefore',
        'after' => 'setAfter',
        'limit' => 'setLimit',
        'message' => 'setMessage',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'id' => 'setId',
        'billingId' => 'setBillingId',
        'billing' => 'setBilling'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'value' => 'getValue',
        'operation' => 'getOperation',
        'before' => 'getBefore',
        'after' => 'getAfter',
        'limit' => 'getLimit',
        'message' => 'getMessage',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'id' => 'getId',
        'billingId' => 'getBillingId',
        'billing' => 'getBilling'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const OPERATION_INCREASE = 'increase';
    const OPERATION_DECREASE = 'decrease';
    const LIMIT_TEAM_MEMBER = 'teamMember';
    const LIMIT_UPLOADER = 'uploader';
    const LIMIT_PORTAL = 'portal';
    const LIMIT_JPEG = 'jpeg';
    const LIMIT_PROOF = 'proof';
    const LIMIT_HIGH_RES_PDF = 'highResPdf';
    const LIMIT_STORAGE = 'storage';
    const LIMIT_STOCK_IMAGE_LIBRARY = 'stockImageLibrary';
    const LIMIT_PRODUCT_DB_RECORD = 'productDbRecord';
    const LIMIT_BANDWIDTH = 'bandwidth';
    const LIMIT_PRINTER_API = 'printerApi';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INCREASE,
            self::OPERATION_DECREASE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLimitAllowableValues()
    {
        return [
            self::LIMIT_TEAM_MEMBER,
            self::LIMIT_UPLOADER,
            self::LIMIT_PORTAL,
            self::LIMIT_JPEG,
            self::LIMIT_PROOF,
            self::LIMIT_HIGH_RES_PDF,
            self::LIMIT_STORAGE,
            self::LIMIT_STOCK_IMAGE_LIBRARY,
            self::LIMIT_PRODUCT_DB_RECORD,
            self::LIMIT_BANDWIDTH,
            self::LIMIT_PRINTER_API,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['before'] = isset($data['before']) ? $data['before'] : null;
        $this->container['after'] = isset($data['after']) ? $data['after'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['billingId'] = isset($data['billingId']) ? $data['billingId'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['value'] === null) {
            $invalid_properties[] = "'value' can't be null";
        }
        $allowed_values = array("increase", "decrease");
        if (!in_array($this->container['operation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'operation', must be one of #{allowed_values}.";
        }

        if ($this->container['limit'] === null) {
            $invalid_properties[] = "'limit' can't be null";
        }
        $allowed_values = array("teamMember", "uploader", "portal", "jpeg", "proof", "highResPdf", "storage", "stockImageLibrary", "productDbRecord", "bandwidth", "printerApi");
        if (!in_array($this->container['limit'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'limit', must be one of #{allowed_values}.";
        }

        if ($this->container['message'] === null) {
            $invalid_properties[] = "'message' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['value'] === null) {
            return false;
        }
        $allowed_values = array("increase", "decrease");
        if (!in_array($this->container['operation'], $allowed_values)) {
            return false;
        }
        if ($this->container['limit'] === null) {
            return false;
        }
        $allowed_values = array("teamMember", "uploader", "portal", "jpeg", "proof", "highResPdf", "storage", "stockImageLibrary", "productDbRecord", "bandwidth", "printerApi");
        if (!in_array($this->container['limit'], $allowed_values)) {
            return false;
        }
        if ($this->container['message'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets operation
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     * @param string $operation
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowed_values = array('increase', 'decrease');
        if (!in_array($operation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'operation', must be one of 'increase', 'decrease'");
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets before
     * @return \Swagger\Client\Model\BillingLimitCounter
     */
    public function getBefore()
    {
        return $this->container['before'];
    }

    /**
     * Sets before
     * @param \Swagger\Client\Model\BillingLimitCounter $before
     * @return $this
     */
    public function setBefore($before)
    {
        $this->container['before'] = $before;

        return $this;
    }

    /**
     * Gets after
     * @return \Swagger\Client\Model\BillingLimitCounter
     */
    public function getAfter()
    {
        return $this->container['after'];
    }

    /**
     * Sets after
     * @param \Swagger\Client\Model\BillingLimitCounter $after
     * @return $this
     */
    public function setAfter($after)
    {
        $this->container['after'] = $after;

        return $this;
    }

    /**
     * Gets limit
     * @return string
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param string $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $allowed_values = array('teamMember', 'uploader', 'portal', 'jpeg', 'proof', 'highResPdf', 'storage', 'stockImageLibrary', 'productDbRecord', 'bandwidth', 'printerApi');
        if (!in_array($limit, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'limit', must be one of 'teamMember', 'uploader', 'portal', 'jpeg', 'proof', 'highResPdf', 'storage', 'stockImageLibrary', 'productDbRecord', 'bandwidth', 'printerApi'");
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \DateTime $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets billingId
     * @return string
     */
    public function getBillingId()
    {
        return $this->container['billingId'];
    }

    /**
     * Sets billingId
     * @param string $billingId
     * @return $this
     */
    public function setBillingId($billingId)
    {
        $this->container['billingId'] = $billingId;

        return $this;
    }

    /**
     * Gets billing
     * @return \Swagger\Client\Model\Billing
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     * @param \Swagger\Client\Model\Billing $billing
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Tweak\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Tweak\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


